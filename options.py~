#501 Lines
from PyQt4 import QtGui,QtCore
import syntaxcpp,syntaxc,syntaxcs
import re

class winoptions(QtGui.QDialog):

    def __init__(self,parent=None):
        global encoding,indent
        QtGui.QMainWindow.__init__(self,parent)                      
        self.setGeometry(100,100,701,460)
        self.setWindowTitle('Options')
               
        self.encodinglabel = QtGui.QLabel('Encoding:',self)
        self.encodinglabel.setGeometry(30,30,66,17)
        self.page1 = QtGui.QWidget(self)
        self.tabs = QtGui.QTabWidget(self)
        self.vbox1 = QtGui.QVBoxLayout(self.page1)
        
        self.radioc = QtGui.QRadioButton('C',self.tabs)
        self.radioc.setGeometry(220,30,113,22)
        self.radiocpp = QtGui.QRadioButton('C++',self.tabs)
        self.radiocpp.setGeometry(220,60,113,22)
        self.radiocs = QtGui.QRadioButton('C#',self.tabs)
        
        self.radioplain = QtGui.QRadioButton('Plain Text',self.tabs)
        self.radioplain.setGeometry(220,90,113,22)
        
        indent = 'No'
        encoding='PlainText'
        gcccommand =''
        tcccommand =''
        gppcommand=''
        gmcscommand = ''
        self.cdefault = 'GCC'
        
        try:
            
            settings = ''
            settingsfile = open('./settings.ini','r')
            for line in settingsfile:
                settings = settings + line
            settingsarray = settings.split(' ')
            encoding = settingsarray[2]
            indent = settingsarray[5]
            settingsfile.close()
          
            for i in range(11,len(settingsarray)):
                if settingsarray[i] == '\nG++':
                    break
                if i == 11:
                    gcccommand = settingsarray[i]
                else:
                    gcccommand = gcccommand + ' '+ settingsarray[i]

            for i in range(settingsarray.index('\nG++') + 2, len(settingsarray)):
                if settingsarray[i] == '\nTCC':
                    break
                if gppcommand == '':
                    gppcommand = settingsarray[i]
                else:
                    gppcommand = gppcommand + ' '+ settingsarray[i]
                

            for i in range(settingsarray.index('\nTCC') + 2, len(settingsarray)):
                if settingsarray[i] == '\nGMCS':
                    break
                if tcccommand == '':
                    tcccommand = settingsarray[i]
                else:
                    tcccommand = tcccommand + ' '+ settingsarray[i]

            for i in range(settingsarray.index('\nGMCS') + 2, len(settingsarray)):
                if gmcscommand == '':
                    gmcscommand = settingsarray[i]
                else:
                    gmcscommand = gmcscommand + ' ' + settingsarray[i]
                
            self.cdefault = settingsarray[8] 

        except:
            pass
    
        if encoding == 'C':
            self.radioc.setChecked(True)
        if encoding == 'C++':
            self.radiocpp.setChecked(True)
        if encoding == 'PlainText':
            self.radioplain.setChecked(True)
               
        self.indentlabel = QtGui.QLabel('Indentation',self.page1)
        self.indentlabel.show()
        self.indentoption = QtGui.QCheckBox('Enable/Disable',self.page1)
        self.indentoption.show()
        self.cmdcancel = QtGui.QPushButton('Cancel',self)
        self.cmdcancel.setGeometry(500,420,98,27)
        self.cmdcancel.show()
        self.cmdok = QtGui.QPushButton('Ok',self)
        self.cmdok.setGeometry(600,420,98,27)
        self.cmdok.show()

        self.vbox1.addWidget(self.encodinglabel)
        self.vbox1.addWidget(self.radioc)
        self.vbox1.addWidget(self.radiocpp)
        self.vbox1.addWidget(self.radioplain)
        self.vbox1.addWidget(self.radiocs)
        self.vbox1.addWidget(self.indentlabel)
        self.vbox1.addWidget(self.indentoption)
        self.tabs.setGeometry(0,0,691,411)
        self.tabs.addTab(self.page1,'General')
        
        
        self.radioc.show()
        self.radiocpp.show()
        self.radioplain.show()
        self.encodinglabel.show()

        self.page2 = QtGui.QWidget(self)
        self.vbox2 = QtGui.QVBoxLayout(self.page2)
        
        self.gcclabel = QtGui.QLabel('GCC',self.page2)
        self.gcclabel.setGeometry(20,10,66,17)
        self.txtgcc = QtGui.QLineEdit(self.page2)
        self.txtgcc.setGeometry(20,43,401,27)
        self.txtgcc.setText(gcccommand)
        self.tcclabel = QtGui.QLabel('TCC',self.page2)
        self.tcclabel.setGeometry(20,90,66,17)
        self.txttcc = QtGui.QLineEdit(self.page2)
        self.txttcc.setText(tcccommand)
        self.txttcc.setGeometry(20,115,401,27)
        self.gpplabel = QtGui.QLabel('G++',self.page2)
        self.gpplabel.setGeometry(20,160,66,17)
        self.txtgpp = QtGui.QLineEdit(self.page2)
        self.txtgpp.setGeometry(20,190,401,27)
        self.txtgpp.setText(gppcommand)
        self.gmcslabel = QtGui.QLabel('C#',self.page2)
        self.gmcslabel.setGeometry(20,235,66,17)
        self.txtgmcs = QtGui.QLineEdit(self.page2)
        self.txtgmcs.setGeometry(20,265,401,27)
        self.txtgmcs.setText(gmcscommand)
        self.gccdefault = QtGui.QRadioButton('Set as default C compiler',self.page2)
        self.gccdefault.setGeometry(250,10,225,22)
        self.tccdefault = QtGui.QRadioButton('Set as default C compiler',self.page2)
        self.tccdefault.setGeometry(250,85,225,22)
        self.tabs.addTab(self.page2,'Compiler')

        self.pagegcc = QtGui.QWidget(self)
        self.vboxgcc = QtGui.QVBoxLayout(self.pagegcc)
        
        self.gcc_ansi = QtGui.QCheckBox("Support all C89 features(-ansi)",self.pagegcc)
        if gcccommand.count(' -ansi') ==1:
            self.gcc_ansi.setChecked(True)
            
        self.gcc_fhosted = QtGui.QCheckBox("Compile in hosted environment(-fhosted)",self.pagegcc)
        if gcccommand.count(' -fhosted') ==1:
            self.gcc_fhosted.setChecked(True)
            
        self.gcc_wformat = QtGui.QCheckBox("Check calls to format strings(-Wformat)",self.pagegcc)
        if gcccommand.count(' -wformat') ==1:
            self.gcc_wformat.setChecked(True)
            
        self.gcc_e = QtGui.QCheckBox("Preprocess Only(-E)",self.pagegcc)
        if gcccommand.count(' -E') ==1:
            self.gcc_e.setChecked(True)
            
        self.gcc_s = QtGui.QCheckBox("Compile Only; do not assemble or link(-S)",self.pagegcc)
        if gcccommand.count(' -S') ==1:
            self.gcc_s.setChecked(True)
            
        self.gcc_c = QtGui.QCheckBox("Compile and assemble but do not link(-c)",self.pagegcc)
        if gcccommand.count(' -c') ==1:
            self.gcc_c.setChecked(True)
            
        self.gcc_ffreestanding = QtGui.QCheckBox("Compile in freestanding environment (-ffreestanding)",self.pagegcc)
        if gcccommand.count(' -ffreestanding') ==1:
            self.gcc_ffreestanding.setChecked(True)
            
        self.gcc_fno_asm = QtGui.QCheckBox("Disables use of asm, inline, and typeof as keywords, \nallowing their use as identifiers.(-fno-asm)",self.pagegcc)
        if gcccommand.count(' -fno-asm') ==1:
            self.gcc_fno_asm.setChecked(True)
            
        self.gcc_trigraphs = QtGui.QCheckBox("Enables support for C89 trigraphs.(-trigraphs)",self.pagegcc)
        if gcccommand.count(' -trigraphs') ==1:
            self.gcc_trigraphs.setChecked(True)
            
        self.gcc_werror = QtGui.QCheckBox("Terminates compilation when warning occurs(-Werror)",self.pagegcc)
        if gcccommand.count(' -werror') ==1:
            self.gcc_werror.setChecked(True)
            
        self.gcc_std = QtGui.QCheckBox("Sets the Language to Value(-std)",self.pagegcc)
        self.gcc_std_line_edit = QtGui.QLineEdit('-std',self.pagegcc)
        ans = re.findall(r'\bstd\=.*\b',gcccommand)
        if ans != []:
            if ans.count('std') == 1:
                self.gcc_std.setChecked(True)
                self.gcc_std_line_edit.setText('-'+ans[0])
                
        self.gcc_o = QtGui.QCheckBox("Compile to file (-o <output>)",self.pagegcc)
        if gcccommand.count('-o <output>') == 1:
            self.gcc_o.setChecked(True)
            
        self.gcc_b = QtGui.QCheckBox("Add directory to compiler search path(-B <directory>)",self.pagegcc)
        self.gcc_b_line_edit = QtGui.QLineEdit('',self.pagegcc)
        self.gcc_b_add = QtGui.QPushButton('...',self.pagegcc)
        
        self.gcc_command_label = QtGui.QLabel('The following command will be executed to compile',self.pagegcc)
        self.gcc_command_line_edit = QtGui.QLineEdit(gcccommand,self.pagegcc)
        
        self.gcc_ansi.setGeometry(5,10,231,26)
        self.gcc_fhosted.setGeometry(5,40,291,26)
        self.gcc_wformat.setGeometry(5,80,291,26)
        self.gcc_e.setGeometry(5,110,281,26)
        self.gcc_s.setGeometry(5,140,301,26)
        self.gcc_c.setGeometry(5,170,291,26)
        self.gcc_ffreestanding.setGeometry(306,10,271,26)
        self.gcc_fno_asm.setGeometry(306,40,460,38)
        self.gcc_trigraphs.setGeometry(306,80,331,26)
        self.gcc_werror.setGeometry(306,110,391,26)
        self.gcc_std.setGeometry(306,140,241,26)
        self.gcc_std_line_edit.setGeometry(550,138,113,31)
        self.gcc_o.setGeometry(306,170,931,26)
        self.gcc_b.setGeometry(7,210,381,26)
        self.gcc_b_line_edit.setGeometry(10,240,621,31)
        self.gcc_b_add.setGeometry(640,240,41,31)
        self.gcc_command_label.setGeometry(10,300,341,26)
        self.gcc_command_line_edit.setGeometry(10,330,671,31)

        self.connect(self.gcc_ansi, QtCore.SIGNAL('clicked()'),self.gcc_ansi_clicked)
        self.connect(self.gcc_fhosted, QtCore.SIGNAL('clicked()'),self.gcc_fhosted_clicked)
        self.connect(self.gcc_wformat, QtCore.SIGNAL('clicked()'),self.gcc_wformat_clicked)
        self.connect(self.gcc_e, QtCore.SIGNAL('clicked()'),self.gcc_e_clicked)
        self.connect(self.gcc_s, QtCore.SIGNAL('clicked()'),self.gcc_s_clicked)
        self.connect(self.gcc_c, QtCore.SIGNAL('clicked()'),self.gcc_c_clicked)
        self.connect(self.gcc_ffreestanding, QtCore.SIGNAL('clicked()'),self.gcc_ffreestanding_clicked)
        self.connect(self.gcc_fno_asm, QtCore.SIGNAL('clicked()'),self.gcc_fno_asm_clicked)
        self.connect(self.gcc_trigraphs, QtCore.SIGNAL('clicked()'),self.gcc_trigraphs_clicked)
        self.connect(self.gcc_werror, QtCore.SIGNAL('clicked()'),self.gcc_werror_clicked)
        self.connect(self.gcc_std, QtCore.SIGNAL('clicked()'),self.gcc_std_clicked)
        self.connect(self.gcc_o, QtCore.SIGNAL('clicked()'),self.gcc_o_clicked)
        self.connect(self.gcc_b, QtCore.SIGNAL('clicked()'),self.gcc_b_clicked)
        self.connect(self.gcc_b_add, QtCore.SIGNAL('clicked()'),self.gcc_b_add_clicked)
                
        self.tabs.addTab(self.pagegcc,'GNU C Compiler Options')
        self.tabs.show()
        
        if self.cdefault == 'GCC':
            self.gccdefault.setChecked(True)
        if self.cdefault == 'TCC':
            self.tccdefault.setChecked(True)
            
        if indent == 'True':
            self.indentoption.setChecked(True)
        else:
            self.indentoption.setChecked(False)
            
        self.connect(self.cmdok, QtCore.SIGNAL('clicked()'),self.ok)
        self.connect(self.cmdcancel, QtCore.SIGNAL('clicked()'),self.cancel)

    def gcc_ansi_clicked(self):

        text = str(self.gcc_command_line_edit.text())
        if self.gcc_ansi.isChecked():
            text = text + " -ansi"
        else:
            i = text.find(" -ansi")
            if i!=-1:
                text2 = text[:i]
                text2 = text2 + text[i+len(" -ansi"):]
                text = text2
        self.gcc_command_line_edit.setText(text)

    def gcc_fhosted_clicked(self):

        text = str(self.gcc_command_line_edit.text())
        if self.gcc_fhosted.isChecked():
            text = text + " -fhosted"
        else:
            i = text.find(" -fhosted")
            if i!=-1:
                text2 = text[:i]
                text2 = text2 + text[i+len(" -fhosted"):]
                text = text2
        self.gcc_command_line_edit.setText(text)

    def gcc_wformat_clicked(self):

        text = str(self.gcc_command_line_edit.text())
        if self.gcc_wformat.isChecked():
            text = text + " -Wformat"
        else:
            i = text.find(" -Wformat")
            if i!=-1:
                text2 = text[:i]
                text2 = text2 + text[i+len(" -Wformat"):]
                text = text2
        self.gcc_command_line_edit.setText(text)

    def gcc_e_clicked(self):

        text = str(self.gcc_command_line_edit.text())
        if self.gcc_e.isChecked():
            text = text + " -E"
        else:
            i = text.find(" -E")
            if i!=-1:
                text2 = text[:i]
                text2 = text2 + text[i+len(" -E"):]
                text = text2
        self.gcc_command_line_edit.setText(text)

    def gcc_s_clicked(self):

        text = str(self.gcc_command_line_edit.text())
        if self.gcc_s.isChecked():
            text = text + " -S"
        else:
            i = text.find(" -S")
            if i!=-1:
                text2 = text[:i]
                text2 = text2 + text[i+len(" -S"):]
                text = text2
        self.gcc_command_line_edit.setText(text)

    def gcc_c_clicked(self):

        text = str(self.gcc_command_line_edit.text())
        if self.gcc_c.isChecked():
            text = text + " -C"
        else:
            i = text.find(" -C")
            if i!=-1:
                text2 = text[:i]
                text2 = text2 + text[i+len(" -C"):]
                text = text2
        self.gcc_command_line_edit.setText(text)

    def gcc_ffreestanding_clicked(self):

        text = str(self.gcc_command_line_edit.text())
        if self.gcc_ffreestanding.isChecked():
            text = text + " -ffreestanding"
        else:
            i = text.find(" -ffreestanding")
            if i!=-1:
                text2 = text[:i]
                text2 = text2 + text[i+len(" -ffreestanding"):]
                text = text2
        self.gcc_command_line_edit.setText(text)

    def gcc_fno_asm_clicked(self):

        text = str(self.gcc_command_line_edit.text())
        if self.gcc_fno_asm.isChecked():
            text = text + " -fno-asm"
        else:
            i = text.find(" -fno-asm")
            if i!=-1:
                text2 = text[:i]
                text2 = text2 + text[i+len(" -fno-asm"):]
                text = text2
        self.gcc_command_line_edit.setText(text)

    def gcc_trigraphs_clicked(self):

        text = str(self.gcc_command_line_edit.text())
        if self.gcc_trigraphs.isChecked():
            text = text + " -trigraphs"
        else:
            i = text.find(" -trigraphs")
            if i!=-1:
                text2 = text[:i]
                text2 = text2 + text[i+len(" -trigraphs"):]
                text = text2
        self.gcc_command_line_edit.setText(text)

    def gcc_werror_clicked(self):

        text = str(self.gcc_command_line_edit.text())
        if self.gcc_werror.isChecked():
            text = text + " -Werror"
        else:
            i = text.find(" -Werror")
            if i!=-1:
                text2 = text[:i]
                text2 = text2 + text[i+len(" -Werror"):]
                text = text2
        self.gcc_command_line_edit.setText(text)

    def gcc_std_clicked(self):

        text = str(self.gcc_command_line_edit.text())
        if self.gcc_std.isChecked():
            if str(self.gcc_std_line_edit.text())!='-std':
                text = text + ' ' + str(self.gcc_std_line_edit.text())
            else:
                self.gcc_std.setChecked(False)
        else:
            ans = re.findall(r'\bstd\=.*\b',text)
            if ans !=[]:
                i = text.find('-'+ans[0])
                if i!=-1:
                    text2 = text[:i]
                    text2 = text2 + text[i+len(ans[0])+1:]
                    text = text2
        self.gcc_command_line_edit.setText(text)

    def gcc_o_clicked(self):

        text = str(self.gcc_command_line_edit.text())
        if self.gcc_o.isChecked():
            text = text + " -o <output>"
        else:
            i = text.find(" -o <output>")
            if i!=-1:
                text2 = text[:i]
                text2 = text2 + text[i+len(" -o <output>"):]
                text = text2
        self.gcc_command_line_edit.setText(text)

    def gcc_b_clicked(self):
        
        text = str(self.gcc_command_line_edit.text())
        if self.gcc_b.isChecked():
            if str(self.gcc_b_line_edit.text()) != '':
                text = text + " -B " + str(self.gcc_b_line_edit.text())
            else:
                self.gcc_b.setChecked(True)
        else:
            ans = re.findall(r'\bB\b.+\w',text)
            if ans !=[]:
                i = text.find('-'+ans[0])
                if i!=-1:
                    text2 = text[:i]
                    text2 = text2 + text[i+len("-"+ans[0]):]
                    text = text2
        self.gcc_command_line_edit.setText(text)
        
    def gcc_b_add_clicked(self):

        folder = str(QtGui.QFileDialog.getExistingDirectory(self,"Open Folder"))
        self.gcc_b_line_edit.setText(folder)

    def document(self,txtInput):
        
        self.txtInput = txtInput
        
    def cancel(self):
            
        self.close()

    def ok(self):
            
        global encoding,indent,gcccommmand,tcccommand,gppcommand
            
        if self.radiocpp.isChecked():                
            encoding = 'C++'
            self.txtInput.document().setDefaultFont(self.txtInput.currentFont())
            highlight = syntaxcpp.CPPHighlighter(self.txtInput.document())
                
        if self.radioc.isChecked():               
            encoding = 'C'
            self.txtInput.document().setDefaultFont(self.txtInput.currentFont())
            highlight = syntaxc.CHighlighter(self.txtInput.document())

        if self.radiocs.isChecked():
            encoding = 'C#'
            self.txtInput.document().setDefaultFont(self.txtInput.currentFont())
            highlight = syntaxcs.CHighlighter(self.txtInput.document())
                
        if self.radioplain.isChecked():
            encoding = 'PlainText'
            doc = QtGui.QTextDocument(self)
            doc.setPlainText(self.txtInput.toPlainText())
            doc.setDefaultFont(self.txtInput.currentFont())
            self.txtInput.setDocument(doc)
                
        if self.indentoption.isChecked():
            indent='True'
        else:
            indent='False'

        if self.gccdefault.isChecked():
            self.cdefault = 'GCC'
            
        if self.tccdefault.isChecked():
            self.cdefault = 'TCC'
            
        gcccommand = self.gcc_command_line_edit.text()
        gppcommand = self.txtgpp.text()
        tcccommand = self.txttcc.text()
        gmcscommand = self.txtgmcs.text()    
        settings = 'Encoding = ' + encoding + ' \nIndentation = ' + indent + ' \nDefualtCCompiler = ' + self.cdefault + ' \nGCC = ' + gcccommand + ' \nG++ = ' + gppcommand +' \nTCC = ' + tcccommand + ' \nGMCS = ' + gmcscommand
                               
        try:
            os.remove('./settings.ini')
        except:
            pass
            
        settingsfile = open('./settings.ini','w')
        settingsfile.write(settings)
        settingsfile.close()
      
