#382 lines

from PyQt4 import QtGui
from PyQt4.Qt import QTextCursor
from PyQt4 import QtGui,QtCore 
import re
global indentct,indentTF
indentct = 0

class txtInputclass(QtGui.QTextEdit):
       
    def __init__(self,parent=None):
        
        QtGui.QTextEdit.__init__(self,parent)
        self.openbrackets = 0
        self.closebrackets = 0
        self.removeselectedtext = True
        self.bracketspaired=0
        self.encoding = ''
        self.includefilefuncarray = []
        self.includefiledatatypearray = []
        self.includefileclassarray = []
        self.object_classarray = []
        self.object_namearray = []
        self.funcmatchlist = QtGui.QListWidget(self)
        self.connect(self.funcmatchlist,QtCore.SIGNAL('itemDoubleClicked(QListWidgetItem*)'),self.funcmatchlistdoubleclicked)
        self.funcmatchlist.setVisible(False)
        self.prev_pos = 0
        self.remove_prev_highlight = False
        self.indentwidth = ''
        self.indentTF = ''
        self.inc_indent_syms = ''
        self.dec_indent_syms = ''
        
        try:
            
            settings = ''
            settingsfile = open('./settings.ini','r')
            for line in settingsfile:
                settings = settings + line
            
            settingsfile.close()
            
            for i in range(settings.index('<indentwidth>')+len('<indentwidth>'),settings.index('</indentwidth>')):
                self.indentwidth = self.indentwidth + settings[i]
                
            for i in range(settings.index('<incindentsymbols>')+len('<incindentsymbols>'),settings.index('</incindentsymbols>')):
                self.inc_indent_syms = self.inc_indent_syms + settings[i]
                
            for i in range(settings.index('<decindentsymbols>')+len('<decindentsymbols>'),settings.index('</decindentsymbols>')):
                self.dec_indent_syms = self.dec_indent_syms + settings[i]

            for i in range(settings.index('<indentation>')+len('<indentation>'),settings.index('</indentation>')):
                self.indentTF= self.indentTF + settings[i]
                
        except:
            pass

    def funcmatchlistdoubleclicked(self,item):
        
        cc = self.textCursor()
        cc.select(QTextCursor.WordUnderCursor)
        cc.removeSelectedText()
        text = str(item.text())
        if "(" in text and ")" in text and "=" not in text:
            add = True
            index_open_bracket = text.rfind('(')
            space_rindex = 0
            if ' ' in text:                                        
                can_break = False
                for space_rindex in range(index_open_bracket+1,0,-1):
                    if text[space_rindex].isalnum() or text[space_rindex] == '_':
                        can_break = True
                    else:
                        if text[space_rindex].isspace() and can_break == True:
                            break          
            
        if "(" not in text and ")" not in text:
            if '=' in text:
                equals_index = text.rfind('=')
                can_break = False
                for space_rindex in range(equals_index,0,-1):
                    if text[space_rindex].isalnum() or text[space_rindex] == '_':
                        can_break = True
                    else:
                        if text[space_rindex].isspace() and can_break == True:
                            break                                    
            else:
                add = True
                space_rindex = text.rfind(' ')
        self.insertPlainText(text[space_rindex:].lstrip())
        self.funcmatchlist.setVisible(False)

    def highlightcurrentline(self):

        cc = self.textCursor()
        self.prev_pos = cc.position()
        cc.setPosition(cc.position()+1,cc.MoveAnchor)
        cc.select(cc.LineUnderCursor)
        self.setTextCursor(cc)
        self.setTextBackgroundColor(QtGui.QColor(242,242,242,255))
        cc.setPosition(self.prev_pos,cc.MoveAnchor)
        self.setTextCursor(cc)
        self.remove_prev_highlight = True
          
    def keyPressEvent(self,event):

        global indentct
        if self.removeselectedtext == False:
            cc = self.textCursor()
            cc.setPosition(cc.position(),QTextCursor.MoveAnchor)
            self.setTextCursor(cc)
            self.removeselectedtext = True
        line =''
        k=0

        if event.key() == 16777234 or event.key() == 16777219: #16777234 represents Left Key 16777219 for Backspace Key

            cc = self.textCursor()
            currentposition = cc.position()
            cc.select(QTextCursor.LineUnderCursor)
            line = cc.selectedText()
            spaces = 0
            for d in line:
                if d == ' ':
                    spaces+=1
                else:
                    break
            cc.movePosition(QTextCursor.StartOfLine,QTextCursor.MoveAnchor)
            lineposition = cc.position()
            maxleftposition = cc.position()+spaces
             
            if event.key() == 16777219:
                if currentposition <= maxleftposition and currentposition != lineposition:
                    if (currentposition-lineposition)%len(self.indentwidth)==0:
                        cc.setPosition(currentposition,QTextCursor.MoveAnchor)
                        cc.setPosition(currentposition-len(self.indentwidth)+1,QTextCursor.KeepAnchor)
                        cc.removeSelectedText()
                    else:
                        cc.setPosition(currentposition,QTextCursor.MoveAnchor)
                        cc.setPosition(lineposition+int(float(currentposition-lineposition)/float(len(self.indentwidth)))*len(self.indentwidth)+1,QTextCursor.KeepAnchor)
                        cc.removeSelectedText()
                    self.setTextCursor(cc)
            else:
                
                if currentposition <= maxleftposition and currentposition != lineposition:
                    if (currentposition-lineposition)%len(self.indentwidth)==0:
                        cc.setPosition(currentposition-len(self.indentwidth)+1,QTextCursor.MoveAnchor)
                    else:
                        cc.setPosition(lineposition+int(float(currentposition-lineposition)/float(len(self.indentwidth)))*len(self.indentwidth)+1,QTextCursor.MoveAnchor)
                    self.setTextCursor(cc)
                                          
        if self.indentTF == 'True':
            if event.key() == 16777220 and indentct>=0:
                cc = self.textCursor()
                #cc.movePosition(QTextCursor.EndOfLine, QTextCursor.MoveAnchor)
                cc.movePosition(QTextCursor.StartOfLine,QTextCursor.KeepAnchor)
                line = str(cc.selectedText())
                
                if self.includefileclassarray != []:
                    #Match class names and add object names
                    for i in self.includefileclassarray:
                        if i in line:
                            try:
                                p = re.findall(r'\b%s\b\s*(\w+.?\;)'%i,line,re.DOTALL)[0] ##reg exp for finding only one object name, if there are more than one then except block will be called
                                if ';' in p:
                                   object_array = [p[0:len(p)-1]]
                                else:
                                   object_array = p.split(',')
                            except IndexError :
                                object_array = re.findall(r'\b%s\b\s*(\w+.+)?\;'%i,line,re.DOTALL)[0].split(',') #reg exp for finding more than one object name
                                       
                            for j in object_array:
                                try:
                                    index = self.object_namearray.index(j)
                                    #print index
                                    if i != self.object_classarray[index]:
                                        self.object_classarray[index] = i
                                except:
                                    self.object_namearray.append(j)
                                    self.object_classarray.append(i)
                    #print self.object_namearray
                    #print self.object_classarray
                if line == '':
                    cc.movePosition(QTextCursor.EndOfLine, QTextCursor.MoveAnchor)
                    cc.movePosition(QTextCursor.StartOfLine,QTextCursor.KeepAnchor)
                    line = str(cc.selectedText())
                
                linesplit = line.split(self.indentwidth)
                indentct = 0
                if line != '':
                    for i in range(0,len(linesplit)-1):
                        d = linesplit[i]
                        if d == '':
                            indentct +=1
                        if d != '':
                            break
                    
                    cc.clearSelection()
                    cc.movePosition(QTextCursor.EndOfLine,QTextCursor.MoveAnchor)
                    inc_count=0
                    dec_count=0
                    for d in self.inc_indent_syms:
                        if d!=' ' and d!='\t':
                            inc_count += line.count(d)
                    for d in self.dec_indent_syms:
                        if d!=' ' and d!='\t':
                            dec_count += line.count(d)
                    if inc_count>dec_count:
                        k = 1                                                                        
                        indentct +=1
                        if indentct == 0:
                            QtGui.QTextEdit.keyPressEvent(self,event)
                            cc.movePosition(QTextCursor.StartOfLine, QTextCursor.MoveAnchor)
                            cc.insertText(self.indentwidth)
                        QtGui.QTextEdit.keyPressEvent(self,event)
                        cc.movePosition(QTextCursor.StartOfLine, QTextCursor.MoveAnchor)
                        for i in range(0,indentct):
                            cc.insertText(self.indentwidth)
                    break_index = line.find('break;')
                    continue_index = line.find('continue;')
                    index1 = -1
                    if break_index != -1 and line[break_index-1] == ' ':
                        index1 = break_index
                    if continue_index != -1 and line[continue_index-1] == ' ':
                        index1 = continue_index
                    if inc_count<dec_count or index1 !=-1:
                        k=1
                        
                        indentct -= 1
                        if indentct == 0:
                            QtGui.QTextEdit.keyPressEvent(self,event)
                        else:
                            QtGui.QTextEdit.keyPressEvent(self,event)
                            cc.movePosition(QTextCursor.StartOfLine, QTextCursor.MoveAnchor)
                            for i in range(0,indentct):
                                cc.insertText(self.indentwidth)
                        
                    
                    if inc_count==dec_count and k !=1:
                        k=0
                                               
                        QtGui.QTextEdit.keyPressEvent(self,event)
                        cc.movePosition(QtGui.QTextCursor.StartOfLine, QTextCursor.MoveAnchor)
                        for i in range(0,indentct):
                            cc.insertText(self.indentwidth)
                                                  
                        #if prevchar == '':
                           # QtGui.QTextEdit.keyPressEvent(self,event)
                else:
                    QtGui.QTextEdit.keyPressEvent(self,event)

            else:   
                QtGui.QTextEdit.keyPressEvent(self,event)
                if indentct < 0:
                    indentct = 0
        else:
            QtGui.QTextEdit.keyPressEvent(self,event)

        if event.key() == 16777232: #Home key has 16777232
            cc = self.textCursor()
            cc.select(QTextCursor.LineUnderCursor)
            line = cc.selectedText()
            spaces = 0
            for d in line:
                if d == ' ':
                    spaces+=1
                else:
                    break
            prev_pos = cc.position()            
            cc.movePosition(QTextCursor.StartOfLine,QTextCursor.MoveAnchor)
            maxleftposition = cc.position()+spaces
            
            if event.modifiers() == QtCore.Qt.ShiftModifier:
                cc.setPosition(prev_pos,cc.MoveAnchor)
                cc.setPosition(maxleftposition,QTextCursor.KeepAnchor)
            else:
                cc.setPosition(maxleftposition,QTextCursor.MoveAnchor)
            self.setTextCursor(cc)
            
        if event.key() == 41:
            cc = self.textCursor()
            self.closebrackets +=1
            pos = cc.columnNumber()
            cc.select(QTextCursor.LineUnderCursor)
            line = str(cc.selectedText())
            self.indexopenbracketarray = []
            self.indexclosebracketarray = []
            index = 0
            indexopenbracket = -1
            for i in range(line.count("(")):
                index = line.find("(",index)
                self.indexopenbracketarray.append(index)
                index +=1
            index = 0
            if len(self.indexopenbracketarray) >0:
                for i in range(line.count(")")):
                    index = line.find(")",index)
                    self.indexclosebracketarray.append(index)
                    index +=1
                
                for i in range(line.count(")")):
                    s = line[self.indexopenbracketarray[len(self.indexopenbracketarray)-1-i]:self.indexclosebracketarray[len(self.indexclosebracketarray)-1]+1]
                    s1=""
                    if s.count(")") == s.count("("):
                        if pos == self.indexclosebracketarray[len(self.indexclosebracketarray)-1]+1:
                            indexopenbracket = self.indexopenbracketarray[len(self.indexopenbracketarray)-1-i]
                        else:
                            for j in range(line.count(")")):
                                if self.indexopenbracketarray[len(self.indexopenbracketarray)-1-j] <= pos:
                                    s1 = line[self.indexopenbracketarray[len(self.indexopenbracketarray)-1-j]:pos]
                                    if s1.count(")") == s1.count("("):
                                        indexopenbracket = line.index(s1)
                                        break
                        break
                
                if indexopenbracket != -1:
                    cc.movePosition(QTextCursor.StartOfLine,QTextCursor.MoveAnchor)
                    cc.movePosition(QTextCursor.NextCharacter,QTextCursor.MoveAnchor,indexopenbracket)
                    cc.movePosition(QTextCursor.NextCharacter,QTextCursor.KeepAnchor,pos-indexopenbracket)
                    self.setTextCursor(cc)
                    self.removeselectedtext = False
                    
        if len(self.includefilefuncarray)!=0:
            if event.key() == 32 or event.key() == 16777217 or event.key() == 16777220: #for Tab,space and enter key
                self.funcmatchlist.setVisible(False)
            else:
                cc = self.textCursor()
                cc.select(QTextCursor.WordUnderCursor)
                word = str(cc.selectedText())
                self.funcmatchlist.setVisible(False)
                self.funcmatchlist.clear()
                
                if len(word)>=3:
                    if self.includefileclassarray == []:                            
                        for i in range(len(self.includefilefuncarray)):
                            if word == self.includefilefuncarray[i][0:len(word)]:
                                x1,y1,x2,y2 = self.cursorRect().getCoords()
                                self.funcmatchlist.setGeometry(x2,y2,181,151)
                                self.funcmatchlist.addItem(self.includefiledatatypearray[i] + " "+ self.includefilefuncarray[i])
                                self.funcmatchlist.setVisible(True)                       

                cc.clearSelection()
                
        #If dot . is pressed then check whether there's an object and whether it is available
        if event.key() == 46 and self.object_namearray !=[]:            
            cc = self.textCursor()
            cc.movePosition(cc.WordLeft,cc.MoveAnchor,2)
            cc.select(QTextCursor.WordUnderCursor)
            word = cc.selectedText()
            try:
                index_object = self.object_namearray.index(word)            
                matched_class = self.object_classarray[index_object]
                index_class = self.includefileclassarray.index(matched_class)
                x1,y1,x2,y2 = self.cursorRect().getCoords()
                self.funcmatchlist.setGeometry(x2,y2,181,151)
                self.funcmatchlist.clear()
                self.funcmatchlist.setVisible(True)                       
                for i in range(len(self.includefilefuncarray[index_class])):
                    self.funcmatchlist.addItem(self.includefiledatatypearray[index_class][i] + " "+ self.includefilefuncarray[index_class][i])
            except:
                pass
            
        #if scope resolution operator :: is inserted           
        if event.key() == 58 and self.includefileclassarray !=[]:            

            cc = self.textCursor()
            cc.movePosition(cc.WordLeft,cc.KeepAnchor,1)
            cc.select(QTextCursor.WordUnderCursor)
            if str(cc.selectedText()) == '::':
                cc.select(QTextCursor.LineUnderCursor)
                line = cc.selectedText()
                for j in range(len(self.includefileclassarray)):
                    if self.includefileclassarray[j] in line:
                        index_class = j
                        x1,y1,x2,y2 = self.cursorRect().getCoords()
                        self.funcmatchlist.setGeometry(x2,y2,181,151)
                        self.funcmatchlist.clear()
                        self.funcmatchlist.setVisible(True)                       
                        for i in range(len(self.includefilefuncarray[index_class])):
                            self.funcmatchlist.addItem(self.includefiledatatypearray[index_class][i] + " "+ self.includefilefuncarray[index_class][i])
