
GType      gtk_recent_chooser_widget_get_type        (void) ;
GtkWidget *gtk_recent_chooser_widget_new             (void);
GtkWidget *gtk_recent_chooser_widget_new_for_manager (GtkRecentManager *manager);
GType      gtk_dialog_get_type (void) ;
GtkWidget* gtk_dialog_new      (void);
GtkWidget* gtk_dialog_new_with_buttons (const gchar     *title,                                         GtkWindow       *parent,                                         GtkDialogFlags   flags,                                         const gchar     *first_button_text,                                         ...) G_GNUC_NULL_TERMINATED;
void       gtk_dialog_add_action_widget (GtkDialog   *dialog,                                          GtkWidget   *child,                                          gint         response_id);
GtkWidget* gtk_dialog_add_button        (GtkDialog   *dialog,                                          const gchar *button_text,                                          gint         response_id);
void       gtk_dialog_add_buttons       (GtkDialog   *dialog,                                          const gchar *first_button_text,                                          ...) G_GNUC_NULL_TERMINATED;
void gtk_dialog_set_response_sensitive (GtkDialog *dialog,                                         gint       response_id,                                         gboolean   setting);
void gtk_dialog_set_default_response   (GtkDialog *dialog,                                         gint       response_id);
GtkWidget* gtk_dialog_get_widget_for_response (GtkDialog *dialog,                                                gint       response_id);
gint gtk_dialog_get_response_for_widget (GtkDialog *dialog,                                          GtkWidget *widget);
gboolean gtk_alternative_dialog_button_order (GdkScreen *screen);
void     gtk_dialog_set_alternative_button_order (GtkDialog *dialog,                                                   gint       first_response_id,                                                   ...);
void     gtk_dialog_set_alternative_button_order_from_array (GtkDialog *dialog,                                                              gint       n_params,                                                              gint      *new_order);
void gtk_dialog_response           (GtkDialog *dialog,                                     gint       response_id);
gint gtk_dialog_run                (GtkDialog *dialog);
GtkWidget * gtk_dialog_get_action_area  (GtkDialog *dialog);
GtkWidget * gtk_dialog_get_content_area (GtkDialog *dialog);
GType      gtk_accessible_get_type                 (void) ;
void       gtk_accessible_set_widget               (GtkAccessible *accessible,                                                     GtkWidget     *widget);
GtkWidget *gtk_accessible_get_widget               (GtkAccessible *accessible);
void       gtk_accessible_connect_widget_destroyed (GtkAccessible *accessible);
GType        gtk_color_button_get_type      (void) ;
GtkWidget *  gtk_color_button_new           (void);
GtkWidget *  gtk_color_button_new_with_rgba (const GdkRGBA  *rgba);
void         gtk_color_button_set_title     (GtkColorButton *button,                                              const gchar    *title);
const gchar *gtk_color_button_get_title     (GtkColorButton *button);
GtkWidget *gtk_color_button_new_with_color (const GdkColor *color);
void       gtk_color_button_set_color      (GtkColorButton *button,                                             const GdkColor *color);
void       gtk_color_button_get_color      (GtkColorButton *button,                                             GdkColor       *color);
void       gtk_color_button_set_alpha      (GtkColorButton *button,                                             guint16         alpha);
guint16    gtk_color_button_get_alpha      (GtkColorButton *button);
void         gtk_color_button_set_use_alpha (GtkColorButton *button,                                              gboolean        use_alpha);
gboolean     gtk_color_button_get_use_alpha (GtkColorButton *button);
void         gtk_color_button_set_rgba      (GtkColorButton *button,                                              const GdkRGBA  *rgba);
void         gtk_color_button_get_rgba      (GtkColorButton *button,                                              GdkRGBA        *rgba);
GType           gtk_radio_action_get_type          (void) ;
GtkRadioAction *gtk_radio_action_new               (const gchar           *name,                                                     const gchar           *label,                                                     const gchar           *tooltip,                                                     const gchar           *stock_id,                                                     gint                   value);
GSList         *gtk_radio_action_get_group         (GtkRadioAction        *action);
void            gtk_radio_action_set_group         (GtkRadioAction        *action,                                                     GSList                *group);
void            gtk_radio_action_join_group        (GtkRadioAction        *action,                                                     GtkRadioAction        *group_source);
gint            gtk_radio_action_get_current_value (GtkRadioAction        *action);
void            gtk_radio_action_set_current_value (GtkRadioAction        *action,                                                     gint                   current_value);
GType      gtk_border_get_type (void) ;
GtkBorder *gtk_border_new      (void) G_GNUC_MALLOC;
GtkBorder *gtk_border_copy     (const GtkBorder *border_);
void       gtk_border_free     (GtkBorder       *border_);
GType       gtk_separator_get_type (void) ;
GtkWidget * gtk_separator_new      (GtkOrientation orientation);
GType        gtk_text_buffer_get_type       (void) ;
GtkTextBuffer *gtk_text_buffer_new            (GtkTextTagTable *table);
gint           gtk_text_buffer_get_line_count (GtkTextBuffer   *buffer);
gint           gtk_text_buffer_get_char_count (GtkTextBuffer   *buffer);
GtkTextTagTable* gtk_text_buffer_get_tag_table (GtkTextBuffer  *buffer);
void gtk_text_buffer_set_text          (GtkTextBuffer *buffer,                                         const gchar   *text,                                         gint           len);
void gtk_text_buffer_insert            (GtkTextBuffer *buffer,                                         GtkTextIter   *iter,                                         const gchar   *text,                                         gint           len);
void gtk_text_buffer_insert_at_cursor  (GtkTextBuffer *buffer,                                         const gchar   *text,                                         gint           len);
gboolean gtk_text_buffer_insert_interactive           (GtkTextBuffer *buffer,                                                        GtkTextIter   *iter,                                                        const gchar   *text,                                                        gint           len,                                                        gboolean       default_editable);
gboolean gtk_text_buffer_insert_interactive_at_cursor (GtkTextBuffer *buffer,                                                        const gchar   *text,                                                        gint           len,                                                        gboolean       default_editable);
void     gtk_text_buffer_insert_range             (GtkTextBuffer     *buffer,                                                    GtkTextIter       *iter,                                                    const GtkTextIter *start,                                                    const GtkTextIter *end);
gboolean gtk_text_buffer_insert_range_interactive (GtkTextBuffer     *buffer,                                                    GtkTextIter       *iter,                                                    const GtkTextIter *start,                                                    const GtkTextIter *end,                                                    gboolean           default_editable);
void    gtk_text_buffer_insert_with_tags          (GtkTextBuffer     *buffer,                                                    GtkTextIter       *iter,                                                    const gchar       *text,                                                    gint               len,                                                    GtkTextTag        *first_tag,                                                    ...) G_GNUC_NULL_TERMINATED;
void    gtk_text_buffer_insert_with_tags_by_name  (GtkTextBuffer     *buffer,                                                    GtkTextIter       *iter,                                                    const gchar       *text,                                                    gint               len,                                                    const gchar       *first_tag_name,                                                    ...) G_GNUC_NULL_TERMINATED;
void     gtk_text_buffer_delete             (GtkTextBuffer *buffer, 					     GtkTextIter   *start, 					     GtkTextIter   *end);
gboolean gtk_text_buffer_delete_interactive (GtkTextBuffer *buffer, 					     GtkTextIter   *start_iter, 					     GtkTextIter   *end_iter, 					     gboolean       default_editable);
gboolean gtk_text_buffer_backspace          (GtkTextBuffer *buffer, 					     GtkTextIter   *iter, 					     gboolean       interactive, 					     gboolean       default_editable);
gchar          *gtk_text_buffer_get_text            (GtkTextBuffer     *buffer,                                                      const GtkTextIter *start,                                                      const GtkTextIter *end,                                                      gboolean           include_hidden_chars);
gchar          *gtk_text_buffer_get_slice           (GtkTextBuffer     *buffer,                                                      const GtkTextIter *start,                                                      const GtkTextIter *end,                                                      gboolean           include_hidden_chars);
void gtk_text_buffer_insert_pixbuf         (GtkTextBuffer *buffer,                                             GtkTextIter   *iter,                                             GdkPixbuf     *pixbuf);
void               gtk_text_buffer_insert_child_anchor (GtkTextBuffer      *buffer,                                                         GtkTextIter        *iter,                                                         GtkTextChildAnchor *anchor);
GtkTextChildAnchor *gtk_text_buffer_create_child_anchor (GtkTextBuffer *buffer,                                                          GtkTextIter   *iter);
void           gtk_text_buffer_add_mark    (GtkTextBuffer     *buffer,                                             GtkTextMark       *mark,                                             const GtkTextIter *where);
GtkTextMark   *gtk_text_buffer_create_mark (GtkTextBuffer     *buffer,                                             const gchar       *mark_name,                                             const GtkTextIter *where,                                             gboolean           left_gravity);
void           gtk_text_buffer_move_mark   (GtkTextBuffer     *buffer,                                             GtkTextMark       *mark,                                             const GtkTextIter *where);
void           gtk_text_buffer_delete_mark (GtkTextBuffer     *buffer,                                             GtkTextMark       *mark);
GtkTextMark*   gtk_text_buffer_get_mark    (GtkTextBuffer     *buffer,                                             const gchar       *name);
void gtk_text_buffer_move_mark_by_name   (GtkTextBuffer     *buffer,                                           const gchar       *name,                                           const GtkTextIter *where);
void gtk_text_buffer_delete_mark_by_name (GtkTextBuffer     *buffer,                                           const gchar       *name);
GtkTextMark* gtk_text_buffer_get_insert          (GtkTextBuffer *buffer);
GtkTextMark* gtk_text_buffer_get_selection_bound (GtkTextBuffer *buffer);
void gtk_text_buffer_place_cursor (GtkTextBuffer     *buffer,                                    const GtkTextIter *where);
void gtk_text_buffer_select_range (GtkTextBuffer     *buffer,                                    const GtkTextIter *ins, 				   const GtkTextIter *bound);
void gtk_text_buffer_apply_tag             (GtkTextBuffer     *buffer,                                             GtkTextTag        *tag,                                             const GtkTextIter *start,                                             const GtkTextIter *end);
void gtk_text_buffer_remove_tag            (GtkTextBuffer     *buffer,                                             GtkTextTag        *tag,                                             const GtkTextIter *start,                                             const GtkTextIter *end);
void gtk_text_buffer_apply_tag_by_name     (GtkTextBuffer     *buffer,                                             const gchar       *name,                                             const GtkTextIter *start,                                             const GtkTextIter *end);
void gtk_text_buffer_remove_tag_by_name    (GtkTextBuffer     *buffer,                                             const gchar       *name,                                             const GtkTextIter *start,                                             const GtkTextIter *end);
void gtk_text_buffer_remove_all_tags       (GtkTextBuffer     *buffer,                                             const GtkTextIter *start,                                             const GtkTextIter *end);
GtkTextTag    *gtk_text_buffer_create_tag (GtkTextBuffer *buffer,                                            const gchar   *tag_name,                                            const gchar   *first_property_name,                                            ...);
void gtk_text_buffer_get_iter_at_line_offset (GtkTextBuffer *buffer,                                               GtkTextIter   *iter,                                               gint           line_number,                                               gint           char_offset);
void gtk_text_buffer_get_iter_at_line_index  (GtkTextBuffer *buffer,                                               GtkTextIter   *iter,                                               gint           line_number,                                               gint           byte_index);
void gtk_text_buffer_get_iter_at_offset      (GtkTextBuffer *buffer,                                               GtkTextIter   *iter,                                               gint           char_offset);
void gtk_text_buffer_get_iter_at_line        (GtkTextBuffer *buffer,                                               GtkTextIter   *iter,                                               gint           line_number);
void gtk_text_buffer_get_start_iter          (GtkTextBuffer *buffer,                                               GtkTextIter   *iter);
void gtk_text_buffer_get_end_iter            (GtkTextBuffer *buffer,                                               GtkTextIter   *iter);
void gtk_text_buffer_get_bounds              (GtkTextBuffer *buffer,                                               GtkTextIter   *start,                                               GtkTextIter   *end);
void gtk_text_buffer_get_iter_at_mark        (GtkTextBuffer *buffer,                                               GtkTextIter   *iter,                                               GtkTextMark   *mark);
void gtk_text_buffer_get_iter_at_child_anchor (GtkTextBuffer      *buffer,                                                GtkTextIter        *iter,                                                GtkTextChildAnchor *anchor);
gboolean        gtk_text_buffer_get_modified            (GtkTextBuffer *buffer);
void            gtk_text_buffer_set_modified            (GtkTextBuffer *buffer,                                                          gboolean       setting);
gboolean        gtk_text_buffer_get_has_selection       (GtkTextBuffer *buffer);
void gtk_text_buffer_add_selection_clipboard    (GtkTextBuffer     *buffer, 						 GtkClipboard      *clipboard);
void gtk_text_buffer_remove_selection_clipboard (GtkTextBuffer     *buffer, 						 GtkClipboard      *clipboard);
void            gtk_text_buffer_cut_clipboard           (GtkTextBuffer *buffer, 							 GtkClipboard  *clipboard,                                                          gboolean       default_editable);
void            gtk_text_buffer_copy_clipboard          (GtkTextBuffer *buffer, 							 GtkClipboard  *clipboard);
void            gtk_text_buffer_paste_clipboard         (GtkTextBuffer *buffer, 							 GtkClipboard  *clipboard, 							 GtkTextIter   *override_location,                                                          gboolean       default_editable);
gboolean        gtk_text_buffer_get_selection_bounds    (GtkTextBuffer *buffer,                                                          GtkTextIter   *start,                                                          GtkTextIter   *end);
gboolean        gtk_text_buffer_delete_selection        (GtkTextBuffer *buffer,                                                          gboolean       interactive,                                                          gboolean       default_editable);
void            gtk_text_buffer_begin_user_action       (GtkTextBuffer *buffer);
void            gtk_text_buffer_end_user_action         (GtkTextBuffer *buffer);
GtkTargetList * gtk_text_buffer_get_copy_target_list    (GtkTextBuffer *buffer);
GtkTargetList * gtk_text_buffer_get_paste_target_list   (GtkTextBuffer *buffer);
void            _gtk_text_buffer_spew                  (GtkTextBuffer      *buffer);
GtkTextBTree*   _gtk_text_buffer_get_btree             (GtkTextBuffer      *buffer);
const PangoLogAttr* _gtk_text_buffer_get_line_log_attrs (GtkTextBuffer     *buffer,                                                          const GtkTextIter *anywhere_in_line,                                                          gint              *char_len);
void _gtk_text_buffer_notify_will_remove_tag (GtkTextBuffer *buffer,                                               GtkTextTag    *tag);
void _gtk_text_buffer_get_text_before (GtkTextBuffer   *buffer,                                        AtkTextBoundary  boundary_type,                                        GtkTextIter     *position,                                        GtkTextIter     *start,                                        GtkTextIter     *end);
void _gtk_text_buffer_get_text_at     (GtkTextBuffer   *buffer,                                        AtkTextBoundary  boundary_type,                                        GtkTextIter     *position,                                        GtkTextIter     *start,                                        GtkTextIter     *end);
void _gtk_text_buffer_get_text_after  (GtkTextBuffer   *buffer,                                        AtkTextBoundary  boundary_type,                                        GtkTextIter     *position,                                        GtkTextIter     *start,                                        GtkTextIter     *end);
GType            gtk_size_group_get_type      (void) ;
GtkSizeGroup *   gtk_size_group_new           (GtkSizeGroupMode  mode);
void             gtk_size_group_set_mode      (GtkSizeGroup     *size_group, 					       GtkSizeGroupMode  mode);
GtkSizeGroupMode gtk_size_group_get_mode      (GtkSizeGroup     *size_group);
void             gtk_size_group_set_ignore_hidden (GtkSizeGroup *size_group, 						   gboolean      ignore_hidden);
gboolean         gtk_size_group_get_ignore_hidden (GtkSizeGroup *size_group);
void             gtk_size_group_add_widget    (GtkSizeGroup     *size_group, 					       GtkWidget        *widget);
void             gtk_size_group_remove_widget (GtkSizeGroup     *size_group, 					       GtkWidget        *widget);
GSList *         gtk_size_group_get_widgets   (GtkSizeGroup     *size_group);
GType       gtk_application_window_get_type          (void) ;
GtkWidget * gtk_application_window_new               (GtkApplication      *application);
void        gtk_application_window_set_show_menubar (GtkApplicationWindow *window,                                                      gboolean              show_menubar);
gboolean    gtk_application_window_get_show_menubar (GtkApplicationWindow *window);
GType          gtk_orientable_get_type        (void) ;
void           gtk_orientable_set_orientation (GtkOrientable  *orientable,                                                GtkOrientation  orientation);
GtkOrientation gtk_orientable_get_orientation (GtkOrientable  *orientable);
void            gtk_test_init                   (int            *argcp,                                                  char         ***argvp,                                                  ...);
void            gtk_test_register_all_types     (void);
const GType*    gtk_test_list_all_types         (guint          *n_types);
GtkWidget*      gtk_test_find_widget            (GtkWidget      *widget,                                                  const gchar    *label_pattern,                                                  GType           widget_type);
GtkWidget*      gtk_test_create_widget          (GType           widget_type,                                                  const gchar    *first_property_name,                                                  ...);
GtkWidget*      gtk_test_create_simple_window   (const gchar    *window_title,                                                  const gchar    *dialog_text);
GtkWidget*      gtk_test_display_button_window  (const gchar    *window_title,                                                  const gchar    *dialog_text,                                                  ...); 
void            gtk_test_slider_set_perc        (GtkWidget      *widget,                                                   double          percentage);
double          gtk_test_slider_get_value       (GtkWidget      *widget);
gboolean        gtk_test_spin_button_click      (GtkSpinButton  *spinner,                                                  guint           button,                                                  gboolean        upwards);
gboolean        gtk_test_widget_click           (GtkWidget      *widget,                                                  guint           button,                                                  GdkModifierType modifiers);
gboolean        gtk_test_widget_send_key        (GtkWidget      *widget,                                                  guint           keyval,                                                  GdkModifierType modifiers);
void            gtk_test_text_set               (GtkWidget      *widget,                                                  const gchar    *string);
gchar*          gtk_test_text_get               (GtkWidget      *widget);
GtkWidget*      gtk_test_find_sibling           (GtkWidget      *base_widget,                                                  GType           widget_type);
GtkWidget*      gtk_test_find_label             (GtkWidget      *widget,                                                  const gchar    *label_pattern);
GType gtk_cell_editable_get_type      (void) ;
void  gtk_cell_editable_start_editing (GtkCellEditable *cell_editable, 				       GdkEvent        *event);
void  gtk_cell_editable_editing_done  (GtkCellEditable *cell_editable);
void  gtk_cell_editable_remove_widget (GtkCellEditable *cell_editable);
GType         gtk_text_layout_get_type    (void) ;
GtkTextLayout*     gtk_text_layout_new                   (void);
void               gtk_text_layout_set_buffer            (GtkTextLayout     *layout, 							  GtkTextBuffer     *buffer);
GtkTextBuffer     *gtk_text_layout_get_buffer            (GtkTextLayout     *layout);
void               gtk_text_layout_set_default_style     (GtkTextLayout     *layout, 							  GtkTextAttributes *values);
void               gtk_text_layout_set_contexts          (GtkTextLayout     *layout, 							  PangoContext      *ltr_context, 							  PangoContext      *rtl_context);
void               gtk_text_layout_set_cursor_direction  (GtkTextLayout     *layout,                                                           GtkTextDirection   direction);
void		   gtk_text_layout_set_overwrite_mode	 (GtkTextLayout     *layout, 							  gboolean           overwrite);
void               gtk_text_layout_set_keyboard_direction (GtkTextLayout     *layout, 							   GtkTextDirection keyboard_dir);
void               gtk_text_layout_default_style_changed (GtkTextLayout     *layout);
void gtk_text_layout_set_screen_width       (GtkTextLayout     *layout,                                              gint               width);
void gtk_text_layout_set_preedit_string     (GtkTextLayout     *layout,  					     const gchar       *preedit_string,  					     PangoAttrList     *preedit_attrs,  					     gint               cursor_pos);
void     gtk_text_layout_set_cursor_visible (GtkTextLayout     *layout,                                              gboolean           cursor_visible);
gboolean gtk_text_layout_get_cursor_visible (GtkTextLayout     *layout);
void    gtk_text_layout_get_size  (GtkTextLayout  *layout,                                    gint           *width,                                    gint           *height);
GSList* gtk_text_layout_get_lines (GtkTextLayout  *layout,                                                                       gint            top_y,                                   gint            bottom_y,                                   gint           *first_line_y);
void gtk_text_layout_wrap_loop_start (GtkTextLayout *layout);
void gtk_text_layout_wrap_loop_end   (GtkTextLayout *layout);
GtkTextLineDisplay* gtk_text_layout_get_line_display  (GtkTextLayout      *layout,                                                        GtkTextLine        *line,                                                        gboolean            size_only);
void                gtk_text_layout_free_line_display (GtkTextLayout      *layout,                                                        GtkTextLineDisplay *display);
void gtk_text_layout_get_line_at_y     (GtkTextLayout     *layout,                                         GtkTextIter       *target_iter,                                         gint               y,                                         gint              *line_top);
void gtk_text_layout_get_iter_at_pixel (GtkTextLayout     *layout,                                         GtkTextIter       *iter,                                         gint               x,                                         gint               y);
void gtk_text_layout_get_iter_at_position (GtkTextLayout     *layout, 					   GtkTextIter       *iter, 					   gint              *trailing, 					   gint               x, 					   gint               y);
void gtk_text_layout_invalidate        (GtkTextLayout     *layout,                                         const GtkTextIter *start,                                         const GtkTextIter *end);
void gtk_text_layout_invalidate_cursors(GtkTextLayout     *layout,                                         const GtkTextIter *start,                                         const GtkTextIter *end);
void gtk_text_layout_free_line_data    (GtkTextLayout     *layout,                                         GtkTextLine       *line,                                         GtkTextLineData   *line_data);
gboolean gtk_text_layout_is_valid        (GtkTextLayout *layout);
void     gtk_text_layout_validate_yrange (GtkTextLayout *layout,                                           GtkTextIter   *anchor_line,                                           gint           y0_,                                           gint           y1_);
void     gtk_text_layout_validate        (GtkTextLayout *layout,                                           gint           max_pixels);
GtkTextLineData* gtk_text_layout_wrap  (GtkTextLayout   *layout,                                         GtkTextLine     *line,                                         GtkTextLineData *line_data); 
void     gtk_text_layout_changed              (GtkTextLayout     *layout,                                                gint               y,                                                gint               old_height,                                                gint               new_height);
void     gtk_text_layout_cursors_changed      (GtkTextLayout     *layout,                                                gint               y,                                                gint               old_height,                                                gint               new_height);
void     gtk_text_layout_get_iter_location    (GtkTextLayout     *layout,                                                const GtkTextIter *iter,                                                GdkRectangle      *rect);
void     gtk_text_layout_get_line_yrange      (GtkTextLayout     *layout,                                                const GtkTextIter *iter,                                                gint              *y,                                                gint              *height);
void     _gtk_text_layout_get_line_xrange     (GtkTextLayout     *layout,                                                const GtkTextIter *iter,                                                gint              *x,                                                gint              *width);
void     gtk_text_layout_get_cursor_locations (GtkTextLayout     *layout,                                                GtkTextIter       *iter,                                                GdkRectangle      *strong_pos,                                                GdkRectangle      *weak_pos);
gboolean _gtk_text_layout_get_block_cursor    (GtkTextLayout     *layout, 					       GdkRectangle      *pos);
gboolean gtk_text_layout_clamp_iter_to_vrange (GtkTextLayout     *layout,                                                GtkTextIter       *iter,                                                gint               top,                                                gint               bottom);
gboolean gtk_text_layout_move_iter_to_line_end      (GtkTextLayout *layout,                                                      GtkTextIter   *iter,                                                      gint           direction);
gboolean gtk_text_layout_move_iter_to_previous_line (GtkTextLayout *layout,                                                      GtkTextIter   *iter);
gboolean gtk_text_layout_move_iter_to_next_line     (GtkTextLayout *layout,                                                      GtkTextIter   *iter);
void     gtk_text_layout_move_iter_to_x             (GtkTextLayout *layout,                                                      GtkTextIter   *iter,                                                      gint           x);
gboolean gtk_text_layout_move_iter_visually         (GtkTextLayout *layout,                                                      GtkTextIter   *iter,                                                      gint           count);
gboolean gtk_text_layout_iter_starts_line           (GtkTextLayout       *layout,                                                      const GtkTextIter   *iter);
void     gtk_text_layout_get_iter_at_line           (GtkTextLayout *layout,                                                      GtkTextIter    *iter,                                                      GtkTextLine    *line,                                                      gint            byte_offset);
 void gtk_text_child_anchor_register_child   (GtkTextChildAnchor *anchor,                                              GtkWidget          *child,                                              GtkTextLayout      *layout);
void gtk_text_child_anchor_unregister_child (GtkTextChildAnchor *anchor,                                              GtkWidget          *child);
void gtk_text_child_anchor_queue_resize     (GtkTextChildAnchor *anchor,                                              GtkTextLayout      *layout);
void gtk_text_anchored_child_set_layout     (GtkWidget          *child,                                              GtkTextLayout      *layout);
void gtk_text_layout_spew (GtkTextLayout *layout);
GType             gtk_scale_get_type           (void) ;
GtkWidget       * gtk_scale_new                (GtkOrientation   orientation,                                                 GtkAdjustment   *adjustment);
GtkWidget       * gtk_scale_new_with_range     (GtkOrientation   orientation,                                                 gdouble          min,                                                 gdouble          max,                                                 gdouble          step);
void              gtk_scale_set_digits         (GtkScale        *scale,                                                 gint             digits);
gint              gtk_scale_get_digits         (GtkScale        *scale);
void              gtk_scale_set_draw_value     (GtkScale        *scale,                                                 gboolean         draw_value);
gboolean          gtk_scale_get_draw_value     (GtkScale        *scale);
void              gtk_scale_set_has_origin     (GtkScale        *scale,                                                 gboolean         has_origin);
gboolean          gtk_scale_get_has_origin     (GtkScale        *scale);
void              gtk_scale_set_value_pos      (GtkScale        *scale,                                                 GtkPositionType  pos);
GtkPositionType   gtk_scale_get_value_pos      (GtkScale        *scale);
PangoLayout     * gtk_scale_get_layout         (GtkScale        *scale);
void              gtk_scale_get_layout_offsets (GtkScale        *scale,                                                 gint            *x,                                                 gint            *y);
void              gtk_scale_add_mark           (GtkScale        *scale,                                                 gdouble          value,                                                 GtkPositionType  position,                                                 const gchar     *markup);
void              gtk_scale_clear_marks        (GtkScale        *scale);
GType            gtk_cell_renderer_text_get_type (void) ;
GtkCellRenderer *gtk_cell_renderer_text_new      (void);
void             gtk_cell_renderer_text_set_fixed_height_from_font (GtkCellRendererText *renderer, 								    gint                 number_of_rows);
GType        gtk_tool_button_get_type       (void) ;
GtkToolItem *gtk_tool_button_new            (GtkWidget   *icon_widget, 					     const gchar *label);
GtkToolItem *gtk_tool_button_new_from_stock (const gchar *stock_id);
void                  gtk_tool_button_set_label         (GtkToolButton *button, 							 const gchar   *label);
const gchar *         gtk_tool_button_get_label         (GtkToolButton *button);
void                  gtk_tool_button_set_use_underline (GtkToolButton *button, 							 gboolean       use_underline);
gboolean              gtk_tool_button_get_use_underline (GtkToolButton *button);
void                  gtk_tool_button_set_stock_id      (GtkToolButton *button, 							 const gchar   *stock_id);
const gchar *         gtk_tool_button_get_stock_id      (GtkToolButton *button);
void                  gtk_tool_button_set_icon_name     (GtkToolButton *button, 							 const gchar   *icon_name);
const gchar *         gtk_tool_button_get_icon_name     (GtkToolButton *button);
void                  gtk_tool_button_set_icon_widget   (GtkToolButton *button, 							 GtkWidget     *icon_widget);
GtkWidget *           gtk_tool_button_get_icon_widget   (GtkToolButton *button);
void                  gtk_tool_button_set_label_widget  (GtkToolButton *button, 							 GtkWidget     *label_widget);
GtkWidget *           gtk_tool_button_get_label_widget  (GtkToolButton *button);
GtkWidget *_gtk_tool_button_get_button (GtkToolButton *button);
GType         gtk_list_store_get_type         (void) ;
GtkListStore *gtk_list_store_new              (gint          n_columns, 					       ...);
GtkListStore *gtk_list_store_newv             (gint          n_columns, 					       GType        *types);
void          gtk_list_store_set_column_types (GtkListStore *list_store, 					       gint          n_columns, 					       GType        *types);
void          gtk_list_store_set_value        (GtkListStore *list_store, 					       GtkTreeIter  *iter, 					       gint          column, 					       GValue       *value);
void          gtk_list_store_set              (GtkListStore *list_store, 					       GtkTreeIter  *iter, 					       ...);
void          gtk_list_store_set_valuesv      (GtkListStore *list_store, 					       GtkTreeIter  *iter, 					       gint         *columns, 					       GValue       *values, 					       gint          n_values);
void          gtk_list_store_set_valist       (GtkListStore *list_store, 					       GtkTreeIter  *iter, 					       va_list       var_args);
gboolean      gtk_list_store_remove           (GtkListStore *list_store, 					       GtkTreeIter  *iter);
void          gtk_list_store_insert           (GtkListStore *list_store, 					       GtkTreeIter  *iter, 					       gint          position);
void          gtk_list_store_insert_before    (GtkListStore *list_store, 					       GtkTreeIter  *iter, 					       GtkTreeIter  *sibling);
void          gtk_list_store_insert_after     (GtkListStore *list_store, 					       GtkTreeIter  *iter, 					       GtkTreeIter  *sibling);
void          gtk_list_store_insert_with_values  (GtkListStore *list_store, 						  GtkTreeIter  *iter, 						  gint          position, 						  ...);
void          gtk_list_store_insert_with_valuesv (GtkListStore *list_store, 						  GtkTreeIter  *iter, 						  gint          position, 						  gint         *columns, 						  GValue       *values, 						  gint          n_values);
void          gtk_list_store_prepend          (GtkListStore *list_store, 					       GtkTreeIter  *iter);
void          gtk_list_store_append           (GtkListStore *list_store, 					       GtkTreeIter  *iter);
void          gtk_list_store_clear            (GtkListStore *list_store);
gboolean      gtk_list_store_iter_is_valid    (GtkListStore *list_store,                                                GtkTreeIter  *iter);
void          gtk_list_store_reorder          (GtkListStore *store,                                                gint         *new_order);
void          gtk_list_store_swap             (GtkListStore *store,                                                GtkTreeIter  *a,                                                GtkTreeIter  *b);
void          gtk_list_store_move_after       (GtkListStore *store,                                                GtkTreeIter  *iter,                                                GtkTreeIter  *position);
void          gtk_list_store_move_before      (GtkListStore *store,                                                GtkTreeIter  *iter,                                                GtkTreeIter  *position);
GType      gtk_recent_chooser_menu_get_type         (void) ;
GtkWidget *gtk_recent_chooser_menu_new              (void);
GtkWidget *gtk_recent_chooser_menu_new_for_manager  (GtkRecentManager     *manager);
gboolean   gtk_recent_chooser_menu_get_show_numbers (GtkRecentChooserMenu *menu);
void       gtk_recent_chooser_menu_set_show_numbers (GtkRecentChooserMenu *menu, 						     gboolean              show_numbers);
GType          gtk_target_list_get_type  (void) ;
GtkTargetList *gtk_target_list_new       (const GtkTargetEntry *targets,                                           guint                 ntargets);
GtkTargetList *gtk_target_list_ref       (GtkTargetList  *list);
void           gtk_target_list_unref     (GtkTargetList  *list);
void           gtk_target_list_add       (GtkTargetList  *list,                                           GdkAtom         target,                                           guint           flags,                                           guint           info);
void           gtk_target_list_add_text_targets      (GtkTargetList  *list,                                                       guint           info);
void           gtk_target_list_add_rich_text_targets (GtkTargetList  *list,                                                       guint           info,                                                       gboolean        deserializable,                                                       GtkTextBuffer  *buffer);
void           gtk_target_list_add_image_targets     (GtkTargetList  *list,                                                       guint           info,                                                       gboolean        writable);
void           gtk_target_list_add_uri_targets       (GtkTargetList  *list,                                                       guint           info);
void           gtk_target_list_add_table (GtkTargetList        *list,                                           const GtkTargetEntry *targets,                                           guint                 ntargets);
void           gtk_target_list_remove    (GtkTargetList  *list,                                           GdkAtom         target);
gboolean       gtk_target_list_find      (GtkTargetList  *list,                                           GdkAtom         target,                                           guint          *info);
GtkTargetEntry * gtk_target_table_new_from_list (GtkTargetList  *list,                                                  gint           *n_targets);
void             gtk_target_table_free          (GtkTargetEntry *targets,                                                  gint            n_targets);
gboolean gtk_selection_owner_set             (GtkWidget  *widget,                                               GdkAtom     selection,                                               guint32     time_);
gboolean gtk_selection_owner_set_for_display (GdkDisplay *display,                                               GtkWidget  *widget,                                               GdkAtom     selection,                                               guint32     time_);
void     gtk_selection_add_target    (GtkWidget            *widget,                                       GdkAtom               selection,                                       GdkAtom               target,                                       guint                 info);
void     gtk_selection_add_targets   (GtkWidget            *widget,                                       GdkAtom               selection,                                       const GtkTargetEntry *targets,                                       guint                 ntargets);
void     gtk_selection_clear_targets (GtkWidget            *widget,                                       GdkAtom               selection);
gboolean gtk_selection_convert       (GtkWidget            *widget,                                       GdkAtom               selection,                                       GdkAtom               target,                                       guint32               time_);
void     gtk_selection_remove_all    (GtkWidget             *widget);
GdkAtom       gtk_selection_data_get_selection (const GtkSelectionData *selection_data);
GdkAtom       gtk_selection_data_get_target    (const GtkSelectionData *selection_data);
GdkAtom       gtk_selection_data_get_data_type (const GtkSelectionData *selection_data);
gint          gtk_selection_data_get_format    (const GtkSelectionData *selection_data);
const guchar *gtk_selection_data_get_data      (const GtkSelectionData *selection_data);
gint          gtk_selection_data_get_length    (const GtkSelectionData *selection_data);
const guchar *gtk_selection_data_get_data_with_length                                               (const GtkSelectionData *selection_data,                                                 gint                   *length);
GdkDisplay   *gtk_selection_data_get_display   (const GtkSelectionData *selection_data);
void     gtk_selection_data_set      (GtkSelectionData     *selection_data,                                       GdkAtom               type,                                       gint                  format,                                       const guchar         *data,                                       gint                  length);
gboolean gtk_selection_data_set_text (GtkSelectionData     *selection_data,                                       const gchar          *str,                                       gint                  len);
guchar * gtk_selection_data_get_text (const GtkSelectionData     *selection_data);
gboolean gtk_selection_data_set_pixbuf   (GtkSelectionData  *selection_data,                                           GdkPixbuf         *pixbuf);
GdkPixbuf *gtk_selection_data_get_pixbuf (const GtkSelectionData  *selection_data);
gboolean gtk_selection_data_set_uris (GtkSelectionData     *selection_data,                                       gchar               **uris);
gchar  **gtk_selection_data_get_uris (const GtkSelectionData     *selection_data);
gboolean gtk_selection_data_get_targets          (const GtkSelectionData  *selection_data,                                                   GdkAtom          **targets,                                                   gint              *n_atoms);
gboolean gtk_selection_data_targets_include_text (const GtkSelectionData  *selection_data);
gboolean gtk_selection_data_targets_include_rich_text (const GtkSelectionData *selection_data,                                                        GtkTextBuffer    *buffer);
gboolean gtk_selection_data_targets_include_image (const GtkSelectionData  *selection_data,                                                    gboolean           writable);
gboolean gtk_selection_data_targets_include_uri  (const GtkSelectionData  *selection_data);
gboolean gtk_targets_include_text                (GdkAtom       *targets,                                                   gint           n_targets);
gboolean gtk_targets_include_rich_text           (GdkAtom       *targets,                                                   gint           n_targets,                                                   GtkTextBuffer *buffer);
gboolean gtk_targets_include_image               (GdkAtom       *targets,                                                   gint           n_targets,                                                   gboolean       writable);
gboolean gtk_targets_include_uri                 (GdkAtom       *targets,                                                   gint           n_targets);
GType             gtk_selection_data_get_type (void) ;
GtkSelectionData *gtk_selection_data_copy     (const GtkSelectionData *data);
void              gtk_selection_data_free     (GtkSelectionData *data);
GType             gtk_target_entry_get_type    (void) ;
GtkTargetEntry   *gtk_target_entry_new        (const gchar    *target,                                                guint           flags,                                                guint           info);
GtkTargetEntry   *gtk_target_entry_copy       (GtkTargetEntry *data);
void              gtk_target_entry_free       (GtkTargetEntry *data);
GType       gtk_scrollbar_get_type (void) ;
GtkWidget * gtk_scrollbar_new      (GtkOrientation  orientation,                                     GtkAdjustment  *adjustment);
GType                 gtk_status_icon_get_type           (void) ;
GtkStatusIcon        *gtk_status_icon_new                (void);
GtkStatusIcon        *gtk_status_icon_new_from_pixbuf    (GdkPixbuf          *pixbuf);
GtkStatusIcon        *gtk_status_icon_new_from_file      (const gchar        *filename);
GtkStatusIcon        *gtk_status_icon_new_from_stock     (const gchar        *stock_id);
GtkStatusIcon        *gtk_status_icon_new_from_icon_name (const gchar        *icon_name);
GtkStatusIcon        *gtk_status_icon_new_from_gicon     (GIcon              *icon);
void                  gtk_status_icon_set_from_pixbuf    (GtkStatusIcon      *status_icon, 							  GdkPixbuf          *pixbuf);
void                  gtk_status_icon_set_from_file      (GtkStatusIcon      *status_icon, 							  const gchar        *filename);
void                  gtk_status_icon_set_from_stock     (GtkStatusIcon      *status_icon, 							  const gchar        *stock_id);
void                  gtk_status_icon_set_from_icon_name (GtkStatusIcon      *status_icon, 							  const gchar        *icon_name);
void                  gtk_status_icon_set_from_gicon     (GtkStatusIcon      *status_icon,                                                           GIcon              *icon);
GtkImageType          gtk_status_icon_get_storage_type   (GtkStatusIcon      *status_icon);
GdkPixbuf            *gtk_status_icon_get_pixbuf         (GtkStatusIcon      *status_icon);
const gchar *         gtk_status_icon_get_stock          (GtkStatusIcon      *status_icon);
const gchar *         gtk_status_icon_get_icon_name      (GtkStatusIcon      *status_icon);
GIcon                *gtk_status_icon_get_gicon          (GtkStatusIcon      *status_icon);
gint                  gtk_status_icon_get_size           (GtkStatusIcon      *status_icon);
void                  gtk_status_icon_set_screen         (GtkStatusIcon      *status_icon,                                                           GdkScreen          *screen);
GdkScreen            *gtk_status_icon_get_screen         (GtkStatusIcon      *status_icon);
void                  gtk_status_icon_set_has_tooltip    (GtkStatusIcon      *status_icon,                                                           gboolean            has_tooltip);
void                  gtk_status_icon_set_tooltip_text   (GtkStatusIcon      *status_icon,                                                           const gchar        *text);
void                  gtk_status_icon_set_tooltip_markup (GtkStatusIcon      *status_icon,                                                           const gchar        *markup);
void                  gtk_status_icon_set_title          (GtkStatusIcon      *status_icon,                                                           const gchar        *title);
const gchar *         gtk_status_icon_get_title          (GtkStatusIcon      *status_icon);
void                  gtk_status_icon_set_name           (GtkStatusIcon      *status_icon,                                                           const gchar        *name);
void                  gtk_status_icon_set_visible        (GtkStatusIcon      *status_icon, 							  gboolean            visible);
gboolean              gtk_status_icon_get_visible        (GtkStatusIcon      *status_icon);
gboolean              gtk_status_icon_is_embedded        (GtkStatusIcon      *status_icon);
void                  gtk_status_icon_position_menu      (GtkMenu            *menu, 							  gint               *x, 							  gint               *y, 							  gboolean           *push_in, 							  gpointer            user_data);
gboolean              gtk_status_icon_get_geometry       (GtkStatusIcon      *status_icon, 							  GdkScreen         **screen, 							  GdkRectangle       *area, 							  GtkOrientation     *orientation);
gboolean              gtk_status_icon_get_has_tooltip    (GtkStatusIcon      *status_icon);
gchar                *gtk_status_icon_get_tooltip_text   (GtkStatusIcon      *status_icon);
gchar                *gtk_status_icon_get_tooltip_markup (GtkStatusIcon      *status_icon);
guint32               gtk_status_icon_get_x11_window_id  (GtkStatusIcon      *status_icon);
GType         gtk_menu_tool_button_get_type       (void) ;
GtkToolItem  *gtk_menu_tool_button_new            (GtkWidget   *icon_widget,                                                    const gchar *label);
GtkToolItem  *gtk_menu_tool_button_new_from_stock (const gchar *stock_id);
void          gtk_menu_tool_button_set_menu       (GtkMenuToolButton *button,                                                    GtkWidget         *menu);
GtkWidget    *gtk_menu_tool_button_get_menu       (GtkMenuToolButton *button);
void          gtk_menu_tool_button_set_arrow_tooltip_text   (GtkMenuToolButton *button, 							     const gchar       *text);
void          gtk_menu_tool_button_set_arrow_tooltip_markup (GtkMenuToolButton *button, 							     const gchar       *markup);
GType           gtk_toolbar_get_type                (void) ;
GtkWidget *     gtk_toolbar_new                     (void);
void            gtk_toolbar_insert                  (GtkToolbar      *toolbar, 						     GtkToolItem     *item, 						     gint             pos);
gint            gtk_toolbar_get_item_index          (GtkToolbar      *toolbar, 						     GtkToolItem     *item);
gint            gtk_toolbar_get_n_items             (GtkToolbar      *toolbar);
GtkToolItem *   gtk_toolbar_get_nth_item            (GtkToolbar      *toolbar, 						     gint             n);
gboolean        gtk_toolbar_get_show_arrow          (GtkToolbar      *toolbar);
void            gtk_toolbar_set_show_arrow          (GtkToolbar      *toolbar, 						     gboolean         show_arrow);
GtkToolbarStyle gtk_toolbar_get_style               (GtkToolbar      *toolbar);
void            gtk_toolbar_set_style               (GtkToolbar      *toolbar, 						     GtkToolbarStyle  style);
void            gtk_toolbar_unset_style             (GtkToolbar      *toolbar);
GtkIconSize     gtk_toolbar_get_icon_size           (GtkToolbar      *toolbar);
void            gtk_toolbar_set_icon_size           (GtkToolbar      *toolbar,                                                      GtkIconSize      icon_size);
void            gtk_toolbar_unset_icon_size         (GtkToolbar      *toolbar);
GtkReliefStyle  gtk_toolbar_get_relief_style        (GtkToolbar      *toolbar);
gint            gtk_toolbar_get_drop_index          (GtkToolbar      *toolbar, 						     gint             x, 						     gint             y);
void            gtk_toolbar_set_drop_highlight_item (GtkToolbar      *toolbar, 						     GtkToolItem     *tool_item, 						     gint             index_);
gchar *         _gtk_toolbar_elide_underscores      (const gchar         *original);
void            _gtk_toolbar_paint_space_line       (GtkWidget           *widget, 						     GtkToolbar          *toolbar,                                                      cairo_t             *cr);
gint            _gtk_toolbar_get_default_space_size (void);
GType        gtk_font_chooser_widget_get_type                 (void) ;
GtkWidget*   gtk_font_chooser_widget_new                      (void);
GType      gtk_fixed_get_type          (void) ;
GtkWidget* gtk_fixed_new               (void);
void       gtk_fixed_put               (GtkFixed       *fixed,                                         GtkWidget      *widget,                                         gint            x,                                         gint            y);
void       gtk_fixed_move              (GtkFixed       *fixed,                                         GtkWidget      *widget,                                         gint            x,                                         gint            y);
GType          gtk_layout_get_type        (void) ;
GtkWidget*     gtk_layout_new             (GtkAdjustment *hadjustment, 				           GtkAdjustment *vadjustment);
GdkWindow*     gtk_layout_get_bin_window  (GtkLayout     *layout);
void           gtk_layout_put             (GtkLayout     *layout, 		                           GtkWidget     *child_widget, 		                           gint           x, 		                           gint           y);
void           gtk_layout_move            (GtkLayout     *layout, 		                           GtkWidget     *child_widget, 		                           gint           x, 		                           gint           y);
void           gtk_layout_set_size        (GtkLayout     *layout, 			                   guint          width, 			                   guint          height);
void           gtk_layout_get_size        (GtkLayout     *layout, 					   guint         *width, 					   guint         *height);
GType      gtk_window_get_type                 (void) ;
GtkWidget* gtk_window_new                      (GtkWindowType        type);
void       gtk_window_set_title                (GtkWindow           *window, 						const gchar         *title);
const gchar * gtk_window_get_title             (GtkWindow           *window);
void       gtk_window_set_wmclass              (GtkWindow           *window, 						const gchar         *wmclass_name, 						const gchar         *wmclass_class);
void       gtk_window_set_role                 (GtkWindow           *window,                                                 const gchar         *role);
void       gtk_window_set_startup_id           (GtkWindow           *window,                                                 const gchar         *startup_id);
const gchar * gtk_window_get_role              (GtkWindow           *window);
void       gtk_window_add_accel_group          (GtkWindow           *window, 						GtkAccelGroup	    *accel_group);
void       gtk_window_remove_accel_group       (GtkWindow           *window, 						GtkAccelGroup	    *accel_group);
void       gtk_window_set_position             (GtkWindow           *window, 						GtkWindowPosition    position);
gboolean   gtk_window_activate_focus	       (GtkWindow           *window);
void       gtk_window_set_focus                (GtkWindow           *window, 						GtkWidget           *focus);
GtkWidget *gtk_window_get_focus                (GtkWindow           *window);
void       gtk_window_set_default              (GtkWindow           *window, 						GtkWidget           *default_widget);
GtkWidget *gtk_window_get_default_widget       (GtkWindow           *window);
gboolean   gtk_window_activate_default	       (GtkWindow           *window);
void       gtk_window_set_transient_for        (GtkWindow           *window,  						GtkWindow           *parent);
GtkWindow *gtk_window_get_transient_for        (GtkWindow           *window);
void       gtk_window_set_attached_to          (GtkWindow           *window,                                                  GtkWidget           *attach_widget);
GtkWidget *gtk_window_get_attached_to          (GtkWindow           *window);
void       gtk_window_set_opacity              (GtkWindow           *window,  						gdouble              opacity);
gdouble    gtk_window_get_opacity              (GtkWindow           *window);
void       gtk_window_set_type_hint            (GtkWindow           *window,  						GdkWindowTypeHint    hint);
GdkWindowTypeHint gtk_window_get_type_hint     (GtkWindow           *window);
void       gtk_window_set_skip_taskbar_hint    (GtkWindow           *window,                                                 gboolean             setting);
gboolean   gtk_window_get_skip_taskbar_hint    (GtkWindow           *window);
void       gtk_window_set_skip_pager_hint      (GtkWindow           *window,                                                 gboolean             setting);
gboolean   gtk_window_get_skip_pager_hint      (GtkWindow           *window);
void       gtk_window_set_urgency_hint         (GtkWindow           *window,                                                 gboolean             setting);
gboolean   gtk_window_get_urgency_hint         (GtkWindow           *window);
void       gtk_window_set_accept_focus         (GtkWindow           *window,                                                 gboolean             setting);
gboolean   gtk_window_get_accept_focus         (GtkWindow           *window);
void       gtk_window_set_focus_on_map         (GtkWindow           *window,                                                 gboolean             setting);
gboolean   gtk_window_get_focus_on_map         (GtkWindow           *window);
void       gtk_window_set_destroy_with_parent  (GtkWindow           *window,                                                 gboolean             setting);
gboolean   gtk_window_get_destroy_with_parent  (GtkWindow           *window);
void       gtk_window_set_hide_titlebar_when_maximized (GtkWindow   *window,                                                         gboolean     setting);
gboolean   gtk_window_get_hide_titlebar_when_maximized (GtkWindow   *window);
void       gtk_window_set_mnemonics_visible    (GtkWindow           *window,                                                 gboolean             setting);
gboolean   gtk_window_get_mnemonics_visible    (GtkWindow           *window);
void       gtk_window_set_focus_visible        (GtkWindow           *window,                                                 gboolean             setting);
gboolean   gtk_window_get_focus_visible        (GtkWindow           *window);
void       gtk_window_set_resizable            (GtkWindow           *window,                                                 gboolean             resizable);
gboolean   gtk_window_get_resizable            (GtkWindow           *window);
void       gtk_window_set_gravity              (GtkWindow           *window,                                                 GdkGravity           gravity);
GdkGravity gtk_window_get_gravity              (GtkWindow           *window);
void       gtk_window_set_geometry_hints       (GtkWindow           *window, 						GtkWidget           *geometry_widget, 						GdkGeometry         *geometry, 						GdkWindowHints       geom_mask);
void	   gtk_window_set_screen	       (GtkWindow	    *window, 						GdkScreen	    *screen);
GdkScreen* gtk_window_get_screen	       (GtkWindow	    *window);
gboolean   gtk_window_is_active                (GtkWindow           *window);
gboolean   gtk_window_has_toplevel_focus       (GtkWindow           *window);
void       gtk_window_set_decorated            (GtkWindow *window,                                                 gboolean   setting);
gboolean   gtk_window_get_decorated            (GtkWindow *window);
void       gtk_window_set_deletable            (GtkWindow *window,                                                 gboolean   setting);
gboolean   gtk_window_get_deletable            (GtkWindow *window);
void       gtk_window_set_icon_list                (GtkWindow  *window,                                                     GList      *list);
GList*     gtk_window_get_icon_list                (GtkWindow  *window);
void       gtk_window_set_icon                     (GtkWindow  *window,                                                     GdkPixbuf  *icon);
void       gtk_window_set_icon_name                (GtkWindow   *window, 						    const gchar *name);
gboolean   gtk_window_set_icon_from_file           (GtkWindow   *window, 						    const gchar *filename, 						    GError     **err);
GdkPixbuf* gtk_window_get_icon                     (GtkWindow  *window);
const gchar * gtk_window_get_icon_name             (GtkWindow  *window);
void       gtk_window_set_default_icon_list        (GList      *list);
GList*     gtk_window_get_default_icon_list        (void);
void       gtk_window_set_default_icon             (GdkPixbuf  *icon);
void       gtk_window_set_default_icon_name        (const gchar *name);
const gchar * gtk_window_get_default_icon_name     (void);
gboolean   gtk_window_set_default_icon_from_file   (const gchar *filename, 						    GError     **err);
void       gtk_window_set_auto_startup_notification (gboolean setting);
void       gtk_window_set_modal      (GtkWindow *window, 				      gboolean   modal);
gboolean   gtk_window_get_modal      (GtkWindow *window);
GList*     gtk_window_list_toplevels (void);
void       gtk_window_set_has_user_ref_count (GtkWindow *window,                                               gboolean   setting);
void     gtk_window_add_mnemonic          (GtkWindow       *window, 					   guint            keyval, 					   GtkWidget       *target);
void     gtk_window_remove_mnemonic       (GtkWindow       *window, 					   guint            keyval, 					   GtkWidget       *target);
gboolean gtk_window_mnemonic_activate     (GtkWindow       *window, 					   guint            keyval, 					   GdkModifierType  modifier);
void     gtk_window_set_mnemonic_modifier (GtkWindow       *window, 					   GdkModifierType  modifier);
GdkModifierType gtk_window_get_mnemonic_modifier (GtkWindow *window);
gboolean gtk_window_activate_key          (GtkWindow        *window, 					   GdkEventKey      *event);
gboolean gtk_window_propagate_key_event   (GtkWindow        *window, 					   GdkEventKey      *event);
void     gtk_window_present            (GtkWindow *window);
void     gtk_window_present_with_time  (GtkWindow *window, 				        guint32    timestamp);
void     gtk_window_iconify       (GtkWindow *window);
void     gtk_window_deiconify     (GtkWindow *window);
void     gtk_window_stick         (GtkWindow *window);
void     gtk_window_unstick       (GtkWindow *window);
void     gtk_window_maximize      (GtkWindow *window);
void     gtk_window_unmaximize    (GtkWindow *window);
void     gtk_window_fullscreen    (GtkWindow *window);
void     gtk_window_unfullscreen  (GtkWindow *window);
void     gtk_window_set_keep_above    (GtkWindow *window, gboolean setting);
void     gtk_window_set_keep_below    (GtkWindow *window, gboolean setting);
void gtk_window_begin_resize_drag (GtkWindow     *window,                                    GdkWindowEdge  edge,                                    gint           button,                                    gint           root_x,                                    gint           root_y,                                    guint32        timestamp);
void gtk_window_begin_move_drag   (GtkWindow     *window,                                    gint           button,                                    gint           root_x,                                    gint           root_y,                                    guint32        timestamp);
void     gtk_window_set_default_size (GtkWindow   *window,                                       gint         width,                                       gint         height);
void     gtk_window_get_default_size (GtkWindow   *window,                                       gint        *width,                                       gint        *height);
void     gtk_window_resize           (GtkWindow   *window,                                       gint         width,                                       gint         height);
void     gtk_window_get_size         (GtkWindow   *window,                                       gint        *width,                                       gint        *height);
void     gtk_window_move             (GtkWindow   *window,                                       gint         x,                                       gint         y);
void     gtk_window_get_position     (GtkWindow   *window,                                       gint        *root_x,                                       gint        *root_y);
gboolean gtk_window_parse_geometry   (GtkWindow   *window,                                       const gchar *geometry);
void gtk_window_set_default_geometry (GtkWindow *window,                                       gint       width,                                       gint       height);
void gtk_window_resize_to_geometry   (GtkWindow *window,                                       gint       width,                                       gint       height);
GtkWindowGroup *gtk_window_get_group (GtkWindow   *window);
gboolean gtk_window_has_group        (GtkWindow   *window);
void     gtk_window_reshow_with_initial_size (GtkWindow *window);
GtkWindowType gtk_window_get_window_type     (GtkWindow     *window);
GType            gtk_window_group_get_type      (void) ;
GtkWindowGroup * gtk_window_group_new           (void);
void             gtk_window_group_add_window    (GtkWindowGroup     *window_group, 						 GtkWindow          *window);
void             gtk_window_group_remove_window (GtkWindowGroup     *window_group, 					         GtkWindow          *window);
GList *          gtk_window_group_list_windows  (GtkWindowGroup     *window_group);
GtkWidget *      gtk_window_group_get_current_grab (GtkWindowGroup *window_group);
GtkWidget *      gtk_window_group_get_current_device_grab (GtkWindowGroup *window_group,                                                            GdkDevice      *device);
GtkApplication *gtk_window_get_application      (GtkWindow          *window);
void            gtk_window_set_application      (GtkWindow          *window,                                                  GtkApplication     *application);
void     gtk_window_set_has_resize_grip    (GtkWindow    *window,                                             gboolean      value);
gboolean gtk_window_get_has_resize_grip    (GtkWindow    *window);
gboolean gtk_window_resize_grip_is_visible (GtkWindow    *window);
gboolean gtk_window_get_resize_grip_area   (GtkWindow    *window,                                             GdkRectangle *rect);
GType              gtk_symbolic_color_get_type    (void) ;
GtkSymbolicColor * gtk_symbolic_color_new_literal (const GdkRGBA      *color);
GtkSymbolicColor * gtk_symbolic_color_new_name    (const gchar        *name);
GtkSymbolicColor * gtk_symbolic_color_new_shade   (GtkSymbolicColor   *color,                                                    gdouble             factor);
GtkSymbolicColor * gtk_symbolic_color_new_alpha   (GtkSymbolicColor   *color,                                                    gdouble             factor);
GtkSymbolicColor * gtk_symbolic_color_new_mix     (GtkSymbolicColor   *color1,                                                    GtkSymbolicColor   *color2,                                                    gdouble             factor);
GtkSymbolicColor * gtk_symbolic_color_new_win32   (const gchar        *theme_class,                                                    gint                id);
GtkSymbolicColor * gtk_symbolic_color_ref         (GtkSymbolicColor   *color);
void               gtk_symbolic_color_unref       (GtkSymbolicColor   *color);
char *             gtk_symbolic_color_to_string   (GtkSymbolicColor   *color);
gboolean           gtk_symbolic_color_resolve     (GtkSymbolicColor   *color,                                                    GtkStyleProperties *props,                                                    GdkRGBA            *resolved_color);
GType		 gtk_cell_renderer_progress_get_type (void) ;
GtkCellRenderer* gtk_cell_renderer_progress_new      (void);
GType       gtk_app_chooser_button_get_type           (void) ;
GtkWidget * gtk_app_chooser_button_new                (const gchar         *content_type);
void        gtk_app_chooser_button_append_separator   (GtkAppChooserButton *self);
void        gtk_app_chooser_button_append_custom_item (GtkAppChooserButton *self,                                                        const gchar         *name,                                                        const gchar         *label,                                                        GIcon               *icon);
void     gtk_app_chooser_button_set_active_custom_item (GtkAppChooserButton *self,                                                         const gchar         *name);
void     gtk_app_chooser_button_set_show_dialog_item  (GtkAppChooserButton *self,                                                        gboolean             setting);
gboolean gtk_app_chooser_button_get_show_dialog_item  (GtkAppChooserButton *self);
void     gtk_app_chooser_button_set_heading           (GtkAppChooserButton *self,                                                        const gchar         *heading);
const gchar *         gtk_app_chooser_button_get_heading           (GtkAppChooserButton *self);
void     gtk_app_chooser_button_set_show_default_item (GtkAppChooserButton *self,                                                        gboolean             setting);
gboolean gtk_app_chooser_button_get_show_default_item (GtkAppChooserButton *self);
GType   gtk_print_operation_preview_get_type       (void) ;
void     gtk_print_operation_preview_render_page (GtkPrintOperationPreview *preview, 						  gint                      page_nr);
void     gtk_print_operation_preview_end_preview (GtkPrintOperationPreview *preview);
gboolean gtk_print_operation_preview_is_selected (GtkPrintOperationPreview *preview, 						  gint                      page_nr);
GType         gtk_tree_model_sort_get_type                   (void) ;
GtkTreeModel *gtk_tree_model_sort_new_with_model             (GtkTreeModel     *child_model);
GtkTreeModel *gtk_tree_model_sort_get_model                  (GtkTreeModelSort *tree_model);
GtkTreePath  *gtk_tree_model_sort_convert_child_path_to_path (GtkTreeModelSort *tree_model_sort, 							      GtkTreePath      *child_path);
gboolean      gtk_tree_model_sort_convert_child_iter_to_iter (GtkTreeModelSort *tree_model_sort, 							      GtkTreeIter      *sort_iter, 							      GtkTreeIter      *child_iter);
GtkTreePath  *gtk_tree_model_sort_convert_path_to_child_path (GtkTreeModelSort *tree_model_sort, 							      GtkTreePath      *sorted_path);
void          gtk_tree_model_sort_convert_iter_to_child_iter (GtkTreeModelSort *tree_model_sort, 							      GtkTreeIter      *child_iter, 							      GtkTreeIter      *sorted_iter);
void          gtk_tree_model_sort_reset_default_sort_func    (GtkTreeModelSort *tree_model_sort);
void          gtk_tree_model_sort_clear_cache                (GtkTreeModelSort *tree_model_sort);
gboolean      gtk_tree_model_sort_iter_is_valid              (GtkTreeModelSort *tree_model_sort,                                                               GtkTreeIter      *iter);
GType              gtk_cell_renderer_get_type       (void) ;
GtkSizeRequestMode gtk_cell_renderer_get_request_mode               (GtkCellRenderer    *cell);
void               gtk_cell_renderer_get_preferred_width            (GtkCellRenderer    *cell,                                                                      GtkWidget          *widget,                                                                      gint               *minimum_size,                                                                      gint               *natural_size);
void               gtk_cell_renderer_get_preferred_height_for_width (GtkCellRenderer    *cell,                                                                      GtkWidget          *widget,                                                                      gint                width,                                                                      gint               *minimum_height,                                                                      gint               *natural_height);
void               gtk_cell_renderer_get_preferred_height           (GtkCellRenderer    *cell,                                                                      GtkWidget          *widget,                                                                      gint               *minimum_size,                                                                      gint               *natural_size);
void               gtk_cell_renderer_get_preferred_width_for_height (GtkCellRenderer    *cell,                                                                      GtkWidget          *widget,                                                                      gint                height,                                                                      gint               *minimum_width,                                                                      gint               *natural_width);
void               gtk_cell_renderer_get_preferred_size             (GtkCellRenderer    *cell,                                                                      GtkWidget          *widget,                                                                      GtkRequisition     *minimum_size,                                                                      GtkRequisition     *natural_size);
void               gtk_cell_renderer_get_aligned_area               (GtkCellRenderer    *cell, 								     GtkWidget          *widget, 								     GtkCellRendererState flags, 								     const GdkRectangle *cell_area, 								     GdkRectangle       *aligned_area);
void             gtk_cell_renderer_get_size       (GtkCellRenderer      *cell,                                                    GtkWidget            *widget,                                                    const GdkRectangle   *cell_area,                                                    gint                 *x_offset,                                                    gint                 *y_offset,                                                    gint                 *width,                                                    gint                 *height);
void             gtk_cell_renderer_render         (GtkCellRenderer      *cell,                                                    cairo_t              *cr, 						   GtkWidget            *widget, 						   const GdkRectangle   *background_area, 						   const GdkRectangle   *cell_area, 						   GtkCellRendererState  flags);
gboolean         gtk_cell_renderer_activate       (GtkCellRenderer      *cell, 						   GdkEvent             *event, 						   GtkWidget            *widget, 						   const gchar          *path, 						   const GdkRectangle   *background_area, 						   const GdkRectangle   *cell_area, 						   GtkCellRendererState  flags);
GtkCellEditable *gtk_cell_renderer_start_editing  (GtkCellRenderer      *cell, 						   GdkEvent             *event, 						   GtkWidget            *widget, 						   const gchar          *path, 						   const GdkRectangle   *background_area, 						   const GdkRectangle   *cell_area, 						   GtkCellRendererState  flags);
void             gtk_cell_renderer_set_fixed_size (GtkCellRenderer      *cell, 						   gint                  width, 						   gint                  height);
void             gtk_cell_renderer_get_fixed_size (GtkCellRenderer      *cell, 						   gint                 *width, 						   gint                 *height);
void             gtk_cell_renderer_set_alignment  (GtkCellRenderer      *cell,                                                    gfloat                xalign,                                                    gfloat                yalign);
void             gtk_cell_renderer_get_alignment  (GtkCellRenderer      *cell,                                                    gfloat               *xalign,                                                    gfloat               *yalign);
void             gtk_cell_renderer_set_padding    (GtkCellRenderer      *cell,                                                    gint                  xpad,                                                    gint                  ypad);
void             gtk_cell_renderer_get_padding    (GtkCellRenderer      *cell,                                                    gint                 *xpad,                                                    gint                 *ypad);
void             gtk_cell_renderer_set_visible    (GtkCellRenderer      *cell,                                                    gboolean              visible);
gboolean         gtk_cell_renderer_get_visible    (GtkCellRenderer      *cell);
void             gtk_cell_renderer_set_sensitive  (GtkCellRenderer      *cell,                                                    gboolean              sensitive);
gboolean         gtk_cell_renderer_get_sensitive  (GtkCellRenderer      *cell);
gboolean         gtk_cell_renderer_is_activatable (GtkCellRenderer      *cell);
void             gtk_cell_renderer_stop_editing   (GtkCellRenderer      *cell,                                                    gboolean              canceled);
void            _gtk_cell_renderer_calc_offset    (GtkCellRenderer      *cell,                                                    const GdkRectangle   *cell_area,                                                    GtkTextDirection      direction,                                                    gint                  width,                                                    gint                  height,                                                    gint                 *x_offset,                                                    gint                 *y_offset);
GtkStateFlags   gtk_cell_renderer_get_state       (GtkCellRenderer      *cell,                                                    GtkWidget            *widget,                                                    GtkCellRendererState  cell_state);
void            _gtk_cell_renderer_class_set_accessible_type                                                   (GtkCellRendererClass *renderer_class,                                                    GType                 type);
GType           _gtk_cell_renderer_get_accessible_type                                                  (GtkCellRenderer *     renderer);
GType      gtk_radio_menu_item_get_type	         (void) ;
GtkWidget* gtk_radio_menu_item_new                           (GSList           *group);
GtkWidget* gtk_radio_menu_item_new_with_label                (GSList           *group, 							      const gchar      *label);
GtkWidget* gtk_radio_menu_item_new_with_mnemonic             (GSList           *group, 							      const gchar      *label);
GtkWidget* gtk_radio_menu_item_new_from_widget               (GtkRadioMenuItem *group);
GtkWidget *gtk_radio_menu_item_new_with_mnemonic_from_widget (GtkRadioMenuItem *group, 							      const gchar      *label);
GtkWidget *gtk_radio_menu_item_new_with_label_from_widget    (GtkRadioMenuItem *group, 							      const gchar      *label);
GSList*    gtk_radio_menu_item_get_group                     (GtkRadioMenuItem *radio_menu_item);
void       gtk_radio_menu_item_set_group                     (GtkRadioMenuItem *radio_menu_item, 							      GSList           *group);
gint                gtk_distribute_natural_allocation               (gint              extra_space,                                                                      guint             n_requested_sizes,                                                                      GtkRequestedSize *sizes);
GType         gtk_gradient_get_type       (void) ;
GtkGradient * gtk_gradient_new_linear     (gdouble              x0,                                            gdouble              y0,                                            gdouble              x1,                                            gdouble              y1);
GtkGradient * gtk_gradient_new_radial     (gdouble              x0,                                            gdouble              y0,                                            gdouble              radius0,                                            gdouble              x1,                                            gdouble              y1,                                            gdouble              radius1);
void          gtk_gradient_add_color_stop (GtkGradient         *gradient,                                            gdouble              offset,                                            GtkSymbolicColor    *color);
GtkGradient * gtk_gradient_ref            (GtkGradient         *gradient);
void          gtk_gradient_unref          (GtkGradient         *gradient);
gboolean      gtk_gradient_resolve        (GtkGradient         *gradient,                                            GtkStyleProperties  *props,                                            cairo_pattern_t    **resolved_gradient);
cairo_pattern_t *              gtk_gradient_resolve_for_context                                          (GtkGradient         *gradient,                                            GtkStyleContext     *context);
char *        gtk_gradient_to_string      (GtkGradient         *gradient);
GType            gtk_mount_operation_get_type   (void);
GMountOperation *gtk_mount_operation_new        (GtkWindow         *parent);
gboolean         gtk_mount_operation_is_showing (GtkMountOperation *op);
void             gtk_mount_operation_set_parent (GtkMountOperation *op,                                                  GtkWindow         *parent);
GtkWindow *      gtk_mount_operation_get_parent (GtkMountOperation *op);
void             gtk_mount_operation_set_screen (GtkMountOperation *op,                                                  GdkScreen         *screen);
GdkScreen       *gtk_mount_operation_get_screen (GtkMountOperation *op);
GType        gtk_action_get_type               (void) ;
GtkAction   *gtk_action_new                    (const gchar *name, 						const gchar *label, 						const gchar *tooltip, 						const gchar *stock_id);
const gchar* gtk_action_get_name               (GtkAction     *action);
gboolean     gtk_action_is_sensitive           (GtkAction     *action);
gboolean     gtk_action_get_sensitive          (GtkAction     *action);
void         gtk_action_set_sensitive          (GtkAction     *action, 						gboolean       sensitive);
gboolean     gtk_action_is_visible             (GtkAction     *action);
gboolean     gtk_action_get_visible            (GtkAction     *action);
void         gtk_action_set_visible            (GtkAction     *action, 						gboolean       visible);
void         gtk_action_activate               (GtkAction     *action);
GtkWidget *  gtk_action_create_icon            (GtkAction     *action, 						GtkIconSize    icon_size);
GtkWidget *  gtk_action_create_menu_item       (GtkAction     *action);
GtkWidget *  gtk_action_create_tool_item       (GtkAction     *action);
GtkWidget *  gtk_action_create_menu            (GtkAction     *action);
GSList *     gtk_action_get_proxies            (GtkAction     *action);
void         gtk_action_connect_accelerator    (GtkAction     *action);
void         gtk_action_disconnect_accelerator (GtkAction     *action);
const gchar *gtk_action_get_accel_path         (GtkAction     *action);
GClosure    *gtk_action_get_accel_closure      (GtkAction     *action);
void         gtk_action_block_activate         (GtkAction     *action);
void         gtk_action_unblock_activate       (GtkAction     *action);
void         _gtk_action_add_to_proxy_list     (GtkAction     *action, 						GtkWidget     *proxy);
void         _gtk_action_remove_from_proxy_list(GtkAction     *action, 						GtkWidget     *proxy);
void         _gtk_action_emit_activate         (GtkAction     *action);
void         gtk_action_set_accel_path         (GtkAction     *action, 						const gchar   *accel_path);
void         gtk_action_set_accel_group        (GtkAction     *action, 						GtkAccelGroup *accel_group);
void         _gtk_action_sync_menu_visible     (GtkAction     *action, 						GtkWidget     *proxy, 						gboolean       empty);
void                  gtk_action_set_label              (GtkAction   *action,                                                          const gchar *label);
const gchar *         gtk_action_get_label              (GtkAction   *action);
void                  gtk_action_set_short_label        (GtkAction   *action,                                                          const gchar *short_label);
const gchar *         gtk_action_get_short_label        (GtkAction   *action);
void                  gtk_action_set_tooltip            (GtkAction   *action,                                                          const gchar *tooltip);
const gchar *         gtk_action_get_tooltip            (GtkAction   *action);
void                  gtk_action_set_stock_id           (GtkAction   *action,                                                          const gchar *stock_id);
const gchar *         gtk_action_get_stock_id           (GtkAction   *action);
void                  gtk_action_set_gicon              (GtkAction   *action,                                                          GIcon       *icon);
GIcon                *gtk_action_get_gicon              (GtkAction   *action);
void                  gtk_action_set_icon_name          (GtkAction   *action,                                                          const gchar *icon_name);
const gchar *         gtk_action_get_icon_name          (GtkAction   *action);
void                  gtk_action_set_visible_horizontal (GtkAction   *action,                                                          gboolean     visible_horizontal);
gboolean              gtk_action_get_visible_horizontal (GtkAction   *action);
void                  gtk_action_set_visible_vertical   (GtkAction   *action,                                                          gboolean     visible_vertical);
gboolean              gtk_action_get_visible_vertical   (GtkAction   *action);
void                  gtk_action_set_is_important       (GtkAction   *action,                                                          gboolean     is_important);
gboolean              gtk_action_get_is_important       (GtkAction   *action);
void                  gtk_action_set_always_show_image  (GtkAction   *action,                                                          gboolean     always_show);
gboolean              gtk_action_get_always_show_image  (GtkAction   *action);
GType            gtk_font_chooser_get_type                 (void) ;
PangoFontFamily *gtk_font_chooser_get_font_family          (GtkFontChooser   *fontchooser);
PangoFontFace   *gtk_font_chooser_get_font_face            (GtkFontChooser   *fontchooser);
gint             gtk_font_chooser_get_font_size            (GtkFontChooser   *fontchooser);
PangoFontDescription *                 gtk_font_chooser_get_font_desc            (GtkFontChooser             *fontchooser);
void             gtk_font_chooser_set_font_desc            (GtkFontChooser             *fontchooser,                                                             const PangoFontDescription *font_desc);
gchar*           gtk_font_chooser_get_font                 (GtkFontChooser   *fontchooser);
void             gtk_font_chooser_set_font                 (GtkFontChooser   *fontchooser,                                                             const gchar      *fontname);
gchar*           gtk_font_chooser_get_preview_text         (GtkFontChooser   *fontchooser);
void             gtk_font_chooser_set_preview_text         (GtkFontChooser   *fontchooser,                                                             const gchar      *text);
gboolean         gtk_font_chooser_get_show_preview_entry   (GtkFontChooser   *fontchooser);
void             gtk_font_chooser_set_show_preview_entry   (GtkFontChooser   *fontchooser,                                                             gboolean          show_preview_entry);
void             gtk_font_chooser_set_filter_func          (GtkFontChooser   *fontchooser,                                                             GtkFontFilterFunc filter,                                                             gpointer          user_data,                                                             GDestroyNotify    destroy);
GType   gtk_recent_chooser_get_type    (void) ;
void              gtk_recent_chooser_set_show_private    (GtkRecentChooser  *chooser, 							  gboolean           show_private);
gboolean          gtk_recent_chooser_get_show_private    (GtkRecentChooser  *chooser);
void              gtk_recent_chooser_set_show_not_found  (GtkRecentChooser  *chooser, 							  gboolean           show_not_found);
gboolean          gtk_recent_chooser_get_show_not_found  (GtkRecentChooser  *chooser);
void              gtk_recent_chooser_set_select_multiple (GtkRecentChooser  *chooser, 							  gboolean           select_multiple);
gboolean          gtk_recent_chooser_get_select_multiple (GtkRecentChooser  *chooser);
void              gtk_recent_chooser_set_limit           (GtkRecentChooser  *chooser, 							  gint               limit);
gint              gtk_recent_chooser_get_limit           (GtkRecentChooser  *chooser);
void              gtk_recent_chooser_set_local_only      (GtkRecentChooser  *chooser, 							  gboolean           local_only);
gboolean          gtk_recent_chooser_get_local_only      (GtkRecentChooser  *chooser);
void              gtk_recent_chooser_set_show_tips       (GtkRecentChooser  *chooser, 							  gboolean           show_tips);
gboolean          gtk_recent_chooser_get_show_tips       (GtkRecentChooser  *chooser);
void              gtk_recent_chooser_set_show_icons      (GtkRecentChooser  *chooser, 							  gboolean           show_icons);
gboolean          gtk_recent_chooser_get_show_icons      (GtkRecentChooser  *chooser);
void              gtk_recent_chooser_set_sort_type       (GtkRecentChooser  *chooser, 							  GtkRecentSortType  sort_type);
GtkRecentSortType gtk_recent_chooser_get_sort_type       (GtkRecentChooser  *chooser);
void              gtk_recent_chooser_set_sort_func       (GtkRecentChooser  *chooser, 							  GtkRecentSortFunc  sort_func, 							  gpointer           sort_data, 							  GDestroyNotify     data_destroy);
gboolean       gtk_recent_chooser_set_current_uri  (GtkRecentChooser  *chooser, 						    const gchar       *uri, 						    GError           **error);
gchar *        gtk_recent_chooser_get_current_uri  (GtkRecentChooser  *chooser);
GtkRecentInfo *gtk_recent_chooser_get_current_item (GtkRecentChooser  *chooser);
gboolean       gtk_recent_chooser_select_uri       (GtkRecentChooser  *chooser, 						    const gchar       *uri, 						    GError           **error);
void           gtk_recent_chooser_unselect_uri     (GtkRecentChooser  *chooser, 					            const gchar       *uri);
void           gtk_recent_chooser_select_all       (GtkRecentChooser  *chooser);
void           gtk_recent_chooser_unselect_all     (GtkRecentChooser  *chooser);
GList *        gtk_recent_chooser_get_items        (GtkRecentChooser  *chooser);
gchar **       gtk_recent_chooser_get_uris         (GtkRecentChooser  *chooser, 						    gsize             *length);
void 		 gtk_recent_chooser_add_filter    (GtkRecentChooser *chooser, 			 			   GtkRecentFilter  *filter);
void 		 gtk_recent_chooser_remove_filter (GtkRecentChooser *chooser, 						   GtkRecentFilter  *filter);
GSList * 	 gtk_recent_chooser_list_filters  (GtkRecentChooser *chooser);
void 		 gtk_recent_chooser_set_filter    (GtkRecentChooser *chooser, 						   GtkRecentFilter  *filter);
GtkRecentFilter *gtk_recent_chooser_get_filter    (GtkRecentChooser *chooser);
GType         gtk_im_context_simple_get_type  (void) ;
GtkIMContext *gtk_im_context_simple_new       (void);
void          gtk_im_context_simple_add_table (GtkIMContextSimple *context_simple, 					       guint16            *data, 					       gint                max_seq_len, 					       gint                n_seqs);
GType      gtk_socket_get_type        (void) ;
GtkWidget *gtk_socket_new             (void);
void       gtk_socket_add_id          (GtkSocket *socket_,                                        Window     window);
Window     gtk_socket_get_id          (GtkSocket *socket_);
GdkWindow *gtk_socket_get_plug_window (GtkSocket *socket_);
GType            gtk_offscreen_window_get_type    (void) ;
GtkWidget       *gtk_offscreen_window_new         (void);
cairo_surface_t *gtk_offscreen_window_get_surface (GtkOffscreenWindow *offscreen);
GdkPixbuf       *gtk_offscreen_window_get_pixbuf  (GtkOffscreenWindow *offscreen);
GType                 gtk_text_mark_get_type         (void) ;
GtkTextMark          *gtk_text_mark_new              (const gchar *name,                                                       gboolean     left_gravity);
void                  gtk_text_mark_set_visible      (GtkTextMark *mark,                                                       gboolean     setting);
gboolean              gtk_text_mark_get_visible      (GtkTextMark *mark);
const gchar *         gtk_text_mark_get_name         (GtkTextMark *mark);
gboolean              gtk_text_mark_get_deleted      (GtkTextMark *mark);
GtkTextBuffer*        gtk_text_mark_get_buffer       (GtkTextMark *mark);
gboolean              gtk_text_mark_get_left_gravity (GtkTextMark *mark);
GType       gtk_box_get_type            (void) ;
GtkWidget*  gtk_box_new                 (GtkOrientation  orientation,                                          gint            spacing);
void        gtk_box_pack_start          (GtkBox         *box,                                          GtkWidget      *child,                                          gboolean        expand,                                          gboolean        fill,                                          guint           padding);
void        gtk_box_pack_end            (GtkBox         *box,                                          GtkWidget      *child,                                          gboolean        expand,                                          gboolean        fill,                                          guint           padding);
void        gtk_box_set_homogeneous     (GtkBox         *box,                                          gboolean        homogeneous);
gboolean    gtk_box_get_homogeneous     (GtkBox         *box);
void        gtk_box_set_spacing         (GtkBox         *box,                                          gint            spacing);
gint        gtk_box_get_spacing         (GtkBox         *box);
void        gtk_box_reorder_child       (GtkBox         *box,                                          GtkWidget      *child,                                          gint            position);
void        gtk_box_query_child_packing (GtkBox         *box,                                          GtkWidget      *child,                                          gboolean       *expand,                                          gboolean       *fill,                                          guint          *padding,                                          GtkPackType    *pack_type);
void        gtk_box_set_child_packing   (GtkBox         *box,                                          GtkWidget      *child,                                          gboolean        expand,                                          gboolean        fill,                                          guint           padding,                                          GtkPackType     pack_type);
GType           gtk_settings_get_type                (void) ;
GtkSettings*    gtk_settings_get_default             (void);
GtkSettings*    gtk_settings_get_for_screen          (GdkScreen *screen);
void            gtk_settings_install_property        (GParamSpec         *pspec);
void            gtk_settings_install_property_parser (GParamSpec         *pspec,                                                       GtkRcPropertyParser parser);
gboolean gtk_rc_property_parse_color       (const GParamSpec *pspec,                                             const GString    *gstring,                                             GValue           *property_value);
gboolean gtk_rc_property_parse_enum        (const GParamSpec *pspec,                                             const GString    *gstring,                                             GValue           *property_value);
gboolean gtk_rc_property_parse_flags       (const GParamSpec *pspec,                                             const GString    *gstring,                                             GValue           *property_value);
gboolean gtk_rc_property_parse_requisition (const GParamSpec *pspec,                                             const GString    *gstring,                                             GValue           *property_value);
gboolean gtk_rc_property_parse_border      (const GParamSpec *pspec,                                             const GString    *gstring,                                             GValue           *property_value);
void     gtk_settings_set_property_value   (GtkSettings            *settings,                                             const gchar            *name,                                             const GtkSettingsValue *svalue);
void     gtk_settings_set_string_property  (GtkSettings            *settings,                                             const gchar            *name,                                             const gchar            *v_string,                                             const gchar            *origin);
void     gtk_settings_set_long_property    (GtkSettings            *settings,                                             const gchar            *name,                                             glong                   v_long,                                             const gchar            *origin);
void     gtk_settings_set_double_property  (GtkSettings            *settings,                                             const gchar            *name,                                             gdouble                 v_double,                                             const gchar            *origin);
GType      gtk_menu_item_get_type             (void) ;
GtkWidget* gtk_menu_item_new                  (void);
GtkWidget* gtk_menu_item_new_with_label       (const gchar         *label);
GtkWidget* gtk_menu_item_new_with_mnemonic    (const gchar         *label);
void       gtk_menu_item_set_submenu          (GtkMenuItem         *menu_item,                                                GtkWidget           *submenu);
GtkWidget* gtk_menu_item_get_submenu          (GtkMenuItem         *menu_item);
void       gtk_menu_item_select               (GtkMenuItem         *menu_item);
void       gtk_menu_item_deselect             (GtkMenuItem         *menu_item);
void       gtk_menu_item_activate             (GtkMenuItem         *menu_item);
void       gtk_menu_item_toggle_size_request  (GtkMenuItem         *menu_item,                                                gint                *requisition);
void       gtk_menu_item_toggle_size_allocate (GtkMenuItem         *menu_item,                                                gint                 allocation);
void       gtk_menu_item_set_right_justified  (GtkMenuItem         *menu_item,                                                gboolean             right_justified);
gboolean   gtk_menu_item_get_right_justified  (GtkMenuItem         *menu_item);
void          gtk_menu_item_set_accel_path    (GtkMenuItem         *menu_item,                                                const gchar         *accel_path);
const gchar * gtk_menu_item_get_accel_path    (GtkMenuItem    *menu_item);
void          gtk_menu_item_set_label         (GtkMenuItem         *menu_item,                                                const gchar         *label);
const gchar * gtk_menu_item_get_label         (GtkMenuItem         *menu_item);
void       gtk_menu_item_set_use_underline    (GtkMenuItem         *menu_item,                                                gboolean             setting);
gboolean   gtk_menu_item_get_use_underline    (GtkMenuItem         *menu_item);
void       gtk_menu_item_set_reserve_indicator (GtkMenuItem        *menu_item,                                                 gboolean            reserve);
gboolean   gtk_menu_item_get_reserve_indicator (GtkMenuItem        *menu_item);
GType            gtk_application_get_type      (void) ;
GtkApplication * gtk_application_new           (const gchar       *application_id,                                                 GApplicationFlags  flags);
void             gtk_application_add_window    (GtkApplication    *application,                                                 GtkWindow         *window);
void             gtk_application_remove_window (GtkApplication    *application,                                                 GtkWindow         *window);
GList *          gtk_application_get_windows   (GtkApplication    *application);
GMenuModel *     gtk_application_get_app_menu  (GtkApplication    *application);
void             gtk_application_set_app_menu  (GtkApplication    *application,                                                 GMenuModel        *app_menu);
GMenuModel *     gtk_application_get_menubar   (GtkApplication    *application);
void             gtk_application_set_menubar   (GtkApplication    *application,                                                 GMenuModel        *menubar);
void             gtk_application_add_accelerator    (GtkApplication  *application,                                                      const gchar     *accelerator,                                                      const gchar     *action_name,                                                      GVariant        *parameter);
void             gtk_application_remove_accelerator (GtkApplication *application,                                                      const gchar    *action_name,                                                      GVariant       *parameter);
guint            gtk_application_inhibit            (GtkApplication             *application,                                                      GtkWindow                  *window,                                                      GtkApplicationInhibitFlags  flags,                                                      const gchar                *reason);
void             gtk_application_uninhibit          (GtkApplication             *application,                                                      guint                       cookie);
gboolean         gtk_application_is_inhibited       (GtkApplication             *application,                                                      GtkApplicationInhibitFlags  flags);
GType   gtk_misc_get_type      (void) ;
void	gtk_misc_set_alignment (GtkMisc *misc, 				gfloat	 xalign, 				gfloat	 yalign);
void    gtk_misc_get_alignment (GtkMisc *misc, 				gfloat  *xalign, 				gfloat  *yalign);
void	gtk_misc_set_padding   (GtkMisc *misc, 				gint	 xpad, 				gint	 ypad);
void    gtk_misc_get_padding   (GtkMisc *misc, 				gint    *xpad, 				gint    *ypad);
void   _gtk_misc_get_padding_and_border	(GtkMisc   *misc, 					 GtkBorder *border);
GType      gtk_adjustment_get_type              (void) ;
GtkAdjustment*   gtk_adjustment_new             (gdouble          value,                                                  gdouble          lower,                                                  gdouble          upper,                                                  gdouble          step_increment,                                                  gdouble          page_increment,                                                  gdouble          page_size);
void       gtk_adjustment_changed               (GtkAdjustment   *adjustment);
void       gtk_adjustment_value_changed         (GtkAdjustment   *adjustment);
void       gtk_adjustment_clamp_page            (GtkAdjustment   *adjustment,                                                  gdouble          lower,                                                  gdouble          upper);
gdouble    gtk_adjustment_get_value             (GtkAdjustment   *adjustment);
void       gtk_adjustment_set_value             (GtkAdjustment   *adjustment,                                                  gdouble          value);
gdouble    gtk_adjustment_get_lower             (GtkAdjustment   *adjustment);
void       gtk_adjustment_set_lower             (GtkAdjustment   *adjustment,                                                  gdouble          lower);
gdouble    gtk_adjustment_get_upper             (GtkAdjustment   *adjustment);
void       gtk_adjustment_set_upper             (GtkAdjustment   *adjustment,                                                  gdouble          upper);
gdouble    gtk_adjustment_get_step_increment    (GtkAdjustment   *adjustment);
void       gtk_adjustment_set_step_increment    (GtkAdjustment   *adjustment,                                                  gdouble          step_increment);
gdouble    gtk_adjustment_get_page_increment    (GtkAdjustment   *adjustment);
void       gtk_adjustment_set_page_increment    (GtkAdjustment   *adjustment,                                                  gdouble          page_increment);
gdouble    gtk_adjustment_get_page_size         (GtkAdjustment   *adjustment);
void       gtk_adjustment_set_page_size         (GtkAdjustment   *adjustment,                                                  gdouble          page_size);
void       gtk_adjustment_configure             (GtkAdjustment   *adjustment,                                                  gdouble          value,                                                  gdouble          lower,                                                  gdouble          upper,                                                  gdouble          step_increment,                                                  gdouble          page_increment,                                                  gdouble          page_size);
gdouble    gtk_adjustment_get_minimum_increment (GtkAdjustment   *adjustment);
GType      gtk_activatable_get_type                   (void) ;
void       gtk_activatable_sync_action_properties     (GtkActivatable *activatable, 						       GtkAction      *action);
void       gtk_activatable_set_related_action         (GtkActivatable *activatable, 						       GtkAction      *action);
GtkAction *gtk_activatable_get_related_action         (GtkActivatable *activatable);
void       gtk_activatable_set_use_action_appearance  (GtkActivatable *activatable, 						       gboolean        use_appearance);
gboolean   gtk_activatable_get_use_action_appearance  (GtkActivatable *activatable);
void       gtk_activatable_do_set_related_action      (GtkActivatable *activatable, 						       GtkAction      *action);
GType                     gtk_entry_buffer_get_type               (void) ;
GtkEntryBuffer*           gtk_entry_buffer_new                    (const gchar     *initial_chars,                                                                    gint             n_initial_chars);
gsize                     gtk_entry_buffer_get_bytes              (GtkEntryBuffer  *buffer);
guint                     gtk_entry_buffer_get_length             (GtkEntryBuffer  *buffer);
const gchar*              gtk_entry_buffer_get_text               (GtkEntryBuffer  *buffer);
void                      gtk_entry_buffer_set_text               (GtkEntryBuffer  *buffer,                                                                    const gchar     *chars,                                                                    gint             n_chars);
void                      gtk_entry_buffer_set_max_length         (GtkEntryBuffer  *buffer,                                                                    gint             max_length);
gint                      gtk_entry_buffer_get_max_length         (GtkEntryBuffer  *buffer);
guint                     gtk_entry_buffer_insert_text            (GtkEntryBuffer  *buffer,                                                                    guint            position,                                                                    const gchar     *chars,                                                                    gint             n_chars);
guint                     gtk_entry_buffer_delete_text            (GtkEntryBuffer  *buffer,                                                                    guint            position,                                                                    gint             n_chars);
void                      gtk_entry_buffer_emit_inserted_text     (GtkEntryBuffer  *buffer,                                                                    guint            position,                                                                    const gchar     *chars,                                                                    guint            n_chars);
void                      gtk_entry_buffer_emit_deleted_text      (GtkEntryBuffer  *buffer,                                                                    guint            position,                                                                    guint            n_chars);
GtkWidget* gtk_message_dialog_new      (GtkWindow      *parent,                                         GtkDialogFlags  flags,                                         GtkMessageType  type,                                         GtkButtonsType  buttons,                                         const gchar    *message_format,                                         ...) G_GNUC_PRINTF (5, 6);
GtkWidget* gtk_message_dialog_new_with_markup   (GtkWindow      *parent,                                                  GtkDialogFlags  flags,                                                  GtkMessageType  type,                                                  GtkButtonsType  buttons,                                                  const gchar    *message_format,                                                  ...) G_GNUC_PRINTF (5, 6);
void       gtk_message_dialog_set_image    (GtkMessageDialog *dialog, 					    GtkWidget        *image);
GtkWidget * gtk_message_dialog_get_image   (GtkMessageDialog *dialog);
void       gtk_message_dialog_set_markup  (GtkMessageDialog *message_dialog,                                            const gchar      *str);
void       gtk_message_dialog_format_secondary_text (GtkMessageDialog *message_dialog,                                                      const gchar      *message_format,                                                      ...) G_GNUC_PRINTF (2, 3);
void       gtk_message_dialog_format_secondary_markup (GtkMessageDialog *message_dialog,                                                        const gchar      *message_format,                                                        ...) G_GNUC_PRINTF (2, 3);
GtkWidget *gtk_message_dialog_get_message_area (GtkMessageDialog *message_dialog);
GtkTextAttributes* gtk_text_attributes_new         (void);
GtkTextAttributes* gtk_text_attributes_copy        (GtkTextAttributes *src);
void               gtk_text_attributes_copy_values (GtkTextAttributes *src,                                                     GtkTextAttributes *dest);
void               gtk_text_attributes_unref       (GtkTextAttributes *values);
GtkTextAttributes *gtk_text_attributes_ref         (GtkTextAttributes *values);
GType              gtk_text_attributes_get_type    (void) ;
GType                   gtk_tree_view_column_get_type            (void) ;
GtkTreeViewColumn      *gtk_tree_view_column_new                 (void);
GtkTreeViewColumn      *gtk_tree_view_column_new_with_area       (GtkCellArea             *area);
GtkTreeViewColumn      *gtk_tree_view_column_new_with_attributes (const gchar             *title, 								  GtkCellRenderer         *cell, 								  ...) G_GNUC_NULL_TERMINATED;
void                    gtk_tree_view_column_pack_start          (GtkTreeViewColumn       *tree_column, 								  GtkCellRenderer         *cell, 								  gboolean                 expand);
void                    gtk_tree_view_column_pack_end            (GtkTreeViewColumn       *tree_column, 								  GtkCellRenderer         *cell, 								  gboolean                 expand);
void                    gtk_tree_view_column_clear               (GtkTreeViewColumn       *tree_column);
void                    gtk_tree_view_column_add_attribute       (GtkTreeViewColumn       *tree_column, 								  GtkCellRenderer         *cell_renderer, 								  const gchar             *attribute, 								  gint                     column);
void                    gtk_tree_view_column_set_attributes      (GtkTreeViewColumn       *tree_column, 								  GtkCellRenderer         *cell_renderer, 								  ...) G_GNUC_NULL_TERMINATED;
void                    gtk_tree_view_column_set_cell_data_func  (GtkTreeViewColumn       *tree_column, 								  GtkCellRenderer         *cell_renderer, 								  GtkTreeCellDataFunc      func, 								  gpointer                 func_data, 								  GDestroyNotify           destroy);
void                    gtk_tree_view_column_clear_attributes    (GtkTreeViewColumn       *tree_column, 								  GtkCellRenderer         *cell_renderer);
void                    gtk_tree_view_column_set_spacing         (GtkTreeViewColumn       *tree_column, 								  gint                     spacing);
gint                    gtk_tree_view_column_get_spacing         (GtkTreeViewColumn       *tree_column);
void                    gtk_tree_view_column_set_visible         (GtkTreeViewColumn       *tree_column, 								  gboolean                 visible);
gboolean                gtk_tree_view_column_get_visible         (GtkTreeViewColumn       *tree_column);
void                    gtk_tree_view_column_set_resizable       (GtkTreeViewColumn       *tree_column, 								  gboolean                 resizable);
gboolean                gtk_tree_view_column_get_resizable       (GtkTreeViewColumn       *tree_column);
void                    gtk_tree_view_column_set_sizing          (GtkTreeViewColumn       *tree_column, 								  GtkTreeViewColumnSizing  type);
GtkTreeViewColumnSizing gtk_tree_view_column_get_sizing          (GtkTreeViewColumn       *tree_column);
gint                    gtk_tree_view_column_get_x_offset        (GtkTreeViewColumn       *tree_column);
gint                    gtk_tree_view_column_get_width           (GtkTreeViewColumn       *tree_column);
gint                    gtk_tree_view_column_get_fixed_width     (GtkTreeViewColumn       *tree_column);
void                    gtk_tree_view_column_set_fixed_width     (GtkTreeViewColumn       *tree_column, 								  gint                     fixed_width);
void                    gtk_tree_view_column_set_min_width       (GtkTreeViewColumn       *tree_column, 								  gint                     min_width);
gint                    gtk_tree_view_column_get_min_width       (GtkTreeViewColumn       *tree_column);
void                    gtk_tree_view_column_set_max_width       (GtkTreeViewColumn       *tree_column, 								  gint                     max_width);
gint                    gtk_tree_view_column_get_max_width       (GtkTreeViewColumn       *tree_column);
void                    gtk_tree_view_column_clicked             (GtkTreeViewColumn       *tree_column);
void                    gtk_tree_view_column_set_title           (GtkTreeViewColumn       *tree_column, 								  const gchar             *title);
const gchar *           gtk_tree_view_column_get_title           (GtkTreeViewColumn       *tree_column);
void                    gtk_tree_view_column_set_expand          (GtkTreeViewColumn       *tree_column, 								  gboolean                 expand);
gboolean                gtk_tree_view_column_get_expand          (GtkTreeViewColumn       *tree_column);
void                    gtk_tree_view_column_set_clickable       (GtkTreeViewColumn       *tree_column, 								  gboolean                 clickable);
gboolean                gtk_tree_view_column_get_clickable       (GtkTreeViewColumn       *tree_column);
void                    gtk_tree_view_column_set_widget          (GtkTreeViewColumn       *tree_column, 								  GtkWidget               *widget);
GtkWidget              *gtk_tree_view_column_get_widget          (GtkTreeViewColumn       *tree_column);
void                    gtk_tree_view_column_set_alignment       (GtkTreeViewColumn       *tree_column, 								  gfloat                   xalign);
gfloat                  gtk_tree_view_column_get_alignment       (GtkTreeViewColumn       *tree_column);
void                    gtk_tree_view_column_set_reorderable     (GtkTreeViewColumn       *tree_column, 								  gboolean                 reorderable);
gboolean                gtk_tree_view_column_get_reorderable     (GtkTreeViewColumn       *tree_column);
void                    gtk_tree_view_column_set_sort_column_id  (GtkTreeViewColumn       *tree_column, 								  gint                     sort_column_id);
gint                    gtk_tree_view_column_get_sort_column_id  (GtkTreeViewColumn       *tree_column);
void                    gtk_tree_view_column_set_sort_indicator  (GtkTreeViewColumn       *tree_column, 								  gboolean                 setting);
gboolean                gtk_tree_view_column_get_sort_indicator  (GtkTreeViewColumn       *tree_column);
void                    gtk_tree_view_column_set_sort_order      (GtkTreeViewColumn       *tree_column, 								  GtkSortType              order);
GtkSortType             gtk_tree_view_column_get_sort_order      (GtkTreeViewColumn       *tree_column);
void                    gtk_tree_view_column_cell_set_cell_data  (GtkTreeViewColumn       *tree_column, 								  GtkTreeModel            *tree_model, 								  GtkTreeIter             *iter, 								  gboolean                 is_expander, 								  gboolean                 is_expanded);
void                    gtk_tree_view_column_cell_get_size       (GtkTreeViewColumn       *tree_column, 								  const GdkRectangle      *cell_area, 								  gint                    *x_offset, 								  gint                    *y_offset, 								  gint                    *width, 								  gint                    *height);
gboolean                gtk_tree_view_column_cell_is_visible     (GtkTreeViewColumn       *tree_column);
void                    gtk_tree_view_column_focus_cell          (GtkTreeViewColumn       *tree_column, 								  GtkCellRenderer         *cell);
gboolean                gtk_tree_view_column_cell_get_position   (GtkTreeViewColumn       *tree_column, 					                          GtkCellRenderer         *cell_renderer, 					                          gint                    *x_offset, 					                          gint                    *width);
void                    gtk_tree_view_column_queue_resize        (GtkTreeViewColumn       *tree_column);
GtkWidget              *gtk_tree_view_column_get_tree_view       (GtkTreeViewColumn       *tree_column);
GtkWidget              *gtk_tree_view_column_get_button          (GtkTreeViewColumn       *tree_column);

GtkTreePath *gtk_tree_path_new              (void);
GtkTreePath *gtk_tree_path_new_from_string  (const gchar       *path);
GtkTreePath *gtk_tree_path_new_from_indices (gint               first_index, 					     ...);
gchar       *gtk_tree_path_to_string        (GtkTreePath       *path);
GtkTreePath *gtk_tree_path_new_first        (void);
void         gtk_tree_path_append_index     (GtkTreePath       *path, 					     gint               index_);
void         gtk_tree_path_prepend_index    (GtkTreePath       *path, 					     gint               index_);
gint         gtk_tree_path_get_depth        (GtkTreePath       *path);
gint        *gtk_tree_path_get_indices      (GtkTreePath       *path);
gint        *gtk_tree_path_get_indices_with_depth (GtkTreePath *path, 						   gint        *depth);
void         gtk_tree_path_free             (GtkTreePath       *path);
GtkTreePath *gtk_tree_path_copy             (const GtkTreePath *path);
GType        gtk_tree_path_get_type         (void) ;
gint         gtk_tree_path_compare          (const GtkTreePath *a, 					     const GtkTreePath *b);
void         gtk_tree_path_next             (GtkTreePath       *path);
gboolean     gtk_tree_path_prev             (GtkTreePath       *path);
gboolean     gtk_tree_path_up               (GtkTreePath       *path);
void         gtk_tree_path_down             (GtkTreePath       *path);
gboolean     gtk_tree_path_is_ancestor      (GtkTreePath       *path,                                              GtkTreePath       *descendant);
gboolean     gtk_tree_path_is_descendant    (GtkTreePath       *path,                                              GtkTreePath       *ancestor);
GType                gtk_tree_row_reference_get_type (void) ;
GtkTreeRowReference *gtk_tree_row_reference_new       (GtkTreeModel        *model, 						       GtkTreePath         *path);
GtkTreeRowReference *gtk_tree_row_reference_new_proxy (GObject             *proxy, 						       GtkTreeModel        *model, 						       GtkTreePath         *path);
GtkTreePath         *gtk_tree_row_reference_get_path  (GtkTreeRowReference *reference);
GtkTreeModel        *gtk_tree_row_reference_get_model (GtkTreeRowReference *reference);
gboolean             gtk_tree_row_reference_valid     (GtkTreeRowReference *reference);
GtkTreeRowReference *gtk_tree_row_reference_copy      (GtkTreeRowReference *reference);
void                 gtk_tree_row_reference_free      (GtkTreeRowReference *reference);
void                 gtk_tree_row_reference_inserted  (GObject     *proxy, 						       GtkTreePath *path);
void                 gtk_tree_row_reference_deleted   (GObject     *proxy, 						       GtkTreePath *path);
void                 gtk_tree_row_reference_reordered (GObject     *proxy, 						       GtkTreePath *path, 						       GtkTreeIter *iter, 						       gint        *new_order);
GtkTreeIter *     gtk_tree_iter_copy             (GtkTreeIter  *iter);
void              gtk_tree_iter_free             (GtkTreeIter  *iter);
GType             gtk_tree_iter_get_type         (void) ;
GType             gtk_tree_model_get_type        (void) ;
GtkTreeModelFlags gtk_tree_model_get_flags       (GtkTreeModel *tree_model);
gint              gtk_tree_model_get_n_columns   (GtkTreeModel *tree_model);
GType             gtk_tree_model_get_column_type (GtkTreeModel *tree_model, 						  gint          index_);
gboolean          gtk_tree_model_get_iter        (GtkTreeModel *tree_model, 						  GtkTreeIter  *iter, 						  GtkTreePath  *path);
gboolean          gtk_tree_model_get_iter_from_string (GtkTreeModel *tree_model, 						       GtkTreeIter  *iter, 						       const gchar  *path_string);
gchar *           gtk_tree_model_get_string_from_iter (GtkTreeModel *tree_model,                                                        GtkTreeIter  *iter);
gboolean          gtk_tree_model_get_iter_first  (GtkTreeModel *tree_model, 						  GtkTreeIter  *iter);
GtkTreePath *     gtk_tree_model_get_path        (GtkTreeModel *tree_model, 						  GtkTreeIter  *iter);
void              gtk_tree_model_get_value       (GtkTreeModel *tree_model, 						  GtkTreeIter  *iter, 						  gint          column, 						  GValue       *value);
gboolean          gtk_tree_model_iter_previous   (GtkTreeModel *tree_model, 						  GtkTreeIter  *iter);
gboolean          gtk_tree_model_iter_next       (GtkTreeModel *tree_model, 						  GtkTreeIter  *iter);
gboolean          gtk_tree_model_iter_children   (GtkTreeModel *tree_model, 						  GtkTreeIter  *iter, 						  GtkTreeIter  *parent);
gboolean          gtk_tree_model_iter_has_child  (GtkTreeModel *tree_model, 						  GtkTreeIter  *iter);
gint              gtk_tree_model_iter_n_children (GtkTreeModel *tree_model, 						  GtkTreeIter  *iter);
gboolean          gtk_tree_model_iter_nth_child  (GtkTreeModel *tree_model, 						  GtkTreeIter  *iter, 						  GtkTreeIter  *parent, 						  gint          n);
gboolean          gtk_tree_model_iter_parent     (GtkTreeModel *tree_model, 						  GtkTreeIter  *iter, 						  GtkTreeIter  *child);
void              gtk_tree_model_ref_node        (GtkTreeModel *tree_model, 						  GtkTreeIter  *iter);
void              gtk_tree_model_unref_node      (GtkTreeModel *tree_model, 						  GtkTreeIter  *iter);
void              gtk_tree_model_get             (GtkTreeModel *tree_model, 						  GtkTreeIter  *iter, 						  ...);
void              gtk_tree_model_get_valist      (GtkTreeModel *tree_model, 						  GtkTreeIter  *iter, 						  va_list       var_args);
void              gtk_tree_model_foreach         (GtkTreeModel            *model, 						  GtkTreeModelForeachFunc  func, 						  gpointer                 user_data);
void gtk_tree_model_row_changed           (GtkTreeModel *tree_model, 					   GtkTreePath  *path, 					   GtkTreeIter  *iter);
void gtk_tree_model_row_inserted          (GtkTreeModel *tree_model, 					   GtkTreePath  *path, 					   GtkTreeIter  *iter);
void gtk_tree_model_row_has_child_toggled (GtkTreeModel *tree_model, 					   GtkTreePath  *path, 					   GtkTreeIter  *iter);
void gtk_tree_model_row_deleted           (GtkTreeModel *tree_model, 					   GtkTreePath  *path);
void gtk_tree_model_rows_reordered        (GtkTreeModel *tree_model, 					   GtkTreePath  *path, 					   GtkTreeIter  *iter, 					   gint         *new_order);
GType      gtk_toggle_button_get_type          (void) ;
GtkWidget* gtk_toggle_button_new               (void);
GtkWidget* gtk_toggle_button_new_with_label    (const gchar     *label);
GtkWidget* gtk_toggle_button_new_with_mnemonic (const gchar     *label);
void       gtk_toggle_button_set_mode          (GtkToggleButton *toggle_button,                                                 gboolean         draw_indicator);
gboolean   gtk_toggle_button_get_mode          (GtkToggleButton *toggle_button);
void       gtk_toggle_button_set_active        (GtkToggleButton *toggle_button,                                                 gboolean         is_active);
gboolean   gtk_toggle_button_get_active        (GtkToggleButton *toggle_button);
void       gtk_toggle_button_toggled           (GtkToggleButton *toggle_button);
void       gtk_toggle_button_set_inconsistent  (GtkToggleButton *toggle_button,                                                 gboolean         setting);
gboolean   gtk_toggle_button_get_inconsistent  (GtkToggleButton *toggle_button);
void       _gtk_toggle_button_set_active       (GtkToggleButton *toggle_button,                                                 gboolean         is_active);
GType                 gtk_assistant_get_type              (void) ;
GtkWidget            *gtk_assistant_new                   (void);
void                  gtk_assistant_next_page             (GtkAssistant         *assistant);
void                  gtk_assistant_previous_page         (GtkAssistant         *assistant);
gint                  gtk_assistant_get_current_page      (GtkAssistant         *assistant);
void                  gtk_assistant_set_current_page      (GtkAssistant         *assistant,                                                            gint                  page_num);
gint                  gtk_assistant_get_n_pages           (GtkAssistant         *assistant);
GtkWidget            *gtk_assistant_get_nth_page          (GtkAssistant         *assistant,                                                            gint                  page_num);
gint                  gtk_assistant_prepend_page          (GtkAssistant         *assistant,                                                            GtkWidget            *page);
gint                  gtk_assistant_append_page           (GtkAssistant         *assistant,                                                            GtkWidget            *page);
gint                  gtk_assistant_insert_page           (GtkAssistant         *assistant,                                                            GtkWidget            *page,                                                            gint                  position);
void                  gtk_assistant_remove_page           (GtkAssistant         *assistant,                                                            gint                  page_num);
void                  gtk_assistant_set_forward_page_func (GtkAssistant         *assistant,                                                            GtkAssistantPageFunc  page_func,                                                            gpointer              data,                                                            GDestroyNotify        destroy);
void                  gtk_assistant_set_page_type         (GtkAssistant         *assistant,                                                            GtkWidget            *page,                                                            GtkAssistantPageType  type);
GtkAssistantPageType  gtk_assistant_get_page_type         (GtkAssistant         *assistant,                                                            GtkWidget            *page);
void                  gtk_assistant_set_page_title        (GtkAssistant         *assistant,                                                            GtkWidget            *page,                                                            const gchar          *title);
const gchar *         gtk_assistant_get_page_title        (GtkAssistant         *assistant,                                                            GtkWidget            *page);
void                  gtk_assistant_set_page_header_image (GtkAssistant         *assistant,                                                            GtkWidget            *page,                                                            GdkPixbuf            *pixbuf);
GdkPixbuf            *gtk_assistant_get_page_header_image (GtkAssistant         *assistant,                                                            GtkWidget            *page);
void                  gtk_assistant_set_page_side_image   (GtkAssistant         *assistant,                                                            GtkWidget            *page,                                                            GdkPixbuf            *pixbuf);
GdkPixbuf            *gtk_assistant_get_page_side_image   (GtkAssistant         *assistant,                                                            GtkWidget            *page);
void                  gtk_assistant_set_page_complete     (GtkAssistant         *assistant,                                                            GtkWidget            *page,                                                            gboolean              complete);
gboolean              gtk_assistant_get_page_complete     (GtkAssistant         *assistant,                                                            GtkWidget            *page);
void                  gtk_assistant_add_action_widget     (GtkAssistant         *assistant,                                                            GtkWidget            *child);
void                  gtk_assistant_remove_action_widget  (GtkAssistant         *assistant,                                                            GtkWidget            *child);
void                  gtk_assistant_update_buttons_state  (GtkAssistant *assistant);
void                  gtk_assistant_commit                (GtkAssistant *assistant);
GType          gtk_scrolled_window_get_type          (void) ;
GtkWidget*     gtk_scrolled_window_new               (GtkAdjustment     *hadjustment, 						      GtkAdjustment     *vadjustment);
void           gtk_scrolled_window_set_hadjustment   (GtkScrolledWindow *scrolled_window, 						      GtkAdjustment     *hadjustment);
void           gtk_scrolled_window_set_vadjustment   (GtkScrolledWindow *scrolled_window, 						      GtkAdjustment     *vadjustment);
GtkAdjustment* gtk_scrolled_window_get_hadjustment   (GtkScrolledWindow *scrolled_window);
GtkAdjustment* gtk_scrolled_window_get_vadjustment   (GtkScrolledWindow *scrolled_window);
GtkWidget*     gtk_scrolled_window_get_hscrollbar    (GtkScrolledWindow *scrolled_window);
GtkWidget*     gtk_scrolled_window_get_vscrollbar    (GtkScrolledWindow *scrolled_window);
void           gtk_scrolled_window_set_policy        (GtkScrolledWindow *scrolled_window, 						      GtkPolicyType      hscrollbar_policy, 						      GtkPolicyType      vscrollbar_policy);
void           gtk_scrolled_window_get_policy        (GtkScrolledWindow *scrolled_window, 						      GtkPolicyType     *hscrollbar_policy, 						      GtkPolicyType     *vscrollbar_policy);
void           gtk_scrolled_window_set_placement     (GtkScrolledWindow *scrolled_window, 						      GtkCornerType      window_placement);
void           gtk_scrolled_window_unset_placement   (GtkScrolledWindow *scrolled_window);
GtkCornerType  gtk_scrolled_window_get_placement     (GtkScrolledWindow *scrolled_window);
void           gtk_scrolled_window_set_shadow_type   (GtkScrolledWindow *scrolled_window, 						      GtkShadowType      type);
GtkShadowType  gtk_scrolled_window_get_shadow_type   (GtkScrolledWindow *scrolled_window);
void	       gtk_scrolled_window_add_with_viewport (GtkScrolledWindow *scrolled_window, 						      GtkWidget		*child);
gint           gtk_scrolled_window_get_min_content_width  (GtkScrolledWindow *scrolled_window);
void           gtk_scrolled_window_set_min_content_width  (GtkScrolledWindow *scrolled_window,                                                            gint               width);
gint           gtk_scrolled_window_get_min_content_height (GtkScrolledWindow *scrolled_window);
void           gtk_scrolled_window_set_min_content_height (GtkScrolledWindow *scrolled_window,                                                            gint               height);
void           gtk_scrolled_window_set_kinetic_scrolling  (GtkScrolledWindow        *scrolled_window,                                                            gboolean                  kinetic_scrolling);
gboolean       gtk_scrolled_window_get_kinetic_scrolling  (GtkScrolledWindow        *scrolled_window);
void           gtk_scrolled_window_set_capture_button_press (GtkScrolledWindow      *scrolled_window,                                                              gboolean                capture_button_press);
gboolean       gtk_scrolled_window_get_capture_button_press (GtkScrolledWindow      *scrolled_window);
gint _gtk_scrolled_window_get_scrollbar_spacing (GtkScrolledWindow *scrolled_window);
GType gtk_tooltip_get_type (void);
void gtk_tooltip_set_markup              (GtkTooltip         *tooltip,                                           const gchar        *markup);
void gtk_tooltip_set_text                (GtkTooltip         *tooltip,                                           const gchar        *text);
void gtk_tooltip_set_icon                (GtkTooltip         *tooltip,                                           GdkPixbuf          *pixbuf);
void gtk_tooltip_set_icon_from_stock     (GtkTooltip         *tooltip,                                           const gchar        *stock_id,                                           GtkIconSize         size);
void gtk_tooltip_set_icon_from_icon_name (GtkTooltip         *tooltip, 				          const gchar        *icon_name, 				          GtkIconSize         size);
void gtk_tooltip_set_icon_from_gicon     (GtkTooltip         *tooltip, 					  GIcon              *gicon, 					  GtkIconSize         size);
void gtk_tooltip_set_custom	         (GtkTooltip         *tooltip,                                           GtkWidget          *custom_widget);
void gtk_tooltip_set_tip_area            (GtkTooltip         *tooltip,                                           const GdkRectangle *rect);
void gtk_tooltip_trigger_tooltip_query   (GdkDisplay         *display);
void _gtk_tooltip_focus_in               (GtkWidget          *widget);
void _gtk_tooltip_focus_out              (GtkWidget          *widget);
void _gtk_tooltip_toggle_keyboard_mode   (GtkWidget          *widget);
void _gtk_tooltip_handle_event           (GdkEvent           *event);
void _gtk_tooltip_hide                   (GtkWidget          *widget);
GtkWidget * _gtk_widget_find_at_coords   (GdkWindow          *window,                                           gint                window_x,                                           gint                window_y,                                           gint               *widget_x,                                           gint               *widget_y);
GType          gtk_info_bar_get_type               (void) ;
GtkWidget     *gtk_info_bar_new                    (void);
GtkWidget     *gtk_info_bar_new_with_buttons       (const gchar    *first_button_text,                                                     ...);
GtkWidget     *gtk_info_bar_get_action_area        (GtkInfoBar     *info_bar);
GtkWidget     *gtk_info_bar_get_content_area       (GtkInfoBar     *info_bar);
void           gtk_info_bar_add_action_widget      (GtkInfoBar     *info_bar,                                                     GtkWidget      *child,                                                     gint            response_id);
GtkWidget     *gtk_info_bar_add_button             (GtkInfoBar     *info_bar,                                                     const gchar    *button_text,                                                     gint            response_id);
void           gtk_info_bar_add_buttons            (GtkInfoBar     *info_bar,                                                     const gchar    *first_button_text,                                                     ...);
void           gtk_info_bar_set_response_sensitive (GtkInfoBar     *info_bar,                                                     gint            response_id,                                                     gboolean        setting);
void           gtk_info_bar_set_default_response   (GtkInfoBar     *info_bar,                                                     gint            response_id);
void           gtk_info_bar_response               (GtkInfoBar     *info_bar,                                                     gint            response_id);
void           gtk_info_bar_set_message_type       (GtkInfoBar     *info_bar,                                                     GtkMessageType  message_type);
GtkMessageType gtk_info_bar_get_message_type       (GtkInfoBar     *info_bar);
GType           gtk_action_group_get_type                (void) ;
GtkActionGroup *gtk_action_group_new                     (const gchar                *name);
const gchar    *gtk_action_group_get_name                (GtkActionGroup             *action_group);
gboolean        gtk_action_group_get_sensitive           (GtkActionGroup             *action_group);
void            gtk_action_group_set_sensitive           (GtkActionGroup             *action_group, 							  gboolean                    sensitive);
gboolean        gtk_action_group_get_visible             (GtkActionGroup             *action_group);
void            gtk_action_group_set_visible             (GtkActionGroup             *action_group, 							  gboolean                    visible);
GtkAction      *gtk_action_group_get_action              (GtkActionGroup             *action_group, 							  const gchar                *action_name);
GList          *gtk_action_group_list_actions            (GtkActionGroup             *action_group);
void            gtk_action_group_add_action              (GtkActionGroup             *action_group, 							  GtkAction                  *action);
void            gtk_action_group_add_action_with_accel   (GtkActionGroup             *action_group, 							  GtkAction                  *action, 							  const gchar                *accelerator);
void            gtk_action_group_remove_action           (GtkActionGroup             *action_group, 							  GtkAction                  *action);
void            gtk_action_group_add_actions             (GtkActionGroup             *action_group, 							  const GtkActionEntry       *entries, 							  guint                       n_entries, 							  gpointer                    user_data);
void            gtk_action_group_add_toggle_actions      (GtkActionGroup             *action_group, 							  const GtkToggleActionEntry *entries, 							  guint                       n_entries, 							  gpointer                    user_data);
void            gtk_action_group_add_radio_actions       (GtkActionGroup             *action_group, 							  const GtkRadioActionEntry  *entries, 							  guint                       n_entries, 							  gint                        value, 							  GCallback                   on_change, 							  gpointer                    user_data);
void            gtk_action_group_add_actions_full        (GtkActionGroup             *action_group, 							  const GtkActionEntry       *entries, 							  guint                       n_entries, 							  gpointer                    user_data, 							  GDestroyNotify              destroy);
void            gtk_action_group_add_toggle_actions_full (GtkActionGroup             *action_group, 							  const GtkToggleActionEntry *entries, 							  guint                       n_entries, 							  gpointer                    user_data, 							  GDestroyNotify              destroy);
void            gtk_action_group_add_radio_actions_full  (GtkActionGroup             *action_group, 							  const GtkRadioActionEntry  *entries, 							  guint                       n_entries, 							  gint                        value, 							  GCallback                   on_change, 							  gpointer                    user_data, 							  GDestroyNotify              destroy);
void            gtk_action_group_set_translate_func      (GtkActionGroup             *action_group, 							  GtkTranslateFunc            func, 							  gpointer                    data, 							  GDestroyNotify              notify);
void            gtk_action_group_set_translation_domain  (GtkActionGroup             *action_group, 							  const gchar                *domain);
const gchar *   gtk_action_group_translate_string        (GtkActionGroup             *action_group,   	                                                  const gchar                *string);
void _gtk_action_group_emit_connect_proxy    (GtkActionGroup *action_group,                                               GtkAction      *action,                                               GtkWidget      *proxy);
void _gtk_action_group_emit_disconnect_proxy (GtkActionGroup *action_group,                                               GtkAction      *action,                                               GtkWidget      *proxy);
void _gtk_action_group_emit_pre_activate     (GtkActionGroup *action_group,                                               GtkAction      *action);
void _gtk_action_group_emit_post_activate    (GtkActionGroup *action_group,                                               GtkAction      *action);
GType               gtk_text_child_anchor_get_type    (void) ;
GtkTextChildAnchor* gtk_text_child_anchor_new         (void);
GList*              gtk_text_child_anchor_get_widgets (GtkTextChildAnchor *anchor);
gboolean            gtk_text_child_anchor_get_deleted (GtkTextChildAnchor *anchor);
GType gtk_switch_get_type (void) ;
GtkWidget *     gtk_switch_new          (void);
void            gtk_switch_set_active   (GtkSwitch *sw,                                          gboolean   is_active);
gboolean        gtk_switch_get_active   (GtkSwitch *sw);
gboolean gtk_show_uri  (GdkScreen   *screen,                         const gchar *uri,                         guint32      timestamp,                         GError     **error);
GType                 gtk_recent_filter_get_type (void) ;
GtkRecentFilter *     gtk_recent_filter_new      (void);
void                  gtk_recent_filter_set_name (GtkRecentFilter *filter, 						  const gchar     *name);
const gchar *         gtk_recent_filter_get_name (GtkRecentFilter *filter);
void gtk_recent_filter_add_mime_type      (GtkRecentFilter      *filter, 					   const gchar          *mime_type);
void gtk_recent_filter_add_pattern        (GtkRecentFilter      *filter, 					   const gchar          *pattern);
void gtk_recent_filter_add_pixbuf_formats (GtkRecentFilter      *filter);
void gtk_recent_filter_add_application    (GtkRecentFilter      *filter, 					   const gchar          *application);
void gtk_recent_filter_add_group          (GtkRecentFilter      *filter, 					   const gchar          *group);
void gtk_recent_filter_add_age            (GtkRecentFilter      *filter, 					   gint                  days);
void gtk_recent_filter_add_custom         (GtkRecentFilter      *filter, 					   GtkRecentFilterFlags  needed, 					   GtkRecentFilterFunc   func, 					   gpointer              data, 					   GDestroyNotify        data_destroy);
GtkRecentFilterFlags gtk_recent_filter_get_needed (GtkRecentFilter           *filter);
gboolean             gtk_recent_filter_filter     (GtkRecentFilter           *filter, 						   const GtkRecentFilterInfo *filter_info);
GType                gtk_scrollable_get_type               (void) ;
GtkAdjustment       *gtk_scrollable_get_hadjustment        (GtkScrollable       *scrollable);
void                 gtk_scrollable_set_hadjustment        (GtkScrollable       *scrollable, 							    GtkAdjustment       *hadjustment);
GtkAdjustment       *gtk_scrollable_get_vadjustment        (GtkScrollable       *scrollable);
void                 gtk_scrollable_set_vadjustment        (GtkScrollable       *scrollable, 							    GtkAdjustment       *vadjustment);
GtkScrollablePolicy  gtk_scrollable_get_hscroll_policy     (GtkScrollable       *scrollable);
void                 gtk_scrollable_set_hscroll_policy     (GtkScrollable       *scrollable, 							    GtkScrollablePolicy  policy);
GtkScrollablePolicy  gtk_scrollable_get_vscroll_policy     (GtkScrollable       *scrollable);
void                 gtk_scrollable_set_vscroll_policy     (GtkScrollable       *scrollable, 							    GtkScrollablePolicy  policy);
GType                 gtk_tool_item_group_get_type          (void) ;
GtkWidget*            gtk_tool_item_group_new               (const gchar        *label);
void                  gtk_tool_item_group_set_label         (GtkToolItemGroup   *group,                                                              const gchar        *label);
void                  gtk_tool_item_group_set_label_widget  (GtkToolItemGroup   *group,                                                              GtkWidget          *label_widget);
void                  gtk_tool_item_group_set_collapsed      (GtkToolItemGroup  *group,                                                              gboolean            collapsed);
void                  gtk_tool_item_group_set_ellipsize     (GtkToolItemGroup   *group,                                                              PangoEllipsizeMode  ellipsize);
void                  gtk_tool_item_group_set_header_relief (GtkToolItemGroup   *group,                                                              GtkReliefStyle      style);
const gchar *         gtk_tool_item_group_get_label         (GtkToolItemGroup   *group);
GtkWidget            *gtk_tool_item_group_get_label_widget  (GtkToolItemGroup   *group);
gboolean              gtk_tool_item_group_get_collapsed     (GtkToolItemGroup   *group);
PangoEllipsizeMode    gtk_tool_item_group_get_ellipsize     (GtkToolItemGroup   *group);
GtkReliefStyle        gtk_tool_item_group_get_header_relief (GtkToolItemGroup   *group);
void                  gtk_tool_item_group_insert            (GtkToolItemGroup   *group,                                                              GtkToolItem        *item,                                                              gint                position);
void                  gtk_tool_item_group_set_item_position (GtkToolItemGroup   *group,                                                              GtkToolItem        *item,                                                              gint                position);
gint                  gtk_tool_item_group_get_item_position (GtkToolItemGroup   *group,                                                              GtkToolItem        *item);
guint                 gtk_tool_item_group_get_n_items       (GtkToolItemGroup   *group);
GtkToolItem*          gtk_tool_item_group_get_nth_item      (GtkToolItemGroup   *group,                                                              guint               index);
GtkToolItem*          gtk_tool_item_group_get_drop_item     (GtkToolItemGroup   *group,                                                              gint                x,                                                              gint                y);
GQuark gtk_icon_theme_error_quark (void);
GType         gtk_icon_theme_get_type              (void) ;
GtkIconTheme *gtk_icon_theme_new                   (void);
GtkIconTheme *gtk_icon_theme_get_default           (void);
GtkIconTheme *gtk_icon_theme_get_for_screen        (GdkScreen                   *screen);
void          gtk_icon_theme_set_screen            (GtkIconTheme                *icon_theme, 						    GdkScreen                   *screen);
void          gtk_icon_theme_set_search_path       (GtkIconTheme                *icon_theme, 						    const gchar                 *path[], 						    gint                         n_elements);
void          gtk_icon_theme_get_search_path       (GtkIconTheme                *icon_theme, 						    gchar                      **path[], 						    gint                        *n_elements);
void          gtk_icon_theme_append_search_path    (GtkIconTheme                *icon_theme, 						    const gchar                 *path);
void          gtk_icon_theme_prepend_search_path   (GtkIconTheme                *icon_theme, 						    const gchar                 *path);
void          gtk_icon_theme_set_custom_theme      (GtkIconTheme                *icon_theme, 						    const gchar                 *theme_name);
gboolean      gtk_icon_theme_has_icon              (GtkIconTheme                *icon_theme, 						    const gchar                 *icon_name);
gint         *gtk_icon_theme_get_icon_sizes        (GtkIconTheme                *icon_theme, 						    const gchar                 *icon_name);
GtkIconInfo * gtk_icon_theme_lookup_icon           (GtkIconTheme                *icon_theme, 						    const gchar                 *icon_name, 						    gint                         size, 						    GtkIconLookupFlags           flags);
GtkIconInfo * gtk_icon_theme_choose_icon           (GtkIconTheme                *icon_theme, 						    const gchar                 *icon_names[], 						    gint                         size, 						    GtkIconLookupFlags           flags);
GdkPixbuf *   gtk_icon_theme_load_icon             (GtkIconTheme                *icon_theme, 						    const gchar                 *icon_name, 						    gint                         size, 						    GtkIconLookupFlags           flags, 						    GError                     **error);
GtkIconInfo * gtk_icon_theme_lookup_by_gicon       (GtkIconTheme                *icon_theme,                                                     GIcon                       *icon,                                                     gint                         size,                                                     GtkIconLookupFlags           flags);
GList *       gtk_icon_theme_list_icons            (GtkIconTheme                *icon_theme, 						    const gchar                 *context);
GList *       gtk_icon_theme_list_contexts         (GtkIconTheme                *icon_theme);
char *        gtk_icon_theme_get_example_icon_name (GtkIconTheme                *icon_theme);
gboolean      gtk_icon_theme_rescan_if_needed      (GtkIconTheme                *icon_theme);
void          gtk_icon_theme_add_builtin_icon      (const gchar *icon_name, 					            gint         size, 					            GdkPixbuf   *pixbuf);
GType                 gtk_icon_info_get_type           (void) ;
GtkIconInfo *         gtk_icon_info_copy               (GtkIconInfo  *icon_info);
void                  gtk_icon_info_free               (GtkIconInfo  *icon_info);
GtkIconInfo *         gtk_icon_info_new_for_pixbuf     (GtkIconTheme  *icon_theme,                                                         GdkPixbuf     *pixbuf);
gint                  gtk_icon_info_get_base_size      (GtkIconInfo   *icon_info);
const gchar *         gtk_icon_info_get_filename       (GtkIconInfo   *icon_info);
GdkPixbuf *           gtk_icon_info_get_builtin_pixbuf (GtkIconInfo   *icon_info);
GdkPixbuf *           gtk_icon_info_load_icon          (GtkIconInfo   *icon_info, 							GError       **error);
GdkPixbuf *           gtk_icon_info_load_symbolic      (GtkIconInfo   *icon_info,                                                         const GdkRGBA *fg,                                                         const GdkRGBA *success_color,                                                         const GdkRGBA *warning_color,                                                         const GdkRGBA *error_color,                                                         gboolean      *was_symbolic,                                                         GError       **error);
GdkPixbuf *           gtk_icon_info_load_symbolic_for_context (GtkIconInfo      *icon_info,                                                                GtkStyleContext  *context,                                                                gboolean         *was_symbolic,                                                                GError          **error);
GdkPixbuf *           gtk_icon_info_load_symbolic_for_style  (GtkIconInfo   *icon_info,                                                               GtkStyle      *style,                                                               GtkStateType   state,                                                               gboolean      *was_symbolic,                                                               GError       **error);
void                  gtk_icon_info_set_raw_coordinates (GtkIconInfo  *icon_info, 							 gboolean      raw_coordinates);
gboolean              gtk_icon_info_get_embedded_rect (GtkIconInfo    *icon_info, 						       GdkRectangle   *rectangle);
gboolean              gtk_icon_info_get_attach_points (GtkIconInfo    *icon_info, 						       GdkPoint      **points, 						       gint           *n_points);
const gchar *         gtk_icon_info_get_display_name  (GtkIconInfo    *icon_info);
void _gtk_icon_theme_check_reload                     (GdkDisplay *display);
void _gtk_icon_theme_ensure_builtin_cache             (void);

GType        gtk_tool_item_get_type (void) ;
GtkToolItem *gtk_tool_item_new      (void);
void            gtk_tool_item_set_homogeneous          (GtkToolItem *tool_item, 							gboolean     homogeneous);
gboolean        gtk_tool_item_get_homogeneous          (GtkToolItem *tool_item);
void            gtk_tool_item_set_expand               (GtkToolItem *tool_item, 							gboolean     expand);
gboolean        gtk_tool_item_get_expand               (GtkToolItem *tool_item);
void            gtk_tool_item_set_tooltip_text         (GtkToolItem *tool_item, 							const gchar *text);
void            gtk_tool_item_set_tooltip_markup       (GtkToolItem *tool_item, 							const gchar *markup);
void            gtk_tool_item_set_use_drag_window      (GtkToolItem *tool_item, 							gboolean     use_drag_window);
gboolean        gtk_tool_item_get_use_drag_window      (GtkToolItem *tool_item);
void            gtk_tool_item_set_visible_horizontal   (GtkToolItem *tool_item, 							gboolean     visible_horizontal);
gboolean        gtk_tool_item_get_visible_horizontal   (GtkToolItem *tool_item);
void            gtk_tool_item_set_visible_vertical     (GtkToolItem *tool_item, 							gboolean     visible_vertical);
gboolean        gtk_tool_item_get_visible_vertical     (GtkToolItem *tool_item);
gboolean        gtk_tool_item_get_is_important         (GtkToolItem *tool_item);
void            gtk_tool_item_set_is_important         (GtkToolItem *tool_item, 							gboolean     is_important);
PangoEllipsizeMode gtk_tool_item_get_ellipsize_mode    (GtkToolItem *tool_item);
GtkIconSize     gtk_tool_item_get_icon_size            (GtkToolItem *tool_item);
GtkOrientation  gtk_tool_item_get_orientation          (GtkToolItem *tool_item);
GtkToolbarStyle gtk_tool_item_get_toolbar_style        (GtkToolItem *tool_item);
GtkReliefStyle  gtk_tool_item_get_relief_style         (GtkToolItem *tool_item);
gfloat          gtk_tool_item_get_text_alignment       (GtkToolItem *tool_item);
GtkOrientation  gtk_tool_item_get_text_orientation     (GtkToolItem *tool_item);
GtkSizeGroup *  gtk_tool_item_get_text_size_group      (GtkToolItem *tool_item);
GtkWidget *     gtk_tool_item_retrieve_proxy_menu_item (GtkToolItem *tool_item);
GtkWidget *     gtk_tool_item_get_proxy_menu_item      (GtkToolItem *tool_item, 							const gchar *menu_item_id);
void            gtk_tool_item_set_proxy_menu_item      (GtkToolItem *tool_item, 							const gchar *menu_item_id, 							GtkWidget   *menu_item);
void		gtk_tool_item_rebuild_menu	       (GtkToolItem *tool_item);
void            gtk_tool_item_toolbar_reconfigured     (GtkToolItem *tool_item);
gboolean       _gtk_tool_item_create_menu_proxy        (GtkToolItem *tool_item);
GType            gtk_scale_button_get_type         (void) ;
GtkWidget *      gtk_scale_button_new              (GtkIconSize      size,                                                     gdouble          min,                                                     gdouble          max,                                                     gdouble          step,                                                     const gchar    **icons);
void             gtk_scale_button_set_icons        (GtkScaleButton  *button,                                                     const gchar    **icons);
gdouble          gtk_scale_button_get_value        (GtkScaleButton  *button);
void             gtk_scale_button_set_value        (GtkScaleButton  *button,                                                     gdouble          value);
GtkAdjustment *  gtk_scale_button_get_adjustment   (GtkScaleButton  *button);
void             gtk_scale_button_set_adjustment   (GtkScaleButton  *button,                                                     GtkAdjustment   *adjustment);
GtkWidget *      gtk_scale_button_get_plus_button  (GtkScaleButton  *button);
GtkWidget *      gtk_scale_button_get_minus_button (GtkScaleButton  *button);
GtkWidget *      gtk_scale_button_get_popup        (GtkScaleButton  *button);
GType         gtk_im_multicontext_get_type (void) ;
GtkIMContext *gtk_im_multicontext_new      (void);
void          gtk_im_multicontext_append_menuitems (GtkIMMulticontext *context, 						    GtkMenuShell      *menushell);
const char  * gtk_im_multicontext_get_context_id   (GtkIMMulticontext *context);
void          gtk_im_multicontext_set_context_id   (GtkIMMulticontext *context,                                                     const char        *context_id); 
GType            gtk_cell_renderer_spinner_get_type (void) ;
GtkCellRenderer *gtk_cell_renderer_spinner_new      (void);
GType      gtk_check_button_get_type       (void) ;
GtkWidget* gtk_check_button_new               (void);
GtkWidget* gtk_check_button_new_with_label    (const gchar *label);
GtkWidget* gtk_check_button_new_with_mnemonic (const gchar *label);
void _gtk_check_button_get_props (GtkCheckButton *check_button, 				  gint           *indicator_size, 				  gint           *indicator_spacing);
GType	   gtk_calendar_get_type	(void) ;
GtkWidget* gtk_calendar_new		(void);
void       gtk_calendar_select_month	(GtkCalendar *calendar, 					 guint	      month, 					 guint	      year);
void	   gtk_calendar_select_day	(GtkCalendar *calendar, 					 guint	      day);
void       gtk_calendar_mark_day	(GtkCalendar *calendar, 					 guint	      day);
void       gtk_calendar_unmark_day	(GtkCalendar *calendar, 					 guint	      day);
void	   gtk_calendar_clear_marks	(GtkCalendar *calendar);
void	   gtk_calendar_set_display_options (GtkCalendar    	      *calendar, 					     GtkCalendarDisplayOptions flags);
GtkCalendarDisplayOptions           gtk_calendar_get_display_options (GtkCalendar   	      *calendar);
void	   gtk_calendar_get_date	(GtkCalendar *calendar,  					 guint	     *year, 					 guint	     *month, 					 guint	     *day);
void       gtk_calendar_set_detail_func (GtkCalendar           *calendar,                                          GtkCalendarDetailFunc  func,                                          gpointer               data,                                          GDestroyNotify         destroy);
void       gtk_calendar_set_detail_width_chars (GtkCalendar    *calendar,                                                 gint            chars);
void       gtk_calendar_set_detail_height_rows (GtkCalendar    *calendar,                                                 gint            rows);
gint       gtk_calendar_get_detail_width_chars (GtkCalendar    *calendar);
gint       gtk_calendar_get_detail_height_rows (GtkCalendar    *calendar);
gboolean   gtk_calendar_get_day_is_marked      (GtkCalendar    *calendar,                                                 guint           day);
GType          gtk_icon_view_get_type          (void) ;
GtkWidget *    gtk_icon_view_new               (void);
GtkWidget *    gtk_icon_view_new_with_area     (GtkCellArea    *area);
GtkWidget *    gtk_icon_view_new_with_model    (GtkTreeModel   *model);
void           gtk_icon_view_set_model         (GtkIconView    *icon_view,  					        GtkTreeModel   *model);
GtkTreeModel * gtk_icon_view_get_model         (GtkIconView    *icon_view);
void           gtk_icon_view_set_text_column   (GtkIconView    *icon_view, 	 	 			        gint            column);
gint           gtk_icon_view_get_text_column   (GtkIconView    *icon_view);
void           gtk_icon_view_set_markup_column (GtkIconView    *icon_view, 					        gint            column);
gint           gtk_icon_view_get_markup_column (GtkIconView    *icon_view);
void           gtk_icon_view_set_pixbuf_column (GtkIconView    *icon_view, 					        gint            column);
gint           gtk_icon_view_get_pixbuf_column (GtkIconView    *icon_view);
void           gtk_icon_view_set_item_orientation (GtkIconView    *icon_view,                                                    GtkOrientation  orientation);
GtkOrientation gtk_icon_view_get_item_orientation (GtkIconView    *icon_view);
void           gtk_icon_view_set_columns       (GtkIconView    *icon_view, 		 			        gint            columns);
gint           gtk_icon_view_get_columns       (GtkIconView    *icon_view);
void           gtk_icon_view_set_item_width    (GtkIconView    *icon_view, 					        gint            item_width);
gint           gtk_icon_view_get_item_width    (GtkIconView    *icon_view);
void           gtk_icon_view_set_spacing       (GtkIconView    *icon_view,  		 			        gint            spacing);
gint           gtk_icon_view_get_spacing       (GtkIconView    *icon_view);
void           gtk_icon_view_set_row_spacing   (GtkIconView    *icon_view,  					        gint            row_spacing);
gint           gtk_icon_view_get_row_spacing   (GtkIconView    *icon_view);
void           gtk_icon_view_set_column_spacing (GtkIconView    *icon_view,  					        gint            column_spacing);
gint           gtk_icon_view_get_column_spacing (GtkIconView    *icon_view);
void           gtk_icon_view_set_margin        (GtkIconView    *icon_view,  					        gint            margin);
gint           gtk_icon_view_get_margin        (GtkIconView    *icon_view);
void           gtk_icon_view_set_item_padding  (GtkIconView    *icon_view,  					        gint            item_padding);
gint           gtk_icon_view_get_item_padding  (GtkIconView    *icon_view);
GtkTreePath *  gtk_icon_view_get_path_at_pos   (GtkIconView     *icon_view, 						gint             x, 						gint             y);
gboolean       gtk_icon_view_get_item_at_pos   (GtkIconView     *icon_view, 						gint              x, 						gint              y, 						GtkTreePath     **path, 						GtkCellRenderer **cell);
gboolean       gtk_icon_view_get_visible_range (GtkIconView      *icon_view, 						GtkTreePath     **start_path, 						GtkTreePath     **end_path);
void           gtk_icon_view_selected_foreach   (GtkIconView            *icon_view, 						 GtkIconViewForeachFunc  func, 						 gpointer                data);
void           gtk_icon_view_set_selection_mode (GtkIconView            *icon_view, 						 GtkSelectionMode        mode);
GtkSelectionMode gtk_icon_view_get_selection_mode (GtkIconView            *icon_view);
void             gtk_icon_view_select_path        (GtkIconView            *icon_view, 						   GtkTreePath            *path);
void             gtk_icon_view_unselect_path      (GtkIconView            *icon_view, 						   GtkTreePath            *path);
gboolean         gtk_icon_view_path_is_selected   (GtkIconView            *icon_view, 						   GtkTreePath            *path);
gint             gtk_icon_view_get_item_row       (GtkIconView            *icon_view,                                                    GtkTreePath            *path);
gint             gtk_icon_view_get_item_column    (GtkIconView            *icon_view,                                                    GtkTreePath            *path);
GList           *gtk_icon_view_get_selected_items (GtkIconView            *icon_view);
void             gtk_icon_view_select_all         (GtkIconView            *icon_view);
void             gtk_icon_view_unselect_all       (GtkIconView            *icon_view);
void             gtk_icon_view_item_activated     (GtkIconView            *icon_view, 						   GtkTreePath            *path);
void             gtk_icon_view_set_cursor         (GtkIconView            *icon_view, 						   GtkTreePath            *path, 						   GtkCellRenderer        *cell, 						   gboolean                start_editing);
gboolean         gtk_icon_view_get_cursor         (GtkIconView            *icon_view, 						   GtkTreePath           **path, 						   GtkCellRenderer       **cell);
void             gtk_icon_view_scroll_to_path     (GtkIconView            *icon_view,                                                    GtkTreePath            *path, 						   gboolean                use_align, 						   gfloat                  row_align,                                                    gfloat                  col_align);
void                   gtk_icon_view_enable_model_drag_source (GtkIconView              *icon_view, 							       GdkModifierType           start_button_mask, 							       const GtkTargetEntry     *targets, 							       gint                      n_targets, 							       GdkDragAction             actions);
void                   gtk_icon_view_enable_model_drag_dest   (GtkIconView              *icon_view, 							       const GtkTargetEntry     *targets, 							       gint                      n_targets, 							       GdkDragAction             actions);
void                   gtk_icon_view_unset_model_drag_source  (GtkIconView              *icon_view);
void                   gtk_icon_view_unset_model_drag_dest    (GtkIconView              *icon_view);
void                   gtk_icon_view_set_reorderable          (GtkIconView              *icon_view, 							       gboolean                  reorderable);
gboolean               gtk_icon_view_get_reorderable          (GtkIconView              *icon_view);
void                   gtk_icon_view_set_drag_dest_item       (GtkIconView              *icon_view, 							       GtkTreePath              *path, 							       GtkIconViewDropPosition   pos);
void                   gtk_icon_view_get_drag_dest_item       (GtkIconView              *icon_view, 							       GtkTreePath             **path, 							       GtkIconViewDropPosition  *pos);
gboolean               gtk_icon_view_get_dest_item_at_pos     (GtkIconView              *icon_view, 							       gint                      drag_x, 							       gint                      drag_y, 							       GtkTreePath             **path, 							       GtkIconViewDropPosition  *pos);
cairo_surface_t       *gtk_icon_view_create_drag_icon         (GtkIconView              *icon_view, 							       GtkTreePath              *path);
void    gtk_icon_view_convert_widget_to_bin_window_coords     (GtkIconView *icon_view,                                                                gint         wx,                                                                gint         wy,                                                                gint        *bx,                                                                gint        *by);
void    gtk_icon_view_set_tooltip_item                        (GtkIconView     *icon_view,                                                                GtkTooltip      *tooltip,                                                                GtkTreePath     *path);
void    gtk_icon_view_set_tooltip_cell                        (GtkIconView     *icon_view,                                                                GtkTooltip      *tooltip,                                                                GtkTreePath     *path,                                                                GtkCellRenderer *cell);
gboolean gtk_icon_view_get_tooltip_context                    (GtkIconView       *icon_view,                                                                gint              *x,                                                                gint              *y,                                                                gboolean           keyboard_tip,                                                                GtkTreeModel     **model,                                                                GtkTreePath      **path,                                                                GtkTreeIter       *iter);
void     gtk_icon_view_set_tooltip_column                     (GtkIconView       *icon_view,                                                                gint               column);
gint     gtk_icon_view_get_tooltip_column                     (GtkIconView       *icon_view);
GType        gtk_cell_area_context_get_type              (void) ;
GtkCellArea *gtk_cell_area_context_get_area                        (GtkCellAreaContext *context);
void         gtk_cell_area_context_allocate                        (GtkCellAreaContext *context,                                                                     gint                width,                                                                     gint                height);
void         gtk_cell_area_context_reset                           (GtkCellAreaContext *context);
void         gtk_cell_area_context_get_preferred_width            (GtkCellAreaContext *context,                                                                    gint               *minimum_width,                                                                    gint               *natural_width);
void         gtk_cell_area_context_get_preferred_height           (GtkCellAreaContext *context,                                                                    gint               *minimum_height,                                                                    gint               *natural_height);
void         gtk_cell_area_context_get_preferred_height_for_width (GtkCellAreaContext *context,                                                                    gint                width,                                                                    gint               *minimum_height,                                                                    gint               *natural_height);
void         gtk_cell_area_context_get_preferred_width_for_height (GtkCellAreaContext *context,                                                                    gint                height,                                                                    gint               *minimum_width,                                                                    gint               *natural_width);
void         gtk_cell_area_context_get_allocation                 (GtkCellAreaContext *context,                                                                    gint               *width,                                                                    gint               *height);
void         gtk_cell_area_context_push_preferred_width  (GtkCellAreaContext *context,                                                           gint                minimum_width,                                                           gint                natural_width);
void         gtk_cell_area_context_push_preferred_height (GtkCellAreaContext *context,                                                           gint                minimum_height,                                                           gint                natural_height);
GType gtk_style_provider_get_type (void) ;
GtkStyleProperties *gtk_style_provider_get_style (GtkStyleProvider *provider,                                                   GtkWidgetPath    *path);
gboolean gtk_style_provider_get_style_property (GtkStyleProvider *provider,                                                 GtkWidgetPath    *path,                                                 GtkStateFlags     state,                                                 GParamSpec       *pspec,                                                 GValue           *value);
GtkIconFactory * gtk_style_provider_get_icon_factory (GtkStyleProvider *provider, 						      GtkWidgetPath    *path);
GType          gtk_button_get_type          (void) ;
GtkWidget*     gtk_button_new               (void);
GtkWidget*     gtk_button_new_with_label    (const gchar    *label);
GtkWidget*     gtk_button_new_from_stock    (const gchar    *stock_id);
GtkWidget*     gtk_button_new_with_mnemonic (const gchar    *label);
void           gtk_button_clicked           (GtkButton      *button);
void           gtk_button_pressed           (GtkButton      *button);
void           gtk_button_released          (GtkButton      *button);
void           gtk_button_enter             (GtkButton      *button);
void           gtk_button_leave             (GtkButton      *button);
void                  gtk_button_set_relief         (GtkButton      *button, 						     GtkReliefStyle  newstyle);
GtkReliefStyle        gtk_button_get_relief         (GtkButton      *button);
void                  gtk_button_set_label          (GtkButton      *button, 						     const gchar    *label);
const gchar *         gtk_button_get_label          (GtkButton      *button);
void                  gtk_button_set_use_underline  (GtkButton      *button, 						     gboolean        use_underline);
gboolean              gtk_button_get_use_underline  (GtkButton      *button);
void                  gtk_button_set_use_stock      (GtkButton      *button, 						     gboolean        use_stock);
gboolean              gtk_button_get_use_stock      (GtkButton      *button);
void                  gtk_button_set_focus_on_click (GtkButton      *button, 						     gboolean        focus_on_click);
gboolean              gtk_button_get_focus_on_click (GtkButton      *button);
void                  gtk_button_set_alignment      (GtkButton      *button, 						     gfloat          xalign, 						     gfloat          yalign);
void                  gtk_button_get_alignment      (GtkButton      *button, 						     gfloat         *xalign, 						     gfloat         *yalign);
void                  gtk_button_set_image          (GtkButton      *button, 					             GtkWidget      *image);
GtkWidget*            gtk_button_get_image          (GtkButton      *button);
void                  gtk_button_set_image_position (GtkButton      *button, 						     GtkPositionType position);
GtkPositionType       gtk_button_get_image_position (GtkButton      *button);
GdkWindow*            gtk_button_get_event_window   (GtkButton      *button);
GType    gtk_menu_shell_get_type       (void) ;
void     gtk_menu_shell_append         (GtkMenuShell *menu_shell,                                         GtkWidget    *child);
void     gtk_menu_shell_prepend        (GtkMenuShell *menu_shell,                                         GtkWidget    *child);
void     gtk_menu_shell_insert         (GtkMenuShell *menu_shell,                                         GtkWidget    *child,                                         gint          position);
void     gtk_menu_shell_deactivate     (GtkMenuShell *menu_shell);
void     gtk_menu_shell_select_item    (GtkMenuShell *menu_shell,                                         GtkWidget    *menu_item);
void     gtk_menu_shell_deselect       (GtkMenuShell *menu_shell);
void     gtk_menu_shell_activate_item  (GtkMenuShell *menu_shell,                                         GtkWidget    *menu_item,                                         gboolean      force_deactivate);
void     gtk_menu_shell_select_first   (GtkMenuShell *menu_shell,                                         gboolean      search_sensitive);
void     gtk_menu_shell_cancel         (GtkMenuShell *menu_shell);
gboolean gtk_menu_shell_get_take_focus (GtkMenuShell *menu_shell);
void     gtk_menu_shell_set_take_focus (GtkMenuShell *menu_shell,                                         gboolean      take_focus);
GtkWidget *gtk_menu_shell_get_selected_item (GtkMenuShell *menu_shell);
GtkWidget *gtk_menu_shell_get_parent_shell  (GtkMenuShell *menu_shell);
GType                 gtk_label_get_type          (void) ;
GtkWidget*            gtk_label_new               (const gchar   *str);
GtkWidget*            gtk_label_new_with_mnemonic (const gchar   *str);
void                  gtk_label_set_text          (GtkLabel      *label, 						   const gchar   *str);
const gchar*          gtk_label_get_text          (GtkLabel      *label);
void                  gtk_label_set_attributes    (GtkLabel      *label, 						   PangoAttrList *attrs);
PangoAttrList        *gtk_label_get_attributes    (GtkLabel      *label);
void                  gtk_label_set_label         (GtkLabel      *label, 						   const gchar   *str);
const gchar *         gtk_label_get_label         (GtkLabel      *label);
void                  gtk_label_set_markup        (GtkLabel      *label, 						   const gchar   *str);
void                  gtk_label_set_use_markup    (GtkLabel      *label, 						   gboolean       setting);
gboolean              gtk_label_get_use_markup    (GtkLabel      *label);
void                  gtk_label_set_use_underline (GtkLabel      *label, 						   gboolean       setting);
gboolean              gtk_label_get_use_underline (GtkLabel      *label);
void     gtk_label_set_markup_with_mnemonic       (GtkLabel         *label, 						   const gchar      *str);
guint    gtk_label_get_mnemonic_keyval            (GtkLabel         *label);
void     gtk_label_set_mnemonic_widget            (GtkLabel         *label, 						   GtkWidget        *widget);
GtkWidget *gtk_label_get_mnemonic_widget          (GtkLabel         *label);
void     gtk_label_set_text_with_mnemonic         (GtkLabel         *label, 						   const gchar      *str);
void     gtk_label_set_justify                    (GtkLabel         *label, 						   GtkJustification  jtype);
GtkJustification gtk_label_get_justify            (GtkLabel         *label);
void     gtk_label_set_ellipsize		  (GtkLabel         *label, 						   PangoEllipsizeMode mode);
PangoEllipsizeMode gtk_label_get_ellipsize        (GtkLabel         *label);
void     gtk_label_set_width_chars		  (GtkLabel         *label, 						   gint              n_chars);
gint     gtk_label_get_width_chars                (GtkLabel         *label);
void     gtk_label_set_max_width_chars    	  (GtkLabel         *label, 					  	   gint              n_chars);
gint     gtk_label_get_max_width_chars  	  (GtkLabel         *label);
void     gtk_label_set_pattern                    (GtkLabel         *label, 						   const gchar      *pattern);
void     gtk_label_set_line_wrap                  (GtkLabel         *label, 						   gboolean          wrap);
gboolean gtk_label_get_line_wrap                  (GtkLabel         *label);
void     gtk_label_set_line_wrap_mode             (GtkLabel         *label, 						   PangoWrapMode     wrap_mode);
PangoWrapMode gtk_label_get_line_wrap_mode        (GtkLabel         *label);
void     gtk_label_set_selectable                 (GtkLabel         *label, 						   gboolean          setting);
gboolean gtk_label_get_selectable                 (GtkLabel         *label);
void     gtk_label_set_angle                      (GtkLabel         *label, 						   gdouble           angle);
gdouble  gtk_label_get_angle                      (GtkLabel         *label);
void     gtk_label_select_region                  (GtkLabel         *label, 						   gint              start_offset, 						   gint              end_offset);
gboolean gtk_label_get_selection_bounds           (GtkLabel         *label,                                                    gint             *start,                                                    gint             *end);
PangoLayout *gtk_label_get_layout         (GtkLabel *label);
void         gtk_label_get_layout_offsets (GtkLabel *label,                                            gint     *x,                                            gint     *y);
void         gtk_label_set_single_line_mode  (GtkLabel *label,                                               gboolean single_line_mode);
gboolean     gtk_label_get_single_line_mode  (GtkLabel *label);
const gchar *gtk_label_get_current_uri (GtkLabel *label);
void         gtk_label_set_track_visited_links  (GtkLabel *label,                                                  gboolean  track_links);
gboolean     gtk_label_get_track_visited_links  (GtkLabel *label);
void _gtk_label_mnemonics_visible_apply_recursively (GtkWidget *widget,                                                      gboolean   mnemonics_visible);
gint _gtk_label_get_cursor_position (GtkLabel *label);
gint _gtk_label_get_selection_bound (GtkLabel *label);
GType                 gtk_link_button_get_type          (void) ;
GtkWidget *           gtk_link_button_new               (const gchar   *uri);
GtkWidget *           gtk_link_button_new_with_label    (const gchar   *uri, 						         const gchar   *label);
const gchar *         gtk_link_button_get_uri           (GtkLinkButton *link_button);
void                  gtk_link_button_set_uri           (GtkLinkButton *link_button, 						         const gchar   *uri);
gboolean              gtk_link_button_get_visited       (GtkLinkButton *link_button);
void                  gtk_link_button_set_visited       (GtkLinkButton *link_button,                                                          gboolean       visited);
GType          gtk_print_context_get_type (void) ;
cairo_t      *gtk_print_context_get_cairo_context    (GtkPrintContext *context);
GtkPageSetup *gtk_print_context_get_page_setup       (GtkPrintContext *context);
gdouble       gtk_print_context_get_width            (GtkPrintContext *context);
gdouble       gtk_print_context_get_height           (GtkPrintContext *context);
gdouble       gtk_print_context_get_dpi_x            (GtkPrintContext *context);
gdouble       gtk_print_context_get_dpi_y            (GtkPrintContext *context);
gboolean      gtk_print_context_get_hard_margins     (GtkPrintContext *context, 						      gdouble         *top, 						      gdouble         *bottom, 						      gdouble         *left, 						      gdouble         *right);
PangoFontMap *gtk_print_context_get_pango_fontmap    (GtkPrintContext *context);
PangoContext *gtk_print_context_create_pango_context (GtkPrintContext *context);
PangoLayout  *gtk_print_context_create_pango_layout  (GtkPrintContext *context);
void         gtk_print_context_set_cairo_context     (GtkPrintContext *context, 						      cairo_t         *cr, 						      double           dpi_x, 						      double           dpi_y);
GType    gtk_im_context_get_type            (void) ;
void     gtk_im_context_set_client_window   (GtkIMContext       *context, 					     GdkWindow          *window);
void     gtk_im_context_get_preedit_string  (GtkIMContext       *context, 					     gchar             **str, 					     PangoAttrList     **attrs, 					     gint               *cursor_pos);
gboolean gtk_im_context_filter_keypress     (GtkIMContext       *context, 					     GdkEventKey        *event);
void     gtk_im_context_focus_in            (GtkIMContext       *context);
void     gtk_im_context_focus_out           (GtkIMContext       *context);
void     gtk_im_context_reset               (GtkIMContext       *context);
void     gtk_im_context_set_cursor_location (GtkIMContext       *context, 					     const GdkRectangle *area);
void     gtk_im_context_set_use_preedit     (GtkIMContext       *context, 					     gboolean            use_preedit);
void     gtk_im_context_set_surrounding     (GtkIMContext       *context, 					     const gchar        *text, 					     gint                len, 					     gint                cursor_index);
gboolean gtk_im_context_get_surrounding     (GtkIMContext       *context, 					     gchar             **text, 					     gint               *cursor_index);
gboolean gtk_im_context_delete_surrounding  (GtkIMContext       *context, 					     gint                offset, 					     gint                n_chars);
GType      gtk_aspect_frame_get_type   (void) ;
GtkWidget* gtk_aspect_frame_new        (const gchar     *label, 					gfloat           xalign, 					gfloat           yalign, 					gfloat           ratio, 					gboolean         obey_child);
void       gtk_aspect_frame_set        (GtkAspectFrame  *aspect_frame, 					gfloat           xalign, 					gfloat           yalign, 					gfloat           ratio, 					gboolean         obey_child);
GType               gtk_entry_completion_get_type               (void) ;
GtkEntryCompletion *gtk_entry_completion_new                    (void);
GtkEntryCompletion *gtk_entry_completion_new_with_area          (GtkCellArea                 *area);
GtkWidget          *gtk_entry_completion_get_entry              (GtkEntryCompletion          *completion);
void                gtk_entry_completion_set_model              (GtkEntryCompletion          *completion,                                                                  GtkTreeModel                *model);
GtkTreeModel       *gtk_entry_completion_get_model              (GtkEntryCompletion          *completion);
void                gtk_entry_completion_set_match_func         (GtkEntryCompletion          *completion,                                                                  GtkEntryCompletionMatchFunc  func,                                                                  gpointer                     func_data,                                                                  GDestroyNotify               func_notify);
void                gtk_entry_completion_set_minimum_key_length (GtkEntryCompletion          *completion,                                                                  gint                         length);
gint                gtk_entry_completion_get_minimum_key_length (GtkEntryCompletion          *completion);
gchar *             gtk_entry_completion_compute_prefix         (GtkEntryCompletion          *completion,                                                                  const char                  *key);
void                gtk_entry_completion_complete               (GtkEntryCompletion          *completion);
void                gtk_entry_completion_insert_prefix          (GtkEntryCompletion          *completion);
void                gtk_entry_completion_insert_action_text     (GtkEntryCompletion          *completion,                                                                  gint                         index_,                                                                  const gchar                 *text);
void                gtk_entry_completion_insert_action_markup   (GtkEntryCompletion          *completion,                                                                  gint                         index_,                                                                  const gchar                 *markup);
void                gtk_entry_completion_delete_action          (GtkEntryCompletion          *completion,                                                                  gint                         index_);
void                gtk_entry_completion_set_inline_completion  (GtkEntryCompletion          *completion,                                                                  gboolean                     inline_completion);
gboolean            gtk_entry_completion_get_inline_completion  (GtkEntryCompletion          *completion);
void                gtk_entry_completion_set_inline_selection  (GtkEntryCompletion          *completion,                                                                  gboolean                     inline_selection);
gboolean            gtk_entry_completion_get_inline_selection  (GtkEntryCompletion          *completion);
void                gtk_entry_completion_set_popup_completion   (GtkEntryCompletion          *completion,                                                                  gboolean                     popup_completion);
gboolean            gtk_entry_completion_get_popup_completion   (GtkEntryCompletion          *completion);
void                gtk_entry_completion_set_popup_set_width    (GtkEntryCompletion          *completion,                                                                  gboolean                     popup_set_width);
gboolean            gtk_entry_completion_get_popup_set_width    (GtkEntryCompletion          *completion);
void                gtk_entry_completion_set_popup_single_match (GtkEntryCompletion          *completion,                                                                  gboolean                     popup_single_match);
gboolean            gtk_entry_completion_get_popup_single_match (GtkEntryCompletion          *completion);
const gchar         *gtk_entry_completion_get_completion_prefix (GtkEntryCompletion *completion);
void                gtk_entry_completion_set_text_column        (GtkEntryCompletion          *completion,                                                                  gint                         column);
gint                gtk_entry_completion_get_text_column        (GtkEntryCompletion          *completion);
GType                          gtk_tool_palette_get_type              (void) ;
GtkWidget*                     gtk_tool_palette_new                   (void);
void                           gtk_tool_palette_set_group_position    (GtkToolPalette            *palette,                                                                        GtkToolItemGroup          *group,                                                                        gint                       position);
void                           gtk_tool_palette_set_exclusive         (GtkToolPalette            *palette,                                                                        GtkToolItemGroup          *group,                                                                        gboolean                   exclusive);
void                           gtk_tool_palette_set_expand            (GtkToolPalette            *palette,                                                                        GtkToolItemGroup          *group,                                                                        gboolean                   expand);
gint                           gtk_tool_palette_get_group_position    (GtkToolPalette            *palette,                                                                        GtkToolItemGroup          *group);
gboolean                       gtk_tool_palette_get_exclusive         (GtkToolPalette            *palette,                                                                        GtkToolItemGroup          *group);
gboolean                       gtk_tool_palette_get_expand            (GtkToolPalette            *palette,                                                                        GtkToolItemGroup          *group);
void                           gtk_tool_palette_set_icon_size         (GtkToolPalette            *palette,                                                                        GtkIconSize                icon_size);
void                           gtk_tool_palette_unset_icon_size       (GtkToolPalette            *palette);
void                           gtk_tool_palette_set_style             (GtkToolPalette            *palette,                                                                        GtkToolbarStyle            style);
void                           gtk_tool_palette_unset_style           (GtkToolPalette            *palette);
GtkIconSize                    gtk_tool_palette_get_icon_size         (GtkToolPalette            *palette);
GtkToolbarStyle                gtk_tool_palette_get_style             (GtkToolPalette            *palette);
GtkToolItem*                   gtk_tool_palette_get_drop_item         (GtkToolPalette            *palette,                                                                        gint                       x,                                                                        gint                       y);
GtkToolItemGroup*              gtk_tool_palette_get_drop_group        (GtkToolPalette            *palette,                                                                        gint                       x,                                                                        gint                       y);
GtkWidget*                     gtk_tool_palette_get_drag_item         (GtkToolPalette            *palette,                                                                        const GtkSelectionData    *selection);
void                           gtk_tool_palette_set_drag_source       (GtkToolPalette            *palette,                                                                        GtkToolPaletteDragTargets  targets);
void                           gtk_tool_palette_add_drag_dest         (GtkToolPalette            *palette,                                                                        GtkWidget                 *widget,                                                                        GtkDestDefaults            flags,                                                                        GtkToolPaletteDragTargets  targets,                                                                        GdkDragAction              actions);
const GtkTargetEntry*          gtk_tool_palette_get_drag_target_item  (void) ;
const GtkTargetEntry*          gtk_tool_palette_get_drag_target_group (void) ;
GType            gtk_toggle_action_get_type          (void) ;
GtkToggleAction *gtk_toggle_action_new               (const gchar     *name,                                                       const gchar     *label,                                                       const gchar     *tooltip,                                                       const gchar     *stock_id);
void             gtk_toggle_action_toggled           (GtkToggleAction *action);
void             gtk_toggle_action_set_active        (GtkToggleAction *action,                                                       gboolean         is_active);
gboolean         gtk_toggle_action_get_active        (GtkToggleAction *action);
void             gtk_toggle_action_set_draw_as_radio (GtkToggleAction *action,                                                       gboolean         draw_as_radio);
gboolean         gtk_toggle_action_get_draw_as_radio (GtkToggleAction *action);
void             _gtk_toggle_action_set_active       (GtkToggleAction *toggle_action,                                                       gboolean         is_active);
GType         gtk_tree_model_filter_get_type                   (void) ;
GtkTreeModel *gtk_tree_model_filter_new                        (GtkTreeModel                 *child_model,                                                                 GtkTreePath                  *root);
void          gtk_tree_model_filter_set_visible_func           (GtkTreeModelFilter           *filter,                                                                 GtkTreeModelFilterVisibleFunc func,                                                                 gpointer                      data,                                                                 GDestroyNotify                destroy);
void          gtk_tree_model_filter_set_modify_func            (GtkTreeModelFilter           *filter,                                                                 gint                          n_columns,                                                                 GType                        *types,                                                                 GtkTreeModelFilterModifyFunc  func,                                                                 gpointer                      data,                                                                 GDestroyNotify                destroy);
void          gtk_tree_model_filter_set_visible_column         (GtkTreeModelFilter           *filter,                                                                 gint                          column);
GtkTreeModel *gtk_tree_model_filter_get_model                  (GtkTreeModelFilter           *filter);
gboolean      gtk_tree_model_filter_convert_child_iter_to_iter (GtkTreeModelFilter           *filter,                                                                 GtkTreeIter                  *filter_iter,                                                                 GtkTreeIter                  *child_iter);
void          gtk_tree_model_filter_convert_iter_to_child_iter (GtkTreeModelFilter           *filter,                                                                 GtkTreeIter                  *child_iter,                                                                 GtkTreeIter                  *filter_iter);
GtkTreePath  *gtk_tree_model_filter_convert_child_path_to_path (GtkTreeModelFilter           *filter,                                                                 GtkTreePath                  *child_path);
GtkTreePath  *gtk_tree_model_filter_convert_path_to_child_path (GtkTreeModelFilter           *filter,                                                                 GtkTreePath                  *filter_path);
void          gtk_tree_model_filter_refilter                   (GtkTreeModelFilter           *filter);
void          gtk_tree_model_filter_clear_cache                (GtkTreeModelFilter           *filter);
GType      gtk_plug_get_type              (void) ;
void       gtk_plug_construct             (GtkPlug    *plug,                                            Window      socket_id);
GtkWidget *gtk_plug_new                   (Window      socket_id);
void       gtk_plug_construct_for_display (GtkPlug    *plug,                                            GdkDisplay *display,                                            Window      socket_id);
GtkWidget *gtk_plug_new_for_display       (GdkDisplay *display,                                            Window      socket_id);
Window     gtk_plug_get_id                (GtkPlug    *plug);
gboolean   gtk_plug_get_embedded          (GtkPlug    *plug);
GdkWindow *gtk_plug_get_socket_window     (GtkPlug    *plug);
GType         gtk_combo_box_text_get_type        (void) ;
GtkWidget*    gtk_combo_box_text_new             (void);
GtkWidget*    gtk_combo_box_text_new_with_entry  (void);
void          gtk_combo_box_text_append_text     (GtkComboBoxText     *combo_box,                                                   const gchar         *text);
void          gtk_combo_box_text_insert_text     (GtkComboBoxText     *combo_box,                                                   gint                 position,                                                   const gchar         *text);
void          gtk_combo_box_text_prepend_text    (GtkComboBoxText     *combo_box,                                                   const gchar         *text);
void          gtk_combo_box_text_remove          (GtkComboBoxText     *combo_box,                                                   gint                 position);
void          gtk_combo_box_text_remove_all      (GtkComboBoxText     *combo_box);
gchar        *gtk_combo_box_text_get_active_text (GtkComboBoxText     *combo_box);
void          gtk_combo_box_text_insert          (GtkComboBoxText     *combo_box,                                                   gint                 position,                                                   const gchar         *id,                                                   const gchar         *text);
void          gtk_combo_box_text_append          (GtkComboBoxText     *combo_box,                                                   const gchar         *id,                                                   const gchar         *text);
void          gtk_combo_box_text_prepend         (GtkComboBoxText     *combo_box,                                                   const gchar         *id,                                                   const gchar         *text);
GType gtk_file_filter_get_type (void) ;
GtkFileFilter *       gtk_file_filter_new      (void);
void                  gtk_file_filter_set_name (GtkFileFilter *filter, 						const gchar   *name);
const gchar *         gtk_file_filter_get_name (GtkFileFilter *filter);
void gtk_file_filter_add_mime_type      (GtkFileFilter      *filter, 					 const gchar        *mime_type);
void gtk_file_filter_add_pattern        (GtkFileFilter      *filter, 					 const gchar        *pattern);
void gtk_file_filter_add_pixbuf_formats (GtkFileFilter      *filter);
void gtk_file_filter_add_custom         (GtkFileFilter      *filter, 					 GtkFileFilterFlags  needed, 					 GtkFileFilterFunc   func, 					 gpointer            data, 					 GDestroyNotify      notify);
GtkFileFilterFlags gtk_file_filter_get_needed (GtkFileFilter           *filter);
gboolean           gtk_file_filter_filter     (GtkFileFilter           *filter, 					       const GtkFileFilterInfo *filter_info);
GtkTextBuffer *gtk_text_iter_get_buffer (const GtkTextIter *iter);
GtkTextIter *gtk_text_iter_copy     (const GtkTextIter *iter);
void         gtk_text_iter_free     (GtkTextIter       *iter);
void         gtk_text_iter_assign   (GtkTextIter       *iter,                                      const GtkTextIter *other);
GType        gtk_text_iter_get_type (void) ;
gint gtk_text_iter_get_offset      (const GtkTextIter *iter);
gint gtk_text_iter_get_line        (const GtkTextIter *iter);
gint gtk_text_iter_get_line_offset (const GtkTextIter *iter);
gint gtk_text_iter_get_line_index  (const GtkTextIter *iter);
gint gtk_text_iter_get_visible_line_offset (const GtkTextIter *iter);
gint gtk_text_iter_get_visible_line_index (const GtkTextIter *iter);
gunichar gtk_text_iter_get_char          (const GtkTextIter  *iter);
gchar   *gtk_text_iter_get_slice         (const GtkTextIter  *start,                                           const GtkTextIter  *end);
gchar   *gtk_text_iter_get_text          (const GtkTextIter  *start,                                           const GtkTextIter  *end);
gchar   *gtk_text_iter_get_visible_slice (const GtkTextIter  *start,                                           const GtkTextIter  *end);
gchar   *gtk_text_iter_get_visible_text  (const GtkTextIter  *start,                                           const GtkTextIter  *end);
GdkPixbuf* gtk_text_iter_get_pixbuf (const GtkTextIter *iter);
GSList  *  gtk_text_iter_get_marks  (const GtkTextIter *iter);
GtkTextChildAnchor* gtk_text_iter_get_child_anchor (const GtkTextIter *iter);
GSList  *gtk_text_iter_get_toggled_tags  (const GtkTextIter  *iter,                                           gboolean            toggled_on);
gboolean gtk_text_iter_begins_tag        (const GtkTextIter  *iter,                                           GtkTextTag         *tag);
gboolean gtk_text_iter_ends_tag          (const GtkTextIter  *iter,                                           GtkTextTag         *tag);
gboolean gtk_text_iter_toggles_tag       (const GtkTextIter  *iter,                                           GtkTextTag         *tag);
gboolean gtk_text_iter_has_tag           (const GtkTextIter   *iter,                                           GtkTextTag          *tag);
GSList  *gtk_text_iter_get_tags          (const GtkTextIter   *iter);
gboolean gtk_text_iter_editable          (const GtkTextIter   *iter,                                           gboolean             default_setting);
gboolean gtk_text_iter_can_insert        (const GtkTextIter   *iter,                                           gboolean             default_editability);
gboolean gtk_text_iter_starts_word        (const GtkTextIter   *iter);
gboolean gtk_text_iter_ends_word          (const GtkTextIter   *iter);
gboolean gtk_text_iter_inside_word        (const GtkTextIter   *iter);
gboolean gtk_text_iter_starts_sentence    (const GtkTextIter   *iter);
gboolean gtk_text_iter_ends_sentence      (const GtkTextIter   *iter);
gboolean gtk_text_iter_inside_sentence    (const GtkTextIter   *iter);
gboolean gtk_text_iter_starts_line        (const GtkTextIter   *iter);
gboolean gtk_text_iter_ends_line          (const GtkTextIter   *iter);
gboolean gtk_text_iter_is_cursor_position (const GtkTextIter   *iter);
gint     gtk_text_iter_get_chars_in_line (const GtkTextIter   *iter);
gint     gtk_text_iter_get_bytes_in_line (const GtkTextIter   *iter);
gboolean       gtk_text_iter_get_attributes (const GtkTextIter *iter, 					     GtkTextAttributes *values);
PangoLanguage* gtk_text_iter_get_language   (const GtkTextIter *iter);
gboolean       gtk_text_iter_is_end         (const GtkTextIter *iter);
gboolean       gtk_text_iter_is_start       (const GtkTextIter *iter);
gboolean gtk_text_iter_forward_char         (GtkTextIter *iter);
gboolean gtk_text_iter_backward_char        (GtkTextIter *iter);
gboolean gtk_text_iter_forward_chars        (GtkTextIter *iter,                                              gint         count);
gboolean gtk_text_iter_backward_chars       (GtkTextIter *iter,                                              gint         count);
gboolean gtk_text_iter_forward_line         (GtkTextIter *iter);
gboolean gtk_text_iter_backward_line        (GtkTextIter *iter);
gboolean gtk_text_iter_forward_lines        (GtkTextIter *iter,                                              gint         count);
gboolean gtk_text_iter_backward_lines       (GtkTextIter *iter,                                              gint         count);
gboolean gtk_text_iter_forward_word_end     (GtkTextIter *iter);
gboolean gtk_text_iter_backward_word_start  (GtkTextIter *iter);
gboolean gtk_text_iter_forward_word_ends    (GtkTextIter *iter,                                              gint         count);
gboolean gtk_text_iter_backward_word_starts (GtkTextIter *iter,                                              gint         count);                                             
gboolean gtk_text_iter_forward_visible_line   (GtkTextIter *iter);
gboolean gtk_text_iter_backward_visible_line  (GtkTextIter *iter);
gboolean gtk_text_iter_forward_visible_lines  (GtkTextIter *iter,                                                gint         count);
gboolean gtk_text_iter_backward_visible_lines (GtkTextIter *iter,                                                gint         count);
gboolean gtk_text_iter_forward_visible_word_end     (GtkTextIter *iter);
gboolean gtk_text_iter_backward_visible_word_start  (GtkTextIter *iter);
gboolean gtk_text_iter_forward_visible_word_ends    (GtkTextIter *iter,                                              gint         count);
gboolean gtk_text_iter_backward_visible_word_starts (GtkTextIter *iter,                                              gint         count);
gboolean gtk_text_iter_forward_sentence_end     (GtkTextIter *iter);
gboolean gtk_text_iter_backward_sentence_start  (GtkTextIter *iter);
gboolean gtk_text_iter_forward_sentence_ends    (GtkTextIter *iter,                                                  gint         count);
gboolean gtk_text_iter_backward_sentence_starts (GtkTextIter *iter,                                                  gint         count);
gboolean gtk_text_iter_forward_cursor_position   (GtkTextIter *iter);
gboolean gtk_text_iter_backward_cursor_position  (GtkTextIter *iter);
gboolean gtk_text_iter_forward_cursor_positions  (GtkTextIter *iter,                                                   gint         count);
gboolean gtk_text_iter_backward_cursor_positions (GtkTextIter *iter,                                                   gint         count);
gboolean gtk_text_iter_forward_visible_cursor_position   (GtkTextIter *iter);
gboolean gtk_text_iter_backward_visible_cursor_position  (GtkTextIter *iter);
gboolean gtk_text_iter_forward_visible_cursor_positions  (GtkTextIter *iter,                                                           gint         count);
gboolean gtk_text_iter_backward_visible_cursor_positions (GtkTextIter *iter,                                                           gint         count);
void     gtk_text_iter_set_offset         (GtkTextIter *iter,                                            gint         char_offset);
void     gtk_text_iter_set_line           (GtkTextIter *iter,                                            gint         line_number);
void     gtk_text_iter_set_line_offset    (GtkTextIter *iter,                                            gint         char_on_line);
void     gtk_text_iter_set_line_index     (GtkTextIter *iter,                                            gint         byte_on_line);
void     gtk_text_iter_forward_to_end     (GtkTextIter *iter);
gboolean gtk_text_iter_forward_to_line_end (GtkTextIter *iter);
void     gtk_text_iter_set_visible_line_offset (GtkTextIter *iter,                                                 gint         char_on_line);
void     gtk_text_iter_set_visible_line_index  (GtkTextIter *iter,                                                 gint         byte_on_line);
gboolean gtk_text_iter_forward_to_tag_toggle (GtkTextIter *iter,                                               GtkTextTag  *tag);
gboolean gtk_text_iter_backward_to_tag_toggle (GtkTextIter *iter,                                                GtkTextTag  *tag);
gboolean gtk_text_iter_forward_find_char  (GtkTextIter          *iter,                                            GtkTextCharPredicate  pred,                                            gpointer              user_data,                                            const GtkTextIter    *limit);
gboolean gtk_text_iter_backward_find_char (GtkTextIter          *iter,                                            GtkTextCharPredicate  pred,                                            gpointer              user_data,                                            const GtkTextIter    *limit);
gboolean gtk_text_iter_forward_search  (const GtkTextIter *iter,                                         const gchar       *str,                                         GtkTextSearchFlags flags,                                         GtkTextIter       *match_start,                                         GtkTextIter       *match_end,                                         const GtkTextIter *limit);
gboolean gtk_text_iter_backward_search (const GtkTextIter *iter,                                         const gchar       *str,                                         GtkTextSearchFlags flags,                                         GtkTextIter       *match_start,                                         GtkTextIter       *match_end,                                         const GtkTextIter *limit);
gboolean gtk_text_iter_equal           (const GtkTextIter *lhs,                                         const GtkTextIter *rhs);
gint     gtk_text_iter_compare         (const GtkTextIter *lhs,                                         const GtkTextIter *rhs);
gboolean gtk_text_iter_in_range        (const GtkTextIter *iter,                                         const GtkTextIter *start,                                         const GtkTextIter *end);
void     gtk_text_iter_order           (GtkTextIter *first,                                         GtkTextIter *second);
GType      gtk_overlay_get_type    (void) ;
GtkWidget *gtk_overlay_new         (void);
void       gtk_overlay_add_overlay (GtkOverlay *overlay,                                     GtkWidget  *widget);
GType         gtk_tree_store_get_type         (void) ;
GtkTreeStore *gtk_tree_store_new              (gint          n_columns, 					       ...);
GtkTreeStore *gtk_tree_store_newv             (gint          n_columns, 					       GType        *types);
void          gtk_tree_store_set_column_types (GtkTreeStore *tree_store, 					       gint          n_columns, 					       GType        *types);
void          gtk_tree_store_set_value        (GtkTreeStore *tree_store, 					       GtkTreeIter  *iter, 					       gint          column, 					       GValue       *value);
void          gtk_tree_store_set              (GtkTreeStore *tree_store, 					       GtkTreeIter  *iter, 					       ...);
void          gtk_tree_store_set_valuesv      (GtkTreeStore *tree_store, 					       GtkTreeIter  *iter, 					       gint         *columns, 					       GValue       *values, 					       gint          n_values);
void          gtk_tree_store_set_valist       (GtkTreeStore *tree_store, 					       GtkTreeIter  *iter, 					       va_list       var_args);
gboolean      gtk_tree_store_remove           (GtkTreeStore *tree_store, 					       GtkTreeIter  *iter);
void          gtk_tree_store_insert           (GtkTreeStore *tree_store, 					       GtkTreeIter  *iter, 					       GtkTreeIter  *parent, 					       gint          position);
void          gtk_tree_store_insert_before    (GtkTreeStore *tree_store, 					       GtkTreeIter  *iter, 					       GtkTreeIter  *parent, 					       GtkTreeIter  *sibling);
void          gtk_tree_store_insert_after     (GtkTreeStore *tree_store, 					       GtkTreeIter  *iter, 					       GtkTreeIter  *parent, 					       GtkTreeIter  *sibling);
void          gtk_tree_store_insert_with_values (GtkTreeStore *tree_store, 						 GtkTreeIter  *iter, 						 GtkTreeIter  *parent, 						 gint          position, 						 ...);
void          gtk_tree_store_insert_with_valuesv (GtkTreeStore *tree_store, 						  GtkTreeIter  *iter, 						  GtkTreeIter  *parent, 						  gint          position, 						  gint         *columns, 						  GValue       *values, 						  gint          n_values);
void          gtk_tree_store_prepend          (GtkTreeStore *tree_store, 					       GtkTreeIter  *iter, 					       GtkTreeIter  *parent);
void          gtk_tree_store_append           (GtkTreeStore *tree_store, 					       GtkTreeIter  *iter, 					       GtkTreeIter  *parent);
gboolean      gtk_tree_store_is_ancestor      (GtkTreeStore *tree_store, 					       GtkTreeIter  *iter, 					       GtkTreeIter  *descendant);
gint          gtk_tree_store_iter_depth       (GtkTreeStore *tree_store, 					       GtkTreeIter  *iter);
void          gtk_tree_store_clear            (GtkTreeStore *tree_store);
gboolean      gtk_tree_store_iter_is_valid    (GtkTreeStore *tree_store,                                                GtkTreeIter  *iter);
void          gtk_tree_store_reorder          (GtkTreeStore *tree_store,                                                GtkTreeIter  *parent,                                                gint         *new_order);
void          gtk_tree_store_swap             (GtkTreeStore *tree_store,                                                GtkTreeIter  *a,                                                GtkTreeIter  *b);
void          gtk_tree_store_move_before      (GtkTreeStore *tree_store,                                                GtkTreeIter  *iter,                                                GtkTreeIter  *position);
void          gtk_tree_store_move_after       (GtkTreeStore *tree_store,                                                GtkTreeIter  *iter,                                                GtkTreeIter  *position);
GType		gtk_spin_button_get_type	   (void) ;
void		gtk_spin_button_configure	   (GtkSpinButton  *spin_button, 						    GtkAdjustment  *adjustment, 						    gdouble	    climb_rate, 						    guint	    digits);
GtkWidget*	gtk_spin_button_new		   (GtkAdjustment  *adjustment, 						    gdouble	    climb_rate, 						    guint	    digits);
GtkWidget*	gtk_spin_button_new_with_range	   (gdouble  min, 						    gdouble  max, 						    gdouble  step);
void		gtk_spin_button_set_adjustment	   (GtkSpinButton  *spin_button, 						    GtkAdjustment  *adjustment);
GtkAdjustment*	gtk_spin_button_get_adjustment	   (GtkSpinButton  *spin_button);
void		gtk_spin_button_set_digits	   (GtkSpinButton  *spin_button, 						    guint	    digits);
guint           gtk_spin_button_get_digits         (GtkSpinButton  *spin_button);
void		gtk_spin_button_set_increments	   (GtkSpinButton  *spin_button, 						    gdouble         step, 						    gdouble         page);
void            gtk_spin_button_get_increments     (GtkSpinButton  *spin_button, 						    gdouble        *step, 						    gdouble        *page);
void		gtk_spin_button_set_range	   (GtkSpinButton  *spin_button, 						    gdouble         min, 						    gdouble         max);
void            gtk_spin_button_get_range          (GtkSpinButton  *spin_button, 						    gdouble        *min, 						    gdouble        *max);
gdouble		gtk_spin_button_get_value          (GtkSpinButton  *spin_button);
gint		gtk_spin_button_get_value_as_int   (GtkSpinButton  *spin_button);
void		gtk_spin_button_set_value	   (GtkSpinButton  *spin_button, 						    gdouble	    value);
void		gtk_spin_button_set_update_policy  (GtkSpinButton  *spin_button, 						    GtkSpinButtonUpdatePolicy  policy);
GtkSpinButtonUpdatePolicy gtk_spin_button_get_update_policy (GtkSpinButton *spin_button);
void		gtk_spin_button_set_numeric	   (GtkSpinButton  *spin_button, 						    gboolean	    numeric);
gboolean        gtk_spin_button_get_numeric        (GtkSpinButton  *spin_button);
void		gtk_spin_button_spin		   (GtkSpinButton  *spin_button, 						    GtkSpinType     direction, 						    gdouble	    increment);
void		gtk_spin_button_set_wrap	   (GtkSpinButton  *spin_button, 						    gboolean	    wrap);
gboolean        gtk_spin_button_get_wrap           (GtkSpinButton  *spin_button);
void		gtk_spin_button_set_snap_to_ticks  (GtkSpinButton  *spin_button, 						    gboolean	    snap_to_ticks);
gboolean        gtk_spin_button_get_snap_to_ticks  (GtkSpinButton  *spin_button);
void            gtk_spin_button_update             (GtkSpinButton  *spin_button);
void            _gtk_spin_button_get_panels        (GtkSpinButton  *spin_button,                                                     GdkWindow     **down_panel,                                                     GdkWindow     **up_panel);
GType      gtk_bin_get_type  (void) ;
GtkWidget *gtk_bin_get_child (GtkBin *bin);
void       _gtk_bin_set_child (GtkBin    *bin,                                GtkWidget *widget);
GType      gtk_statusbar_get_type     	(void) ;
GtkWidget* gtk_statusbar_new          	(void);
guint	   gtk_statusbar_get_context_id	(GtkStatusbar *statusbar, 					 const gchar  *context_description);
guint      gtk_statusbar_push          	(GtkStatusbar *statusbar, 					 guint	       context_id, 					 const gchar  *text);
void       gtk_statusbar_pop          	(GtkStatusbar *statusbar, 					 guint	       context_id);
void       gtk_statusbar_remove        	(GtkStatusbar *statusbar, 					 guint	       context_id, 					 guint         message_id);
void       gtk_statusbar_remove_all    	(GtkStatusbar *statusbar, 					 guint	       context_id);
GtkWidget* gtk_statusbar_get_message_area  (GtkStatusbar *statusbar);
GType        gtk_lock_button_get_type       (void) ;
GtkWidget   *gtk_lock_button_new            (GPermission   *permission);
GPermission *gtk_lock_button_get_permission (GtkLockButton *button);
void         gtk_lock_button_set_permission (GtkLockButton *button,                                              GPermission   *permission);
void     gtk_stock_add        (const GtkStockItem  *items,                                guint                n_items);
void     gtk_stock_add_static (const GtkStockItem  *items,                                guint                n_items);
gboolean gtk_stock_lookup     (const gchar         *stock_id,                                GtkStockItem        *item);
GSList*  gtk_stock_list_ids  (void);
GtkStockItem *gtk_stock_item_copy (const GtkStockItem *item);
void          gtk_stock_item_free (GtkStockItem       *item);
void          gtk_stock_set_translate_func (const gchar      *domain, 					    GtkTranslateFunc  func, 					    gpointer          data, 					    GDestroyNotify    notify);
GType gtk_theming_engine_get_type (void) ;
void gtk_theming_engine_register_property (const gchar            *name_space,                                            GtkStylePropertyParser  parse_func,                                            GParamSpec             *pspec);
void gtk_theming_engine_get_property (GtkThemingEngine *engine,                                       const gchar      *property,                                       GtkStateFlags     state,                                       GValue           *value);
void gtk_theming_engine_get_valist   (GtkThemingEngine *engine,                                       GtkStateFlags     state,                                       va_list           args);
void gtk_theming_engine_get          (GtkThemingEngine *engine,                                       GtkStateFlags     state,                                       ...) G_GNUC_NULL_TERMINATED;
void gtk_theming_engine_get_style_property (GtkThemingEngine *engine,                                             const gchar      *property_name,                                             GValue           *value);
void gtk_theming_engine_get_style_valist   (GtkThemingEngine *engine,                                             va_list           args);
void gtk_theming_engine_get_style          (GtkThemingEngine *engine,                                             ...);
gboolean gtk_theming_engine_lookup_color (GtkThemingEngine *engine,                                           const gchar      *color_name,                                           GdkRGBA          *color);
const GtkWidgetPath * gtk_theming_engine_get_path (GtkThemingEngine *engine);
gboolean gtk_theming_engine_has_class  (GtkThemingEngine *engine,                                         const gchar      *style_class);
gboolean gtk_theming_engine_has_region (GtkThemingEngine *engine,                                         const gchar      *style_region,                                         GtkRegionFlags   *flags);
GtkStateFlags gtk_theming_engine_get_state        (GtkThemingEngine *engine);
gboolean      gtk_theming_engine_state_is_running (GtkThemingEngine *engine,                                                    GtkStateType      state,                                                    gdouble          *progress);
GtkTextDirection gtk_theming_engine_get_direction (GtkThemingEngine *engine);
GtkJunctionSides gtk_theming_engine_get_junction_sides (GtkThemingEngine *engine);
void gtk_theming_engine_get_color            (GtkThemingEngine *engine,                                               GtkStateFlags     state,                                               GdkRGBA          *color);
void gtk_theming_engine_get_background_color (GtkThemingEngine *engine,                                               GtkStateFlags     state,                                               GdkRGBA          *color);
void gtk_theming_engine_get_border_color     (GtkThemingEngine *engine,                                               GtkStateFlags     state,                                               GdkRGBA          *color);
void gtk_theming_engine_get_border  (GtkThemingEngine *engine,                                      GtkStateFlags     state,                                      GtkBorder        *border);
void gtk_theming_engine_get_padding (GtkThemingEngine *engine,                                      GtkStateFlags     state,                                      GtkBorder        *padding);
void gtk_theming_engine_get_margin  (GtkThemingEngine *engine,                                      GtkStateFlags     state,                                      GtkBorder        *margin);
const PangoFontDescription * gtk_theming_engine_get_font (GtkThemingEngine *engine,                                                           GtkStateFlags     state);
GtkThemingEngine * gtk_theming_engine_load (const gchar *name);
GdkScreen * gtk_theming_engine_get_screen (GtkThemingEngine *engine);
GType                   gtk_print_operation_get_type               (void) ;
GtkPrintOperation *     gtk_print_operation_new                    (void);
void                    gtk_print_operation_set_default_page_setup (GtkPrintOperation  *op,                                                                     GtkPageSetup       *default_page_setup);
GtkPageSetup *          gtk_print_operation_get_default_page_setup (GtkPrintOperation  *op);
void                    gtk_print_operation_set_print_settings     (GtkPrintOperation  *op,                                                                     GtkPrintSettings   *print_settings);
GtkPrintSettings *      gtk_print_operation_get_print_settings     (GtkPrintOperation  *op);
void                    gtk_print_operation_set_job_name           (GtkPrintOperation  *op,                                                                     const gchar        *job_name);
void                    gtk_print_operation_set_n_pages            (GtkPrintOperation  *op,                                                                     gint                n_pages);
void                    gtk_print_operation_set_current_page       (GtkPrintOperation  *op,                                                                     gint                current_page);
void                    gtk_print_operation_set_use_full_page      (GtkPrintOperation  *op,                                                                     gboolean            full_page);
void                    gtk_print_operation_set_unit               (GtkPrintOperation  *op,                                                                     GtkUnit             unit);
void                    gtk_print_operation_set_export_filename    (GtkPrintOperation  *op,                                                                     const gchar        *filename);
void                    gtk_print_operation_set_track_print_status (GtkPrintOperation  *op,                                                                     gboolean            track_status);
void                    gtk_print_operation_set_show_progress      (GtkPrintOperation  *op,                                                                     gboolean            show_progress);
void                    gtk_print_operation_set_allow_async        (GtkPrintOperation  *op,                                                                     gboolean            allow_async);
void                    gtk_print_operation_set_custom_tab_label   (GtkPrintOperation  *op,                                                                     const gchar        *label);
GtkPrintOperationResult gtk_print_operation_run                    (GtkPrintOperation  *op,                                                                     GtkPrintOperationAction action,                                                                     GtkWindow          *parent,                                                                     GError            **error);
void                    gtk_print_operation_get_error              (GtkPrintOperation  *op,                                                                     GError            **error);
GtkPrintStatus          gtk_print_operation_get_status             (GtkPrintOperation  *op);
const gchar *           gtk_print_operation_get_status_string      (GtkPrintOperation  *op);
gboolean                gtk_print_operation_is_finished            (GtkPrintOperation  *op);
void                    gtk_print_operation_cancel                 (GtkPrintOperation  *op);
void                    gtk_print_operation_draw_page_finish       (GtkPrintOperation  *op);
void                    gtk_print_operation_set_defer_drawing      (GtkPrintOperation  *op);
void                    gtk_print_operation_set_support_selection  (GtkPrintOperation  *op,                                                                     gboolean            support_selection);
gboolean                gtk_print_operation_get_support_selection  (GtkPrintOperation  *op);
void                    gtk_print_operation_set_has_selection      (GtkPrintOperation  *op,                                                                     gboolean            has_selection);
gboolean                gtk_print_operation_get_has_selection      (GtkPrintOperation  *op);
void                    gtk_print_operation_set_embed_page_setup   (GtkPrintOperation  *op,                                                                     gboolean            embed);
gboolean                gtk_print_operation_get_embed_page_setup   (GtkPrintOperation  *op);
gint                    gtk_print_operation_get_n_pages_to_print   (GtkPrintOperation  *op);
GtkPageSetup           *gtk_print_run_page_setup_dialog            (GtkWindow          *parent,                                                                     GtkPageSetup       *page_setup,                                                                     GtkPrintSettings   *settings);
void                    gtk_print_run_page_setup_dialog_async      (GtkWindow            *parent,                                                                     GtkPageSetup         *page_setup,                                                                     GtkPrintSettings     *settings,                                                                     GtkPageSetupDoneFunc  done_cb,                                                                     gpointer              data);
GType   gtk_notebook_get_type       (void) ;
GtkWidget * gtk_notebook_new        (void);
gint gtk_notebook_append_page       (GtkNotebook *notebook, 				     GtkWidget   *child, 				     GtkWidget   *tab_label);
gint gtk_notebook_append_page_menu  (GtkNotebook *notebook, 				     GtkWidget   *child, 				     GtkWidget   *tab_label, 				     GtkWidget   *menu_label);
gint gtk_notebook_prepend_page      (GtkNotebook *notebook, 				     GtkWidget   *child, 				     GtkWidget   *tab_label);
gint gtk_notebook_prepend_page_menu (GtkNotebook *notebook, 				     GtkWidget   *child, 				     GtkWidget   *tab_label, 				     GtkWidget   *menu_label);
gint gtk_notebook_insert_page       (GtkNotebook *notebook, 				     GtkWidget   *child, 				     GtkWidget   *tab_label, 				     gint         position);
gint gtk_notebook_insert_page_menu  (GtkNotebook *notebook, 				     GtkWidget   *child, 				     GtkWidget   *tab_label, 				     GtkWidget   *menu_label, 				     gint         position);
void gtk_notebook_remove_page       (GtkNotebook *notebook, 				     gint         page_num);
void         gtk_notebook_set_group_name (GtkNotebook *notebook,                                           const gchar *group_name);
const gchar *gtk_notebook_get_group_name (GtkNotebook *notebook);
gint       gtk_notebook_get_current_page (GtkNotebook *notebook);
GtkWidget* gtk_notebook_get_nth_page     (GtkNotebook *notebook, 					  gint         page_num);
gint       gtk_notebook_get_n_pages      (GtkNotebook *notebook);
gint       gtk_notebook_page_num         (GtkNotebook *notebook, 					  GtkWidget   *child);
void       gtk_notebook_set_current_page (GtkNotebook *notebook, 					  gint         page_num);
void       gtk_notebook_next_page        (GtkNotebook *notebook);
void       gtk_notebook_prev_page        (GtkNotebook *notebook);
void     gtk_notebook_set_show_border      (GtkNotebook     *notebook, 					    gboolean         show_border);
gboolean gtk_notebook_get_show_border      (GtkNotebook     *notebook);
void     gtk_notebook_set_show_tabs        (GtkNotebook     *notebook, 					    gboolean         show_tabs);
gboolean gtk_notebook_get_show_tabs        (GtkNotebook     *notebook);
void     gtk_notebook_set_tab_pos          (GtkNotebook     *notebook, 				            GtkPositionType  pos);
GtkPositionType gtk_notebook_get_tab_pos   (GtkNotebook     *notebook);
void     gtk_notebook_set_scrollable       (GtkNotebook     *notebook, 					    gboolean         scrollable);
gboolean gtk_notebook_get_scrollable       (GtkNotebook     *notebook);
guint16  gtk_notebook_get_tab_hborder      (GtkNotebook     *notebook);
guint16  gtk_notebook_get_tab_vborder      (GtkNotebook     *notebook);
void gtk_notebook_popup_enable  (GtkNotebook *notebook);
void gtk_notebook_popup_disable (GtkNotebook *notebook);
GtkWidget * gtk_notebook_get_tab_label    (GtkNotebook *notebook, 					   GtkWidget   *child);
void gtk_notebook_set_tab_label           (GtkNotebook *notebook, 					   GtkWidget   *child, 					   GtkWidget   *tab_label);
void          gtk_notebook_set_tab_label_text (GtkNotebook *notebook,                                                GtkWidget   *child,                                                const gchar *tab_text);
const gchar * gtk_notebook_get_tab_label_text (GtkNotebook *notebook,                                                GtkWidget   *child);
GtkWidget * gtk_notebook_get_menu_label   (GtkNotebook *notebook, 					   GtkWidget   *child);
void gtk_notebook_set_menu_label          (GtkNotebook *notebook, 					   GtkWidget   *child, 					   GtkWidget   *menu_label);
void          gtk_notebook_set_menu_label_text (GtkNotebook *notebook,                                                 GtkWidget   *child,                                                 const gchar *menu_text);
const gchar * gtk_notebook_get_menu_label_text (GtkNotebook *notebook, 							GtkWidget   *child);
void gtk_notebook_reorder_child           (GtkNotebook *notebook, 					   GtkWidget   *child, 					   gint         position);
gboolean gtk_notebook_get_tab_reorderable (GtkNotebook *notebook, 					   GtkWidget   *child);
void gtk_notebook_set_tab_reorderable     (GtkNotebook *notebook, 					   GtkWidget   *child, 					   gboolean     reorderable);
gboolean gtk_notebook_get_tab_detachable  (GtkNotebook *notebook, 					   GtkWidget   *child);
void gtk_notebook_set_tab_detachable      (GtkNotebook *notebook, 					   GtkWidget   *child, 					   gboolean     detachable);
GtkWidget* gtk_notebook_get_action_widget (GtkNotebook *notebook,                                            GtkPackType  pack_type);
void       gtk_notebook_set_action_widget (GtkNotebook *notebook,                                            GtkWidget   *widget,                                            GtkPackType  pack_type);
GType            gtk_cell_renderer_accel_get_type        (void) ;
GtkCellRenderer *gtk_cell_renderer_accel_new             (void);
GType             gtk_cell_view_get_type                (void) ;
GtkWidget        *gtk_cell_view_new                     (void);
GtkWidget        *gtk_cell_view_new_with_context        (GtkCellArea        *area,                                                          GtkCellAreaContext *context);
GtkWidget        *gtk_cell_view_new_with_text           (const gchar     *text);
GtkWidget        *gtk_cell_view_new_with_markup         (const gchar     *markup);
GtkWidget        *gtk_cell_view_new_with_pixbuf         (GdkPixbuf       *pixbuf);
void              gtk_cell_view_set_model               (GtkCellView     *cell_view,                                                          GtkTreeModel    *model);
GtkTreeModel     *gtk_cell_view_get_model               (GtkCellView     *cell_view);
void              gtk_cell_view_set_displayed_row       (GtkCellView     *cell_view,                                                          GtkTreePath     *path);
GtkTreePath      *gtk_cell_view_get_displayed_row       (GtkCellView     *cell_view);
void              gtk_cell_view_set_background_rgba     (GtkCellView     *cell_view,                                                          const GdkRGBA   *rgba);
gboolean          gtk_cell_view_get_draw_sensitive      (GtkCellView     *cell_view);
void              gtk_cell_view_set_draw_sensitive      (GtkCellView     *cell_view,                                                          gboolean         draw_sensitive);
gboolean          gtk_cell_view_get_fit_model           (GtkCellView     *cell_view);
void              gtk_cell_view_set_fit_model           (GtkCellView     *cell_view,                                                          gboolean         fit_model);
gboolean          gtk_cell_view_get_size_of_row         (GtkCellView     *cell_view,                                                          GtkTreePath     *path,                                                          GtkRequisition  *requisition);
void              gtk_cell_view_set_background_color    (GtkCellView     *cell_view,                                                          const GdkColor  *color);
GType      gtk_menu_bar_get_type        (void) ;
GtkWidget* gtk_menu_bar_new             (void);
GtkWidget* gtk_menu_bar_new_from_model  (GMenuModel *model);
GtkPackDirection gtk_menu_bar_get_pack_direction (GtkMenuBar       *menubar);
void             gtk_menu_bar_set_pack_direction (GtkMenuBar       *menubar, 						  GtkPackDirection  pack_dir);
GtkPackDirection gtk_menu_bar_get_child_pack_direction (GtkMenuBar       *menubar);
void             gtk_menu_bar_set_child_pack_direction (GtkMenuBar       *menubar, 							GtkPackDirection  child_pack_dir);
void _gtk_menu_bar_cycle_focus (GtkMenuBar       *menubar, 				GtkDirectionType  dir);

GType                  gtk_tree_view_get_type                      (void) ;
GtkWidget             *gtk_tree_view_new                           (void);
GtkWidget             *gtk_tree_view_new_with_model                (GtkTreeModel              *model);
GtkTreeModel          *gtk_tree_view_get_model                     (GtkTreeView               *tree_view);
void                   gtk_tree_view_set_model                     (GtkTreeView               *tree_view, 								    GtkTreeModel              *model);
GtkTreeSelection      *gtk_tree_view_get_selection                 (GtkTreeView               *tree_view);
GtkAdjustment         *gtk_tree_view_get_hadjustment               (GtkTreeView               *tree_view);
void                   gtk_tree_view_set_hadjustment               (GtkTreeView               *tree_view, 								    GtkAdjustment             *adjustment);
GtkAdjustment         *gtk_tree_view_get_vadjustment               (GtkTreeView               *tree_view);
void                   gtk_tree_view_set_vadjustment               (GtkTreeView               *tree_view, 								    GtkAdjustment             *adjustment);
gboolean               gtk_tree_view_get_headers_visible           (GtkTreeView               *tree_view);
void                   gtk_tree_view_set_headers_visible           (GtkTreeView               *tree_view, 								    gboolean                   headers_visible);
void                   gtk_tree_view_columns_autosize              (GtkTreeView               *tree_view);
gboolean               gtk_tree_view_get_headers_clickable         (GtkTreeView *tree_view);
void                   gtk_tree_view_set_headers_clickable         (GtkTreeView               *tree_view, 								    gboolean                   setting);
void                   gtk_tree_view_set_rules_hint                (GtkTreeView               *tree_view, 								    gboolean                   setting);
gboolean               gtk_tree_view_get_rules_hint                (GtkTreeView               *tree_view);
gint                   gtk_tree_view_append_column                 (GtkTreeView               *tree_view, 								    GtkTreeViewColumn         *column);
gint                   gtk_tree_view_remove_column                 (GtkTreeView               *tree_view, 								    GtkTreeViewColumn         *column);
gint                   gtk_tree_view_insert_column                 (GtkTreeView               *tree_view, 								    GtkTreeViewColumn         *column, 								    gint                       position);
gint                   gtk_tree_view_insert_column_with_attributes (GtkTreeView               *tree_view, 								    gint                       position, 								    const gchar               *title, 								    GtkCellRenderer           *cell, 								    ...) G_GNUC_NULL_TERMINATED;
gint                   gtk_tree_view_insert_column_with_data_func  (GtkTreeView               *tree_view, 								    gint                       position, 								    const gchar               *title, 								    GtkCellRenderer           *cell,                                                                     GtkTreeCellDataFunc        func,                                                                     gpointer                   data,                                                                     GDestroyNotify             dnotify);
guint                  gtk_tree_view_get_n_columns                 (GtkTreeView               *tree_view);
GtkTreeViewColumn     *gtk_tree_view_get_column                    (GtkTreeView               *tree_view, 								    gint                       n);
GList                 *gtk_tree_view_get_columns                   (GtkTreeView               *tree_view);
void                   gtk_tree_view_move_column_after             (GtkTreeView               *tree_view, 								    GtkTreeViewColumn         *column, 								    GtkTreeViewColumn         *base_column);
void                   gtk_tree_view_set_expander_column           (GtkTreeView               *tree_view, 								    GtkTreeViewColumn         *column);
GtkTreeViewColumn     *gtk_tree_view_get_expander_column           (GtkTreeView               *tree_view);
void                   gtk_tree_view_set_column_drag_function      (GtkTreeView               *tree_view, 								    GtkTreeViewColumnDropFunc  func, 								    gpointer                   user_data, 								    GDestroyNotify             destroy);
void                   gtk_tree_view_scroll_to_point               (GtkTreeView               *tree_view, 								    gint                       tree_x, 								    gint                       tree_y);
void                   gtk_tree_view_scroll_to_cell                (GtkTreeView               *tree_view, 								    GtkTreePath               *path, 								    GtkTreeViewColumn         *column, 								    gboolean                   use_align, 								    gfloat                     row_align, 								    gfloat                     col_align);
void                   gtk_tree_view_row_activated                 (GtkTreeView               *tree_view, 								    GtkTreePath               *path, 								    GtkTreeViewColumn         *column);
void                   gtk_tree_view_expand_all                    (GtkTreeView               *tree_view);
void                   gtk_tree_view_collapse_all                  (GtkTreeView               *tree_view);
void                   gtk_tree_view_expand_to_path                (GtkTreeView               *tree_view, 								    GtkTreePath               *path);
gboolean               gtk_tree_view_expand_row                    (GtkTreeView               *tree_view, 								    GtkTreePath               *path, 								    gboolean                   open_all);
gboolean               gtk_tree_view_collapse_row                  (GtkTreeView               *tree_view, 								    GtkTreePath               *path);
void                   gtk_tree_view_map_expanded_rows             (GtkTreeView               *tree_view, 								    GtkTreeViewMappingFunc     func, 								    gpointer                   data);
gboolean               gtk_tree_view_row_expanded                  (GtkTreeView               *tree_view, 								    GtkTreePath               *path);
void                   gtk_tree_view_set_reorderable               (GtkTreeView               *tree_view, 								    gboolean                   reorderable);
gboolean               gtk_tree_view_get_reorderable               (GtkTreeView               *tree_view);
void                   gtk_tree_view_set_cursor                    (GtkTreeView               *tree_view, 								    GtkTreePath               *path, 								    GtkTreeViewColumn         *focus_column, 								    gboolean                   start_editing);
void                   gtk_tree_view_set_cursor_on_cell            (GtkTreeView               *tree_view, 								    GtkTreePath               *path, 								    GtkTreeViewColumn         *focus_column, 								    GtkCellRenderer           *focus_cell, 								    gboolean                   start_editing);
void                   gtk_tree_view_get_cursor                    (GtkTreeView               *tree_view, 								    GtkTreePath              **path, 								    GtkTreeViewColumn        **focus_column);
GdkWindow             *gtk_tree_view_get_bin_window                (GtkTreeView               *tree_view);
gboolean               gtk_tree_view_get_path_at_pos               (GtkTreeView               *tree_view, 								    gint                       x, 								    gint                       y, 								    GtkTreePath              **path, 								    GtkTreeViewColumn        **column, 								    gint                      *cell_x, 								    gint                      *cell_y);
void                   gtk_tree_view_get_cell_area                 (GtkTreeView               *tree_view, 								    GtkTreePath               *path, 								    GtkTreeViewColumn         *column, 								    GdkRectangle              *rect);
void                   gtk_tree_view_get_background_area           (GtkTreeView               *tree_view, 								    GtkTreePath               *path, 								    GtkTreeViewColumn         *column, 								    GdkRectangle              *rect);
void                   gtk_tree_view_get_visible_rect              (GtkTreeView               *tree_view, 								    GdkRectangle              *visible_rect);
gboolean               gtk_tree_view_get_visible_range             (GtkTreeView               *tree_view, 								    GtkTreePath              **start_path, 								    GtkTreePath              **end_path);
gboolean               gtk_tree_view_is_blank_at_pos               (GtkTreeView               *tree_view,                                                                     gint                       x,                                                                     gint                       y,                                                                     GtkTreePath              **path,                                                                     GtkTreeViewColumn        **column,                                                                     gint                      *cell_x,                                                                     gint                      *cell_y);
void                   gtk_tree_view_enable_model_drag_source      (GtkTreeView               *tree_view, 								    GdkModifierType            start_button_mask, 								    const GtkTargetEntry      *targets, 								    gint                       n_targets, 								    GdkDragAction              actions);
void                   gtk_tree_view_enable_model_drag_dest        (GtkTreeView               *tree_view, 								    const GtkTargetEntry      *targets, 								    gint                       n_targets, 								    GdkDragAction              actions);
void                   gtk_tree_view_unset_rows_drag_source        (GtkTreeView               *tree_view);
void                   gtk_tree_view_unset_rows_drag_dest          (GtkTreeView               *tree_view);
void                   gtk_tree_view_set_drag_dest_row             (GtkTreeView               *tree_view, 								    GtkTreePath               *path, 								    GtkTreeViewDropPosition    pos);
void                   gtk_tree_view_get_drag_dest_row             (GtkTreeView               *tree_view, 								    GtkTreePath              **path, 								    GtkTreeViewDropPosition   *pos);
gboolean               gtk_tree_view_get_dest_row_at_pos           (GtkTreeView               *tree_view, 								    gint                       drag_x, 								    gint                       drag_y, 								    GtkTreePath              **path, 								    GtkTreeViewDropPosition   *pos);
cairo_surface_t       *gtk_tree_view_create_row_drag_icon          (GtkTreeView               *tree_view, 								    GtkTreePath               *path);
void                       gtk_tree_view_set_enable_search     (GtkTreeView                *tree_view, 								gboolean                    enable_search);
gboolean                   gtk_tree_view_get_enable_search     (GtkTreeView                *tree_view);
gint                       gtk_tree_view_get_search_column     (GtkTreeView                *tree_view);
void                       gtk_tree_view_set_search_column     (GtkTreeView                *tree_view, 								gint                        column);
GtkTreeViewSearchEqualFunc gtk_tree_view_get_search_equal_func (GtkTreeView                *tree_view);
void                       gtk_tree_view_set_search_equal_func (GtkTreeView                *tree_view, 								GtkTreeViewSearchEqualFunc  search_equal_func, 								gpointer                    search_user_data, 								GDestroyNotify              search_destroy);
GtkEntry                     *gtk_tree_view_get_search_entry         (GtkTreeView                   *tree_view);
void                          gtk_tree_view_set_search_entry         (GtkTreeView                   *tree_view, 								      GtkEntry                      *entry);
GtkTreeViewSearchPositionFunc gtk_tree_view_get_search_position_func (GtkTreeView                   *tree_view);
void                          gtk_tree_view_set_search_position_func (GtkTreeView                   *tree_view, 								      GtkTreeViewSearchPositionFunc  func, 								      gpointer                       data, 								      GDestroyNotify                 destroy);
void gtk_tree_view_convert_widget_to_tree_coords       (GtkTreeView *tree_view, 							gint         wx, 							gint         wy, 							gint        *tx, 							gint        *ty);
void gtk_tree_view_convert_tree_to_widget_coords       (GtkTreeView *tree_view, 							gint         tx, 							gint         ty, 							gint        *wx, 							gint        *wy);
void gtk_tree_view_convert_widget_to_bin_window_coords (GtkTreeView *tree_view, 							gint         wx, 							gint         wy, 							gint        *bx, 							gint        *by);
void gtk_tree_view_convert_bin_window_to_widget_coords (GtkTreeView *tree_view, 							gint         bx, 							gint         by, 							gint        *wx, 							gint        *wy);
void gtk_tree_view_convert_tree_to_bin_window_coords   (GtkTreeView *tree_view, 							gint         tx, 							gint         ty, 							gint        *bx, 							gint        *by);
void gtk_tree_view_convert_bin_window_to_tree_coords   (GtkTreeView *tree_view, 							gint         bx, 							gint         by, 							gint        *tx, 							gint        *ty);
void gtk_tree_view_set_destroy_count_func (GtkTreeView             *tree_view, 					   GtkTreeDestroyCountFunc  func, 					   gpointer                 data, 					   GDestroyNotify           destroy);
void     gtk_tree_view_set_fixed_height_mode (GtkTreeView          *tree_view, 					      gboolean              enable);
gboolean gtk_tree_view_get_fixed_height_mode (GtkTreeView          *tree_view);
void     gtk_tree_view_set_hover_selection   (GtkTreeView          *tree_view, 					      gboolean              hover);
gboolean gtk_tree_view_get_hover_selection   (GtkTreeView          *tree_view);
void     gtk_tree_view_set_hover_expand      (GtkTreeView          *tree_view, 					      gboolean              expand);
gboolean gtk_tree_view_get_hover_expand      (GtkTreeView          *tree_view);
void     gtk_tree_view_set_rubber_banding    (GtkTreeView          *tree_view, 					      gboolean              enable);
gboolean gtk_tree_view_get_rubber_banding    (GtkTreeView          *tree_view);
gboolean gtk_tree_view_is_rubber_banding_active (GtkTreeView       *tree_view);
GtkTreeViewRowSeparatorFunc gtk_tree_view_get_row_separator_func (GtkTreeView               *tree_view);
void                        gtk_tree_view_set_row_separator_func (GtkTreeView                *tree_view, 								  GtkTreeViewRowSeparatorFunc func, 								  gpointer                    data, 								  GDestroyNotify              destroy);
GtkTreeViewGridLines        gtk_tree_view_get_grid_lines         (GtkTreeView                *tree_view);
void                        gtk_tree_view_set_grid_lines         (GtkTreeView                *tree_view, 								  GtkTreeViewGridLines        grid_lines);
gboolean                    gtk_tree_view_get_enable_tree_lines  (GtkTreeView                *tree_view);
void                        gtk_tree_view_set_enable_tree_lines  (GtkTreeView                *tree_view, 								  gboolean                    enabled);
void                        gtk_tree_view_set_show_expanders     (GtkTreeView                *tree_view, 								  gboolean                    enabled);
gboolean                    gtk_tree_view_get_show_expanders     (GtkTreeView                *tree_view);
void                        gtk_tree_view_set_level_indentation  (GtkTreeView                *tree_view, 								  gint                        indentation);
gint                        gtk_tree_view_get_level_indentation  (GtkTreeView                *tree_view);
void          gtk_tree_view_set_tooltip_row    (GtkTreeView       *tree_view, 						GtkTooltip        *tooltip, 						GtkTreePath       *path);
void          gtk_tree_view_set_tooltip_cell   (GtkTreeView       *tree_view, 						GtkTooltip        *tooltip, 						GtkTreePath       *path, 						GtkTreeViewColumn *column, 						GtkCellRenderer   *cell);
gboolean      gtk_tree_view_get_tooltip_context(GtkTreeView       *tree_view, 						gint              *x, 						gint              *y, 						gboolean           keyboard_tip, 						GtkTreeModel     **model, 						GtkTreePath      **path, 						GtkTreeIter       *iter);
void          gtk_tree_view_set_tooltip_column (GtkTreeView       *tree_view, 					        gint               column);
gint          gtk_tree_view_get_tooltip_column (GtkTreeView       *tree_view);
GType	   gtk_separator_menu_item_get_type	   (void) ;
GtkWidget* gtk_separator_menu_item_new	           (void);
GQuark 	gtk_recent_manager_error_quark (void);
GType 		  gtk_recent_manager_get_type       (void) ;
GtkRecentManager *gtk_recent_manager_new            (void);
GtkRecentManager *gtk_recent_manager_get_default    (void);
gboolean          gtk_recent_manager_add_item       (GtkRecentManager     *manager, 						     const gchar          *uri);
gboolean          gtk_recent_manager_add_full       (GtkRecentManager     *manager, 						     const gchar          *uri, 						     const GtkRecentData  *recent_data);
gboolean          gtk_recent_manager_remove_item    (GtkRecentManager     *manager, 						     const gchar          *uri, 						     GError              **error);
GtkRecentInfo *   gtk_recent_manager_lookup_item    (GtkRecentManager     *manager, 						     const gchar          *uri, 						     GError              **error);
gboolean          gtk_recent_manager_has_item       (GtkRecentManager     *manager, 						     const gchar          *uri);
gboolean          gtk_recent_manager_move_item      (GtkRecentManager     *manager, 						     const gchar          *uri, 						     const gchar          *new_uri, 						     GError              **error);
GList *           gtk_recent_manager_get_items      (GtkRecentManager     *manager);
gint              gtk_recent_manager_purge_items    (GtkRecentManager     *manager, 						     GError              **error);
GType	              gtk_recent_info_get_type             (void) ;
GtkRecentInfo *       gtk_recent_info_ref                  (GtkRecentInfo  *info);
void                  gtk_recent_info_unref                (GtkRecentInfo  *info);
const gchar *         gtk_recent_info_get_uri              (GtkRecentInfo  *info);
const gchar *         gtk_recent_info_get_display_name     (GtkRecentInfo  *info);
const gchar *         gtk_recent_info_get_description      (GtkRecentInfo  *info);
const gchar *         gtk_recent_info_get_mime_type        (GtkRecentInfo  *info);
time_t                gtk_recent_info_get_added            (GtkRecentInfo  *info);
time_t                gtk_recent_info_get_modified         (GtkRecentInfo  *info);
time_t                gtk_recent_info_get_visited          (GtkRecentInfo  *info);
gboolean              gtk_recent_info_get_private_hint     (GtkRecentInfo  *info);
gboolean              gtk_recent_info_get_application_info (GtkRecentInfo  *info, 							    const gchar    *app_name, 							    const gchar   **app_exec, 							    guint          *count, 							    time_t         *time_);
GAppInfo *            gtk_recent_info_create_app_info      (GtkRecentInfo  *info,                                                             const gchar    *app_name,                                                             GError        **error);
gchar **              gtk_recent_info_get_applications     (GtkRecentInfo  *info, 							    gsize          *length) G_GNUC_MALLOC;
gchar *               gtk_recent_info_last_application     (GtkRecentInfo  *info) G_GNUC_MALLOC;
gboolean              gtk_recent_info_has_application      (GtkRecentInfo  *info, 							    const gchar    *app_name);
gchar **              gtk_recent_info_get_groups           (GtkRecentInfo  *info, 							    gsize          *length) G_GNUC_MALLOC;
gboolean              gtk_recent_info_has_group            (GtkRecentInfo  *info, 							    const gchar    *group_name);
GdkPixbuf *           gtk_recent_info_get_icon             (GtkRecentInfo  *info, 							    gint            size);
GIcon *               gtk_recent_info_get_gicon            (GtkRecentInfo  *info);
gchar *               gtk_recent_info_get_short_name       (GtkRecentInfo  *info) G_GNUC_MALLOC;
gchar *               gtk_recent_info_get_uri_display      (GtkRecentInfo  *info) G_GNUC_MALLOC;
gint                  gtk_recent_info_get_age              (GtkRecentInfo  *info);
gboolean              gtk_recent_info_is_local             (GtkRecentInfo  *info);
gboolean              gtk_recent_info_exists               (GtkRecentInfo  *info);
gboolean              gtk_recent_info_match                (GtkRecentInfo  *info_a, 							    GtkRecentInfo  *info_b);
void _gtk_recent_manager_sync (void);
GType            gtk_cell_renderer_spin_get_type (void);
GtkCellRenderer *gtk_cell_renderer_spin_new      (void);
GType      gtk_app_chooser_get_type         (void) ;
GAppInfo * gtk_app_chooser_get_app_info     (GtkAppChooser *self);
gchar *    gtk_app_chooser_get_content_type (GtkAppChooser *self);
void       gtk_app_chooser_refresh          (GtkAppChooser *self);
GType gtk_style_properties_get_type (void) ;
void     gtk_style_properties_register_property (GtkStylePropertyParser  parse_func,                                                  GParamSpec             *pspec);
gboolean gtk_style_properties_lookup_property   (const gchar             *property_name,                                                  GtkStylePropertyParser  *parse_func,                                                  GParamSpec             **pspec);
GtkStyleProperties * gtk_style_properties_new (void);
void               gtk_style_properties_map_color    (GtkStyleProperties *props,                                                       const gchar        *name,                                                       GtkSymbolicColor   *color);
GtkSymbolicColor * gtk_style_properties_lookup_color (GtkStyleProperties *props,                                                       const gchar        *name);
void     gtk_style_properties_set_property (GtkStyleProperties *props,                                             const gchar        *property,                                             GtkStateFlags       state,                                             const GValue       *value);
void     gtk_style_properties_set_valist   (GtkStyleProperties *props,                                             GtkStateFlags       state,                                             va_list             args);
void     gtk_style_properties_set          (GtkStyleProperties *props,                                             GtkStateFlags       state,                                             ...) G_GNUC_NULL_TERMINATED;
gboolean gtk_style_properties_get_property (GtkStyleProperties *props,                                             const gchar        *property,                                             GtkStateFlags       state,                                             GValue             *value);
void     gtk_style_properties_get_valist   (GtkStyleProperties *props,                                             GtkStateFlags       state,                                             va_list             args);
void     gtk_style_properties_get          (GtkStyleProperties *props,                                             GtkStateFlags       state,                                             ...) G_GNUC_NULL_TERMINATED;
void     gtk_style_properties_unset_property (GtkStyleProperties *props,                                               const gchar        *property,                                               GtkStateFlags       state);
void     gtk_style_properties_clear          (GtkStyleProperties  *props);
void     gtk_style_properties_merge          (GtkStyleProperties       *props,                                               const GtkStyleProperties *props_to_merge,                                               gboolean                  replace);
GtkCssSection *    gtk_css_section_ref                 (GtkCssSection        *section);
void               gtk_css_section_unref               (GtkCssSection        *section);
GtkCssSectionType  gtk_css_section_get_section_type    (const GtkCssSection  *section);
GtkCssSection *    gtk_css_section_get_parent          (const GtkCssSection  *section);
GFile *            gtk_css_section_get_file            (const GtkCssSection  *section);
guint              gtk_css_section_get_start_line      (const GtkCssSection  *section);
guint              gtk_css_section_get_start_position  (const GtkCssSection  *section);
guint              gtk_css_section_get_end_line        (const GtkCssSection  *section);
guint              gtk_css_section_get_end_position    (const GtkCssSection  *section);
void gtk_text_layout_draw (GtkTextLayout        *layout,                            GtkWidget            *widget,                            cairo_t              *cr,                            GList               **widgets);
GType    gtk_color_chooser_get_type        (void) ;
void     gtk_color_chooser_get_rgba       (GtkColorChooser *chooser,                                            GdkRGBA         *color);
void     gtk_color_chooser_set_rgba       (GtkColorChooser *chooser,                                            const GdkRGBA   *color);
gboolean gtk_color_chooser_get_use_alpha  (GtkColorChooser *chooser);
void     gtk_color_chooser_set_use_alpha  (GtkColorChooser *chooser,                                            gboolean         use_alpha);
void     gtk_color_chooser_add_palette    (GtkColorChooser *chooser,                                            GtkOrientation   orientation,                                            gint             colors_per_line,                                            gint             n_colors,                                            GdkRGBA         *colors);

GType                   gtk_actionable_get_type                         (void) ;
const gchar *           gtk_actionable_get_action_name                  (GtkActionable *actionable);
void                    gtk_actionable_set_action_name                  (GtkActionable *actionable,                                                                          const gchar   *action_name);
GVariant *              gtk_actionable_get_action_target_value          (GtkActionable *actionable);
void                    gtk_actionable_set_action_target_value          (GtkActionable *actionable,                                                                          GVariant      *target_value);
void                    gtk_actionable_set_action_target                (GtkActionable *actionable,                                                                          const gchar   *format_string,                                                                          ...);
void                    gtk_actionable_set_detailed_action_name         (GtkActionable *actionable,                                                                          const gchar   *detailed_action_name);
         
 
guint gtk_get_debug_flags (void);
void  gtk_set_debug_flags  (guint flags);

GType gtk_license_get_type (void) ;
GType gtk_accel_flags_get_type (void) ;
GType gtk_application_inhibit_flags_get_type (void) ;
GType gtk_assistant_page_type_get_type (void) ;
GType gtk_builder_error_get_type (void) ;
GType gtk_calendar_display_options_get_type (void) ;
GType gtk_cell_renderer_state_get_type (void) ;
GType gtk_cell_renderer_mode_get_type (void) ;
GType gtk_cell_renderer_accel_mode_get_type (void) ;
GType gtk_css_provider_error_get_type (void) ;
GType gtk_css_section_type_get_type (void) ;
GType gtk_debug_flag_get_type (void) ;
GType gtk_dialog_flags_get_type (void) ;
GType gtk_response_type_get_type (void) ;
GType gtk_dest_defaults_get_type (void) ;
GType gtk_target_flags_get_type (void) ;
GType gtk_entry_icon_position_get_type (void) ;
GType gtk_align_get_type (void) ;
GType gtk_arrow_placement_get_type (void) ;
GType gtk_arrow_type_get_type (void) ;
GType gtk_attach_options_get_type (void) ;
GType gtk_button_box_style_get_type (void) ;
GType gtk_delete_type_get_type (void) ;
GType gtk_direction_type_get_type (void) ;
GType gtk_expander_style_get_type (void) ;
GType gtk_icon_size_get_type (void) ;
GType gtk_sensitivity_type_get_type (void) ;
GType gtk_text_direction_get_type (void) ;
GType gtk_justification_get_type (void) ;
GType gtk_menu_direction_type_get_type (void) ;
GType gtk_message_type_get_type (void) ;
GType gtk_movement_step_get_type (void) ;
GType gtk_scroll_step_get_type (void) ;
GType gtk_orientation_get_type (void) ;
GType gtk_corner_type_get_type (void) ;
GType gtk_pack_type_get_type (void) ;
GType gtk_path_priority_type_get_type (void) ;
GType gtk_path_type_get_type (void) ;
GType gtk_policy_type_get_type (void) ;
GType gtk_position_type_get_type (void) ;
GType gtk_relief_style_get_type (void) ;
GType gtk_resize_mode_get_type (void) ;
GType gtk_scroll_type_get_type (void) ;
GType gtk_selection_mode_get_type (void) ;
GType gtk_shadow_type_get_type (void) ;
GType gtk_state_type_get_type (void) ;
GType gtk_toolbar_style_get_type (void) ;
GType gtk_window_position_get_type (void) ;
GType gtk_window_type_get_type (void) ;
GType gtk_wrap_mode_get_type (void) ;
GType gtk_sort_type_get_type (void) ;
GType gtk_im_preedit_style_get_type (void) ;
GType gtk_im_status_style_get_type (void) ;
GType gtk_pack_direction_get_type (void) ;
GType gtk_print_pages_get_type (void) ;
GType gtk_page_set_get_type (void) ;
GType gtk_number_up_layout_get_type (void) ;
GType gtk_page_orientation_get_type (void) ;
GType gtk_print_quality_get_type (void) ;
GType gtk_print_duplex_get_type (void) ;
GType gtk_unit_get_type (void) ;
GType gtk_tree_view_grid_lines_get_type (void) ;
GType gtk_drag_result_get_type (void) ;
GType gtk_size_request_mode_get_type (void) ;
GType gtk_scrollable_policy_get_type (void) ;
GType gtk_state_flags_get_type (void) ;
GType gtk_region_flags_get_type (void) ;
GType gtk_junction_sides_get_type (void) ;
GType gtk_border_style_get_type (void) ;
GType gtk_file_chooser_action_get_type (void) ;
GType gtk_file_chooser_confirmation_get_type (void) ;
GType gtk_file_chooser_error_get_type (void) ;
GType gtk_file_filter_flags_get_type (void) ;
GType gtk_icon_lookup_flags_get_type (void) ;
GType gtk_icon_theme_error_get_type (void) ;
GType gtk_icon_view_drop_position_get_type (void) ;
GType gtk_image_type_get_type (void) ;
GType gtk_buttons_type_get_type (void) ;
GType gtk_notebook_tab_get_type (void) ;
GType gtk_print_status_get_type (void) ;
GType gtk_print_operation_result_get_type (void) ;
GType gtk_print_operation_action_get_type (void) ;
GType gtk_print_error_get_type (void) ;
GType gtk_recent_sort_type_get_type (void) ;
GType gtk_recent_chooser_error_get_type (void) ;
GType gtk_recent_filter_flags_get_type (void) ;
GType gtk_recent_manager_error_get_type (void) ;
GType gtk_size_group_mode_get_type (void) ;
GType gtk_spin_button_update_policy_get_type (void) ;
GType gtk_spin_type_get_type (void) ;
GType gtk_text_buffer_target_info_get_type (void) ;
GType gtk_text_search_flags_get_type (void) ;
GType gtk_text_window_type_get_type (void) ;
GType gtk_toolbar_space_style_get_type (void) ;
GType gtk_tool_palette_drag_targets_get_type (void) ;
GType gtk_tree_model_flags_get_type (void) ;
GType gtk_tree_view_drop_position_get_type (void) ;
GType gtk_tree_view_column_sizing_get_type (void) ;
GType gtk_ui_manager_item_type_get_type (void) ;
GType gtk_widget_help_type_get_type (void) ;
GType gtk_rc_flags_get_type (void) ;
GType gtk_rc_token_type_get_type (void) ;
void gtk_hsv_to_rgb (gdouble  h, gdouble  s, gdouble  v,                      gdouble *r, gdouble *g, gdouble *b);
void gtk_rgb_to_hsv (gdouble  r, gdouble  g, gdouble  b,                      gdouble *h, gdouble *s, gdouble *v);
GType      gtk_image_get_type (void) ;
GtkWidget* gtk_image_new                (void);
GtkWidget* gtk_image_new_from_file      (const gchar     *filename);
GtkWidget* gtk_image_new_from_resource  (const gchar     *resource_path);
GtkWidget* gtk_image_new_from_pixbuf    (GdkPixbuf       *pixbuf);
GtkWidget* gtk_image_new_from_stock     (const gchar     *stock_id,                                          GtkIconSize      size);
GtkWidget* gtk_image_new_from_icon_set  (GtkIconSet      *icon_set,                                          GtkIconSize      size);
GtkWidget* gtk_image_new_from_animation (GdkPixbufAnimation *animation);
GtkWidget* gtk_image_new_from_icon_name (const gchar     *icon_name, 					 GtkIconSize      size);
GtkWidget* gtk_image_new_from_gicon     (GIcon           *icon, 					 GtkIconSize      size);
void gtk_image_clear              (GtkImage        *image);
void gtk_image_set_from_file      (GtkImage        *image,                                    const gchar     *filename);
void gtk_image_set_from_resource  (GtkImage        *image,                                    const gchar     *resource_path);
void gtk_image_set_from_pixbuf    (GtkImage        *image,                                    GdkPixbuf       *pixbuf);
void gtk_image_set_from_stock     (GtkImage        *image,                                    const gchar     *stock_id,                                    GtkIconSize      size);
void gtk_image_set_from_icon_set  (GtkImage        *image,                                    GtkIconSet      *icon_set,                                    GtkIconSize      size);
void gtk_image_set_from_animation (GtkImage           *image,                                    GdkPixbufAnimation *animation);
void gtk_image_set_from_icon_name (GtkImage        *image, 				   const gchar     *icon_name, 				   GtkIconSize      size);
void gtk_image_set_from_gicon     (GtkImage        *image, 				   GIcon           *icon, 				   GtkIconSize      size);
void gtk_image_set_pixel_size     (GtkImage        *image, 				   gint             pixel_size);
GtkImageType gtk_image_get_storage_type (GtkImage   *image);
GdkPixbuf* gtk_image_get_pixbuf   (GtkImage         *image);
void       gtk_image_get_stock    (GtkImage         *image,                                    gchar           **stock_id,                                    GtkIconSize      *size);
void       gtk_image_get_icon_set (GtkImage         *image,                                    GtkIconSet      **icon_set,                                    GtkIconSize      *size);
GdkPixbufAnimation* gtk_image_get_animation (GtkImage *image);
void       gtk_image_get_icon_name (GtkImage     *image, 				    const gchar **icon_name, 				    GtkIconSize  *size);
void       gtk_image_get_gicon     (GtkImage              *image, 				    GIcon                **gicon, 				    GtkIconSize           *size);
gint       gtk_image_get_pixel_size (GtkImage             *image);
GType	   gtk_radio_button_get_type	     (void) ;
GtkWidget* gtk_radio_button_new                           (GSList         *group);
GtkWidget* gtk_radio_button_new_from_widget               (GtkRadioButton *radio_group_member);
GtkWidget* gtk_radio_button_new_with_label                (GSList         *group,                                                            const gchar    *label);
GtkWidget* gtk_radio_button_new_with_label_from_widget    (GtkRadioButton *radio_group_member,                                                            const gchar    *label);
GtkWidget* gtk_radio_button_new_with_mnemonic             (GSList         *group,                                                            const gchar    *label);
GtkWidget* gtk_radio_button_new_with_mnemonic_from_widget (GtkRadioButton *radio_group_member,                                                            const gchar    *label);
GSList*    gtk_radio_button_get_group                     (GtkRadioButton *radio_button);
void       gtk_radio_button_set_group                     (GtkRadioButton *radio_button,                                                            GSList         *group);
void            gtk_radio_button_join_group        (GtkRadioButton        *radio_button,                                                     GtkRadioButton        *group_source);
GType gtk_css_provider_get_type (void) ;
GtkCssProvider * gtk_css_provider_new (void);
char *           gtk_css_provider_to_string      (GtkCssProvider  *provider);
gboolean         gtk_css_provider_load_from_data (GtkCssProvider  *css_provider,                                                   const gchar     *data,                                                   gssize           length,                                                   GError         **error);
gboolean         gtk_css_provider_load_from_file (GtkCssProvider  *css_provider,                                                   GFile           *file,                                                   GError         **error);
gboolean         gtk_css_provider_load_from_path (GtkCssProvider  *css_provider,                                                   const gchar     *path,                                                   GError         **error);
GtkCssProvider * gtk_css_provider_get_default (void);
GtkCssProvider * gtk_css_provider_get_named (const gchar *name,                                              const gchar *variant);
GType            gtk_cell_renderer_pixbuf_get_type (void) ;
GtkCellRenderer *gtk_cell_renderer_pixbuf_new      (void);
GType      gtk_drawing_area_get_type (void) ;
GtkWidget* gtk_drawing_area_new      (void);
GType    gtk_tree_sortable_get_type              (void) ;
void     gtk_tree_sortable_sort_column_changed   (GtkTreeSortable        *sortable);
gboolean gtk_tree_sortable_get_sort_column_id    (GtkTreeSortable        *sortable, 						  gint                   *sort_column_id, 						  GtkSortType            *order);
void     gtk_tree_sortable_set_sort_column_id    (GtkTreeSortable        *sortable, 						  gint                    sort_column_id, 						  GtkSortType             order);
void     gtk_tree_sortable_set_sort_func         (GtkTreeSortable        *sortable, 						  gint                    sort_column_id, 						  GtkTreeIterCompareFunc  sort_func, 						  gpointer                user_data, 						  GDestroyNotify          destroy);
void     gtk_tree_sortable_set_default_sort_func (GtkTreeSortable        *sortable, 						  GtkTreeIterCompareFunc  sort_func, 						  gpointer                user_data, 						  GDestroyNotify          destroy);
gboolean gtk_tree_sortable_has_default_sort_func (GtkTreeSortable        *sortable);
guint gtk_get_major_version (void) ;
guint gtk_get_minor_version (void) ;
guint gtk_get_micro_version (void) ;
guint gtk_get_binary_age    (void) ;
guint gtk_get_interface_age (void) ;
gboolean gtk_parse_args           (int    *argc,                                    char ***argv);
void     gtk_init                 (int    *argc,                                    char ***argv);
gboolean gtk_init_check           (int    *argc,                                    char ***argv);
gboolean gtk_init_with_args       (gint                 *argc,                                    gchar              ***argv,                                    const gchar          *parameter_string,                                    const GOptionEntry   *entries,                                    const gchar          *translation_domain,                                    GError              **error);
GOptionGroup *gtk_get_option_group (gboolean open_default_display);
void     gtk_init_abi_check       (int    *argc,                                    char ***argv,                                    int     num_checks,                                    size_t  sizeof_GtkWindow,                                    size_t  sizeof_GtkBox);
gboolean gtk_init_check_abi_check (int    *argc,                                    char ***argv,                                    int     num_checks,                                    size_t  sizeof_GtkWindow,                                    size_t  sizeof_GtkBox);
void           gtk_disable_setlocale    (void);
PangoLanguage *gtk_get_default_language (void);
gboolean       gtk_events_pending       (void);
void       gtk_main_do_event       (GdkEvent           *event);
void       gtk_main                (void);
guint      gtk_main_level          (void);
void       gtk_main_quit           (void);
gboolean   gtk_main_iteration      (void);
gboolean   gtk_main_iteration_do   (gboolean            blocking);
gboolean   gtk_true                (void) ;
gboolean   gtk_false               (void) ;
void       gtk_grab_add            (GtkWidget          *widget);
GtkWidget* gtk_grab_get_current    (void);
void       gtk_grab_remove         (GtkWidget          *widget);
void       gtk_device_grab_add     (GtkWidget          *widget,                                     GdkDevice          *device,                                     gboolean            block_others);
void       gtk_device_grab_remove  (GtkWidget          *widget,                                     GdkDevice          *device);
guint      gtk_key_snooper_install (GtkKeySnoopFunc snooper,                                     gpointer        func_data);
void       gtk_key_snooper_remove  (guint           snooper_handler_id);
GdkEvent * gtk_get_current_event        (void);
guint32    gtk_get_current_event_time   (void);
gboolean   gtk_get_current_event_state  (GdkModifierType *state);
GdkDevice *gtk_get_current_event_device (void);
GtkWidget *gtk_get_event_widget         (GdkEvent        *event);
void       gtk_propagate_event          (GtkWidget       *widget,                                          GdkEvent        *event);
GType      gtk_grid_get_type               (void) ;
GtkWidget* gtk_grid_new                    (void);
void       gtk_grid_attach                 (GtkGrid         *grid,                                             GtkWidget       *child,                                             gint             left,                                             gint             top,                                             gint             width,                                             gint             height);
void       gtk_grid_attach_next_to         (GtkGrid         *grid,                                             GtkWidget       *child,                                             GtkWidget       *sibling,                                             GtkPositionType  side,                                             gint             width,                                             gint             height);
GtkWidget *gtk_grid_get_child_at           (GtkGrid         *grid,                                             gint             left,                                             gint             top);
void       gtk_grid_insert_row             (GtkGrid         *grid,                                             gint             position);
void       gtk_grid_insert_column          (GtkGrid         *grid,                                             gint             position);
void       gtk_grid_insert_next_to         (GtkGrid         *grid,                                             GtkWidget       *sibling,                                             GtkPositionType  side);
void       gtk_grid_set_row_homogeneous    (GtkGrid         *grid,                                             gboolean         homogeneous);
gboolean   gtk_grid_get_row_homogeneous    (GtkGrid         *grid);
void       gtk_grid_set_row_spacing        (GtkGrid         *grid,                                             guint            spacing);
guint      gtk_grid_get_row_spacing        (GtkGrid         *grid);
void       gtk_grid_set_column_homogeneous (GtkGrid         *grid,                                             gboolean         homogeneous);
gboolean   gtk_grid_get_column_homogeneous (GtkGrid         *grid);
void       gtk_grid_set_column_spacing     (GtkGrid         *grid,                                             guint            spacing);
guint      gtk_grid_get_column_spacing     (GtkGrid         *grid);
GType                 gtk_font_button_get_type       (void) ;
GtkWidget            *gtk_font_button_new            (void);
GtkWidget            *gtk_font_button_new_with_font  (const gchar   *fontname);
const gchar *         gtk_font_button_get_title      (GtkFontButton *font_button);
void                  gtk_font_button_set_title      (GtkFontButton *font_button,                                                       const gchar   *title);
gboolean              gtk_font_button_get_use_font   (GtkFontButton *font_button);
void                  gtk_font_button_set_use_font   (GtkFontButton *font_button,                                                       gboolean       use_font);
gboolean              gtk_font_button_get_use_size   (GtkFontButton *font_button);
void                  gtk_font_button_set_use_size   (GtkFontButton *font_button,                                                       gboolean       use_size);
const gchar *         gtk_font_button_get_font_name  (GtkFontButton *font_button);
gboolean              gtk_font_button_set_font_name  (GtkFontButton *font_button,                                                       const gchar   *fontname);
gboolean              gtk_font_button_get_show_style (GtkFontButton *font_button);
void                  gtk_font_button_set_show_style (GtkFontButton *font_button,                                                       gboolean       show_style);
gboolean              gtk_font_button_get_show_size  (GtkFontButton *font_button);
void                  gtk_font_button_set_show_size  (GtkFontButton *font_button,                                                       gboolean       show_size);
GType     gtk_buildable_get_type               (void) ;
void      gtk_buildable_set_name               (GtkBuildable        *buildable, 						const gchar         *name);
const gchar * gtk_buildable_get_name           (GtkBuildable        *buildable);
void      gtk_buildable_add_child              (GtkBuildable        *buildable, 						GtkBuilder          *builder, 						GObject             *child, 						const gchar         *type);
void      gtk_buildable_set_buildable_property (GtkBuildable        *buildable, 						GtkBuilder          *builder, 						const gchar         *name, 						const GValue        *value);
GObject * gtk_buildable_construct_child        (GtkBuildable        *buildable, 						GtkBuilder          *builder, 						const gchar         *name);
gboolean  gtk_buildable_custom_tag_start       (GtkBuildable        *buildable, 						GtkBuilder          *builder, 						GObject             *child, 						const gchar         *tagname, 						GMarkupParser       *parser, 						gpointer            *data);
void      gtk_buildable_custom_tag_end         (GtkBuildable        *buildable, 						GtkBuilder          *builder, 						GObject             *child, 						const gchar         *tagname, 						gpointer            *data);
void      gtk_buildable_custom_finished        (GtkBuildable        *buildable, 						GtkBuilder          *builder, 						GObject             *child, 						const gchar         *tagname, 						gpointer             data);
void      gtk_buildable_parser_finished        (GtkBuildable        *buildable, 						GtkBuilder          *builder);
GObject * gtk_buildable_get_internal_child     (GtkBuildable        *buildable, 						GtkBuilder          *builder, 						const gchar         *childname);
GType        gtk_radio_tool_button_get_type       (void) ;
GtkToolItem *gtk_radio_tool_button_new                        (GSList             *group);
GtkToolItem *gtk_radio_tool_button_new_from_stock             (GSList             *group, 							       const gchar        *stock_id);
GtkToolItem *gtk_radio_tool_button_new_from_widget            (GtkRadioToolButton *group);
GtkToolItem *gtk_radio_tool_button_new_with_stock_from_widget (GtkRadioToolButton *group, 							       const gchar        *stock_id);
GSList *     gtk_radio_tool_button_get_group                  (GtkRadioToolButton *button);
void         gtk_radio_tool_button_set_group                  (GtkRadioToolButton *button, 							       GSList             *group);
void gtk_drag_get_data (GtkWidget      *widget, 			GdkDragContext *context, 			GdkAtom         target, 			guint32         time_);
void gtk_drag_finish   (GdkDragContext *context, 			gboolean        success, 			gboolean        del, 			guint32         time_);
GtkWidget *gtk_drag_get_source_widget (GdkDragContext *context);
void gtk_drag_highlight   (GtkWidget  *widget);
void gtk_drag_unhighlight (GtkWidget  *widget);
void gtk_drag_dest_set   (GtkWidget            *widget, 			  GtkDestDefaults       flags,   		          const GtkTargetEntry *targets, 			  gint                  n_targets, 			  GdkDragAction         actions);
void gtk_drag_dest_set_proxy (GtkWidget      *widget, 			      GdkWindow      *proxy_window, 			      GdkDragProtocol protocol, 			      gboolean        use_coordinates);
void gtk_drag_dest_unset (GtkWidget          *widget);
GdkAtom        gtk_drag_dest_find_target     (GtkWidget      *widget,                                               GdkDragContext *context,                                               GtkTargetList  *target_list);
GtkTargetList* gtk_drag_dest_get_target_list (GtkWidget      *widget);
void           gtk_drag_dest_set_target_list (GtkWidget      *widget,                                               GtkTargetList  *target_list);
void           gtk_drag_dest_add_text_targets  (GtkWidget    *widget);
void           gtk_drag_dest_add_image_targets (GtkWidget    *widget);
void           gtk_drag_dest_add_uri_targets   (GtkWidget    *widget);
void           gtk_drag_dest_set_track_motion  (GtkWidget *widget, 						gboolean   track_motion);
gboolean       gtk_drag_dest_get_track_motion  (GtkWidget *widget);
void gtk_drag_source_set  (GtkWidget            *widget, 			   GdkModifierType       start_button_mask, 			   const GtkTargetEntry *targets, 			   gint                  n_targets, 			   GdkDragAction         actions);
void gtk_drag_source_unset (GtkWidget        *widget);
GtkTargetList* gtk_drag_source_get_target_list (GtkWidget     *widget);
void           gtk_drag_source_set_target_list (GtkWidget     *widget,                                                 GtkTargetList *target_list);
void           gtk_drag_source_add_text_targets  (GtkWidget     *widget);
void           gtk_drag_source_add_image_targets (GtkWidget    *widget);
void           gtk_drag_source_add_uri_targets   (GtkWidget    *widget);
void gtk_drag_source_set_icon_pixbuf  (GtkWidget       *widget, 				       GdkPixbuf       *pixbuf);
void gtk_drag_source_set_icon_stock   (GtkWidget       *widget, 				       const gchar     *stock_id);
void gtk_drag_source_set_icon_name    (GtkWidget       *widget, 				       const gchar     *icon_name);
void gtk_drag_source_set_icon_gicon   (GtkWidget       *widget, 				       GIcon           *icon);
GdkDragContext *gtk_drag_begin (GtkWidget         *widget, 				GtkTargetList     *targets, 				GdkDragAction      actions, 				gint               button, 				GdkEvent          *event);
void gtk_drag_set_icon_widget (GdkDragContext *context, 			       GtkWidget      *widget, 			       gint            hot_x, 			       gint            hot_y);
void gtk_drag_set_icon_pixbuf (GdkDragContext *context, 			       GdkPixbuf      *pixbuf, 			       gint            hot_x, 			       gint            hot_y);
void gtk_drag_set_icon_stock  (GdkDragContext *context, 			       const gchar    *stock_id, 			       gint            hot_x, 			       gint            hot_y);
void gtk_drag_set_icon_surface(GdkDragContext *context, 			       cairo_surface_t *surface);
void gtk_drag_set_icon_name   (GdkDragContext *context, 			       const gchar    *icon_name, 			       gint            hot_x, 			       gint            hot_y);
void gtk_drag_set_icon_gicon  (GdkDragContext *context, 			       GIcon          *icon, 			       gint            hot_x, 			       gint            hot_y);
void gtk_drag_set_icon_default (GdkDragContext    *context);
gboolean gtk_drag_check_threshold (GtkWidget *widget, 				   gint       start_x, 				   gint       start_y, 				   gint       current_x, 				   gint       current_y);
void _gtk_drag_source_handle_event (GtkWidget *widget, 				    GdkEvent  *event);
void _gtk_drag_dest_handle_event (GtkWidget *toplevel, 				  GdkEvent  *event);
GType	   gtk_menu_get_type		  (void) ;
GtkWidget* gtk_menu_new			  (void);
GtkWidget* gtk_menu_new_from_model        (GMenuModel *model);
void	   gtk_menu_popup		  (GtkMenu	       *menu, 					   GtkWidget	       *parent_menu_shell, 					   GtkWidget	       *parent_menu_item, 					   GtkMenuPositionFunc	func, 					   gpointer		data, 					   guint		button, 					   guint32		activate_time);
void       gtk_menu_popup_for_device      (GtkMenu             *menu,                                            GdkDevice           *device,                                            GtkWidget           *parent_menu_shell,                                            GtkWidget           *parent_menu_item,                                            GtkMenuPositionFunc  func,                                            gpointer             data,                                            GDestroyNotify       destroy,                                            guint                button,                                            guint32              activate_time);
void	   gtk_menu_reposition		  (GtkMenu	       *menu);
void	   gtk_menu_popdown		  (GtkMenu	       *menu);
 GtkWidget* gtk_menu_get_active		  (GtkMenu	       *menu);
void	   gtk_menu_set_active		  (GtkMenu	       *menu, 					   guint		index);
void	       gtk_menu_set_accel_group	  (GtkMenu	       *menu, 					   GtkAccelGroup       *accel_group);
GtkAccelGroup* gtk_menu_get_accel_group	  (GtkMenu	       *menu);
void           gtk_menu_set_accel_path    (GtkMenu             *menu, 					   const gchar         *accel_path);
const gchar*   gtk_menu_get_accel_path    (GtkMenu             *menu);
void	   gtk_menu_attach_to_widget	  (GtkMenu	       *menu, 					   GtkWidget	       *attach_widget, 					   GtkMenuDetachFunc	detacher);
void	   gtk_menu_detach		  (GtkMenu	       *menu);
GtkWidget* gtk_menu_get_attach_widget	  (GtkMenu	       *menu);
void       gtk_menu_set_tearoff_state     (GtkMenu             *menu, 					   gboolean             torn_off);
gboolean   gtk_menu_get_tearoff_state     (GtkMenu             *menu);
void          gtk_menu_set_title          (GtkMenu             *menu,                                            const gchar         *title);
const gchar * gtk_menu_get_title          (GtkMenu             *menu);
void       gtk_menu_reorder_child         (GtkMenu             *menu,                                            GtkWidget           *child,                                            gint                position);
void	   gtk_menu_set_screen		  (GtkMenu	       *menu, 					   GdkScreen	       *screen);
void       gtk_menu_attach                (GtkMenu             *menu,                                            GtkWidget           *child,                                            guint                left_attach,                                            guint                right_attach,                                            guint                top_attach,                                            guint                bottom_attach);
void       gtk_menu_set_monitor           (GtkMenu             *menu,                                            gint                 monitor_num);
gint       gtk_menu_get_monitor           (GtkMenu             *menu);
GList*     gtk_menu_get_for_attach_widget (GtkWidget           *widget); 
void     gtk_menu_set_reserve_toggle_size (GtkMenu  *menu,                                           gboolean   reserve_toggle_size);
gboolean gtk_menu_get_reserve_toggle_size (GtkMenu  *menu);
GType            gtk_cell_renderer_toggle_get_type       (void) ;
GtkCellRenderer *gtk_cell_renderer_toggle_new            (void);
gboolean         gtk_cell_renderer_toggle_get_radio      (GtkCellRendererToggle *toggle);
void             gtk_cell_renderer_toggle_set_radio      (GtkCellRendererToggle *toggle,                                                           gboolean               radio);
gboolean        gtk_cell_renderer_toggle_get_active      (GtkCellRendererToggle *toggle);
void            gtk_cell_renderer_toggle_set_active      (GtkCellRendererToggle *toggle,                                                           gboolean               setting);
gboolean        gtk_cell_renderer_toggle_get_activatable (GtkCellRendererToggle *toggle);
void            gtk_cell_renderer_toggle_set_activatable (GtkCellRendererToggle *toggle,                                                           gboolean               setting);
GType gtk_paper_size_get_type (void) ;
GtkPaperSize *gtk_paper_size_new          (const gchar  *name);
GtkPaperSize *gtk_paper_size_new_from_ppd (const gchar  *ppd_name, 					   const gchar  *ppd_display_name, 					   gdouble       width, 					   gdouble       height);
GtkPaperSize *gtk_paper_size_new_custom   (const gchar  *name, 					   const gchar  *display_name, 					   gdouble       width, 					   gdouble       height, 					   GtkUnit       unit);
GtkPaperSize *gtk_paper_size_copy         (GtkPaperSize *other);
void          gtk_paper_size_free         (GtkPaperSize *size);
gboolean      gtk_paper_size_is_equal     (GtkPaperSize *size1, 					   GtkPaperSize *size2);
GList        *gtk_paper_size_get_paper_sizes (gboolean include_custom);
const gchar *gtk_paper_size_get_name         (GtkPaperSize *size);
const gchar *gtk_paper_size_get_display_name (GtkPaperSize *size);
const gchar *gtk_paper_size_get_ppd_name     (GtkPaperSize *size);
gdouble  gtk_paper_size_get_width        (GtkPaperSize *size, GtkUnit unit);
gdouble  gtk_paper_size_get_height       (GtkPaperSize *size, GtkUnit unit);
gboolean gtk_paper_size_is_custom        (GtkPaperSize *size);
void    gtk_paper_size_set_size                  (GtkPaperSize *size,                                                    gdouble       width,                                                    gdouble       height,                                                    GtkUnit       unit);
gdouble gtk_paper_size_get_default_top_margin    (GtkPaperSize *size, 						  GtkUnit       unit);
gdouble gtk_paper_size_get_default_bottom_margin (GtkPaperSize *size, 						  GtkUnit       unit);
gdouble gtk_paper_size_get_default_left_margin   (GtkPaperSize *size, 						  GtkUnit       unit);
gdouble gtk_paper_size_get_default_right_margin  (GtkPaperSize *size, 						  GtkUnit       unit);
const gchar *gtk_paper_size_get_default (void);
GtkPaperSize *gtk_paper_size_new_from_key_file (GKeyFile    *key_file, 					        const gchar *group_name, 					        GError     **error);
void     gtk_paper_size_to_key_file            (GtkPaperSize *size, 					        GKeyFile     *key_file, 					        const gchar  *group_name);

GType   gtk_container_get_type		 (void) ;
void    gtk_container_set_border_width	 (GtkContainer	   *container, 					  guint		    border_width);
guint   gtk_container_get_border_width   (GtkContainer     *container);
void    gtk_container_add		 (GtkContainer	   *container, 					  GtkWidget	   *widget);
void    gtk_container_remove		 (GtkContainer	   *container, 					  GtkWidget	   *widget);
void    gtk_container_set_resize_mode    (GtkContainer     *container, 					  GtkResizeMode     resize_mode);
GtkResizeMode gtk_container_get_resize_mode (GtkContainer     *container);
void    gtk_container_check_resize       (GtkContainer     *container);
void     gtk_container_foreach      (GtkContainer       *container, 				     GtkCallback         callback, 				     gpointer            callback_data);
GList*   gtk_container_get_children     (GtkContainer       *container);
void     gtk_container_propagate_draw   (GtkContainer   *container, 					 GtkWidget      *child, 					 cairo_t        *cr);
void     gtk_container_set_focus_chain  (GtkContainer   *container,                                          GList          *focusable_widgets);
gboolean gtk_container_get_focus_chain  (GtkContainer   *container, 					 GList         **focusable_widgets);
void     gtk_container_unset_focus_chain (GtkContainer  *container);
                                        (gtk_container_get_resize_mode (GTK_CONTAINER (widget)) != GTK_RESIZE_PARENT))
void   gtk_container_set_reallocate_redraws (GtkContainer    *container, 					     gboolean         needs_redraws);
void   gtk_container_set_focus_child	   (GtkContainer     *container, 					    GtkWidget	     *child);
GtkWidget *       gtk_container_get_focus_child	   (GtkContainer     *container);
void   gtk_container_set_focus_vadjustment (GtkContainer     *container, 					    GtkAdjustment    *adjustment);
GtkAdjustment *gtk_container_get_focus_vadjustment (GtkContainer *container);
void   gtk_container_set_focus_hadjustment (GtkContainer     *container, 					    GtkAdjustment    *adjustment);
GtkAdjustment *gtk_container_get_focus_hadjustment (GtkContainer *container);
void    gtk_container_resize_children      (GtkContainer     *container);
GType   gtk_container_child_type	   (GtkContainer     *container);
void         gtk_container_class_install_child_property (GtkContainerClass *cclass, 							 guint		    property_id, 							 GParamSpec	   *pspec);
GParamSpec*  gtk_container_class_find_child_property	(GObjectClass	   *cclass, 							 const gchar	   *property_name);
GParamSpec** gtk_container_class_list_child_properties	(GObjectClass	   *cclass, 							 guint		   *n_properties);
void         gtk_container_add_with_properties		(GtkContainer	   *container, 							 GtkWidget	   *widget, 							 const gchar	   *first_prop_name, 							 ...) G_GNUC_NULL_TERMINATED;
void         gtk_container_child_set			(GtkContainer	   *container, 							 GtkWidget	   *child, 							 const gchar	   *first_prop_name, 							 ...) G_GNUC_NULL_TERMINATED;
void         gtk_container_child_get			(GtkContainer	   *container, 							 GtkWidget	   *child, 							 const gchar	   *first_prop_name, 							 ...) G_GNUC_NULL_TERMINATED;
void         gtk_container_child_set_valist		(GtkContainer	   *container, 							 GtkWidget	   *child, 							 const gchar	   *first_property_name, 							 va_list	    var_args);
void         gtk_container_child_get_valist		(GtkContainer	   *container, 							 GtkWidget	   *child, 							 const gchar	   *first_property_name, 							 va_list	    var_args);
void	     gtk_container_child_set_property		(GtkContainer	   *container, 							 GtkWidget	   *child, 							 const gchar	   *property_name, 							 const GValue	   *value);
void	     gtk_container_child_get_property		(GtkContainer	   *container, 							 GtkWidget	   *child, 							 const gchar	   *property_name, 	                                                 GValue		   *value);
void gtk_container_child_notify (GtkContainer *container,                                  GtkWidget    *child,                                  const gchar  *child_property);
void    gtk_container_forall		     (GtkContainer *container, 					      GtkCallback   callback, 					      gpointer	    callback_data);
void    gtk_container_class_handle_border_width (GtkContainerClass *klass);
GtkWidgetPath * gtk_container_get_path_for_child (GtkContainer      *container,                                                   GtkWidget         *child);
GType      gtk_event_box_get_type           (void) ;
GtkWidget* gtk_event_box_new                (void);
gboolean   gtk_event_box_get_visible_window (GtkEventBox *event_box);
void       gtk_event_box_set_visible_window (GtkEventBox *event_box,                                              gboolean     visible_window);
gboolean   gtk_event_box_get_above_child    (GtkEventBox *event_box);
void       gtk_event_box_set_above_child    (GtkEventBox *event_box,                                              gboolean     above_child);
GType             gtk_button_box_get_type            (void) ;
GtkWidget       * gtk_button_box_new                 (GtkOrientation     orientation);
GtkButtonBoxStyle gtk_button_box_get_layout          (GtkButtonBox      *widget);
void              gtk_button_box_set_layout          (GtkButtonBox      *widget,                                                       GtkButtonBoxStyle  layout_style);
gboolean          gtk_button_box_get_child_secondary (GtkButtonBox      *widget,                                                       GtkWidget         *child);
void              gtk_button_box_set_child_secondary (GtkButtonBox      *widget,                                                       GtkWidget         *child,                                                       gboolean           is_secondary);
gboolean          gtk_button_box_get_child_non_homogeneous (GtkButtonBox *widget,                                                             GtkWidget    *child);
void              gtk_button_box_set_child_non_homogeneous (GtkButtonBox *widget,                                                             GtkWidget    *child,                                                             gboolean      non_homogeneous);
GType      gtk_recent_action_get_type         (void) ;
GtkAction *gtk_recent_action_new              (const gchar      *name,                                                const gchar      *label,                                                const gchar      *tooltip,                                                const gchar      *stock_id);
GtkAction *gtk_recent_action_new_for_manager  (const gchar      *name,                                                const gchar      *label,                                                const gchar      *tooltip,                                                const gchar      *stock_id,                                                GtkRecentManager *manager);
gboolean   gtk_recent_action_get_show_numbers (GtkRecentAction  *action);
void       gtk_recent_action_set_show_numbers (GtkRecentAction  *action,                                                gboolean          show_numbers);
GType                  gtk_about_dialog_get_type               (void) ;
GtkWidget             *gtk_about_dialog_new                    (void);
void                   gtk_show_about_dialog                   (GtkWindow       *parent,                                                                 const gchar     *first_property_name,                                                                 ...) G_GNUC_NULL_TERMINATED;
const gchar *          gtk_about_dialog_get_program_name       (GtkAboutDialog  *about);
void                   gtk_about_dialog_set_program_name       (GtkAboutDialog  *about,                                                                 const gchar     *name);
const gchar *          gtk_about_dialog_get_version            (GtkAboutDialog  *about);
void                   gtk_about_dialog_set_version            (GtkAboutDialog  *about,                                                                 const gchar     *version);
const gchar *          gtk_about_dialog_get_copyright          (GtkAboutDialog  *about);
void                   gtk_about_dialog_set_copyright          (GtkAboutDialog  *about,                                                                 const gchar     *copyright);
const gchar *          gtk_about_dialog_get_comments           (GtkAboutDialog  *about);
void                   gtk_about_dialog_set_comments           (GtkAboutDialog  *about,                                                                 const gchar     *comments);
const gchar *          gtk_about_dialog_get_license            (GtkAboutDialog  *about);
void                   gtk_about_dialog_set_license            (GtkAboutDialog  *about,                                                                 const gchar     *license);
void                   gtk_about_dialog_set_license_type       (GtkAboutDialog  *about,                                                                 GtkLicense       license_type);
GtkLicense             gtk_about_dialog_get_license_type       (GtkAboutDialog  *about);
gboolean               gtk_about_dialog_get_wrap_license       (GtkAboutDialog  *about);
void                   gtk_about_dialog_set_wrap_license       (GtkAboutDialog  *about,                                                                 gboolean         wrap_license);
const gchar *          gtk_about_dialog_get_website            (GtkAboutDialog  *about);
void                   gtk_about_dialog_set_website            (GtkAboutDialog  *about,                                                                 const gchar     *website);
const gchar *          gtk_about_dialog_get_website_label      (GtkAboutDialog  *about);
void                   gtk_about_dialog_set_website_label      (GtkAboutDialog  *about,                                                                 const gchar     *website_label);
const gchar* const *   gtk_about_dialog_get_authors            (GtkAboutDialog  *about);
void                   gtk_about_dialog_set_authors            (GtkAboutDialog  *about,                                                                 const gchar    **authors);
const gchar* const *   gtk_about_dialog_get_documenters        (GtkAboutDialog  *about);
void                   gtk_about_dialog_set_documenters        (GtkAboutDialog  *about,                                                                 const gchar    **documenters);
const gchar* const *   gtk_about_dialog_get_artists            (GtkAboutDialog  *about);
void                   gtk_about_dialog_set_artists            (GtkAboutDialog  *about,                                                                 const gchar    **artists);
const gchar *          gtk_about_dialog_get_translator_credits (GtkAboutDialog  *about);
void                   gtk_about_dialog_set_translator_credits (GtkAboutDialog  *about,                                                                 const gchar     *translator_credits);
GdkPixbuf             *gtk_about_dialog_get_logo               (GtkAboutDialog  *about);
void                   gtk_about_dialog_set_logo               (GtkAboutDialog  *about,                                                                 GdkPixbuf       *logo);
const gchar *          gtk_about_dialog_get_logo_icon_name     (GtkAboutDialog  *about);
void                   gtk_about_dialog_set_logo_icon_name     (GtkAboutDialog  *about,                                                                 const gchar     *icon_name);
void                  gtk_about_dialog_add_credit_section      (GtkAboutDialog  *about,                                                                 const gchar     *section_name,                                                                 const gchar    **people);
GType	   gtk_widget_get_type		  (void) ;
GtkWidget* gtk_widget_new		  (GType		type, 					   const gchar	       *first_property_name, 					   ...);
void	   gtk_widget_destroy		  (GtkWidget	       *widget);
void	   gtk_widget_destroyed		  (GtkWidget	       *widget, 					   GtkWidget	      **widget_pointer);
void	   gtk_widget_unparent		  (GtkWidget	       *widget);
void       gtk_widget_show                (GtkWidget           *widget);
void       gtk_widget_hide                (GtkWidget           *widget);
void       gtk_widget_show_now            (GtkWidget           *widget);
void       gtk_widget_show_all            (GtkWidget           *widget);
void       gtk_widget_set_no_show_all     (GtkWidget           *widget,                                            gboolean             no_show_all);
gboolean   gtk_widget_get_no_show_all     (GtkWidget           *widget);
void	   gtk_widget_map		  (GtkWidget	       *widget);
void	   gtk_widget_unmap		  (GtkWidget	       *widget);
void	   gtk_widget_realize		  (GtkWidget	       *widget);
void	   gtk_widget_unrealize		  (GtkWidget	       *widget);
void       gtk_widget_draw                (GtkWidget           *widget,                                            cairo_t             *cr);
void	   gtk_widget_queue_draw	  (GtkWidget	       *widget);
void	   gtk_widget_queue_draw_area	  (GtkWidget	       *widget, 					   gint                 x, 					   gint                 y, 					   gint                 width, 					   gint                 height);
void	   gtk_widget_queue_draw_region   (GtkWidget	       *widget,                                            const cairo_region_t*region);
void	   gtk_widget_queue_resize	  (GtkWidget	       *widget);
void	   gtk_widget_queue_resize_no_redraw (GtkWidget *widget);
_IN_3_0_FOR(gtk_widget_get_preferred_size)
void       gtk_widget_size_request        (GtkWidget           *widget,                                            GtkRequisition      *requisition);
void	   gtk_widget_size_allocate	  (GtkWidget	       *widget, 					   GtkAllocation       *allocation);
GtkSizeRequestMode  gtk_widget_get_request_mode               (GtkWidget      *widget);
void                gtk_widget_get_preferred_width            (GtkWidget      *widget,                                                                gint           *minimum_width,                                                                gint           *natural_width);
void                gtk_widget_get_preferred_height_for_width (GtkWidget      *widget,                                                                gint            width,                                                                gint           *minimum_height,                                                                gint           *natural_height);
void                gtk_widget_get_preferred_height           (GtkWidget      *widget,                                                                gint           *minimum_height,                                                                gint           *natural_height);
void                gtk_widget_get_preferred_width_for_height (GtkWidget      *widget,                                                                gint            height,                                                                gint           *minimum_width,                                                                gint           *natural_width);
void                gtk_widget_get_preferred_size             (GtkWidget      *widget,                                                                GtkRequisition *minimum_size,                                                                GtkRequisition *natural_size);
void       gtk_widget_get_child_requisition (GtkWidget         *widget,                                              GtkRequisition    *requisition);
void	   gtk_widget_add_accelerator	  (GtkWidget           *widget, 					   const gchar         *accel_signal, 					   GtkAccelGroup       *accel_group, 					   guint                accel_key, 					   GdkModifierType      accel_mods, 					   GtkAccelFlags        accel_flags);
gboolean   gtk_widget_remove_accelerator  (GtkWidget           *widget, 					   GtkAccelGroup       *accel_group, 					   guint                accel_key, 					   GdkModifierType      accel_mods);
void       gtk_widget_set_accel_path      (GtkWidget           *widget, 					   const gchar         *accel_path, 					   GtkAccelGroup       *accel_group);
GList*     gtk_widget_list_accel_closures (GtkWidget	       *widget);
gboolean   gtk_widget_can_activate_accel  (GtkWidget           *widget,                                            guint                signal_id);
gboolean   gtk_widget_mnemonic_activate   (GtkWidget           *widget, 					   gboolean             group_cycling);
gboolean   gtk_widget_event		  (GtkWidget	       *widget, 					   GdkEvent	       *event);
gint       gtk_widget_send_expose         (GtkWidget           *widget, 					   GdkEvent            *event);
gboolean   gtk_widget_send_focus_change   (GtkWidget           *widget,                                            GdkEvent            *event);
gboolean   gtk_widget_activate		     (GtkWidget	       *widget);     
void	   gtk_widget_reparent		  (GtkWidget	       *widget, 					   GtkWidget	       *new_parent);
gboolean   gtk_widget_intersect		  (GtkWidget	       *widget, 					   const GdkRectangle  *area, 					   GdkRectangle	       *intersection);
cairo_region_t *gtk_widget_region_intersect	  (GtkWidget	       *widget, 					   const cairo_region_t     *region);
void	gtk_widget_freeze_child_notify	  (GtkWidget	       *widget);
void	gtk_widget_child_notify		  (GtkWidget	       *widget, 					   const gchar	       *child_property);
void	gtk_widget_thaw_child_notify	  (GtkWidget	       *widget);
void       gtk_widget_set_can_focus       (GtkWidget           *widget,                                            gboolean             can_focus);
gboolean   gtk_widget_get_can_focus       (GtkWidget           *widget);
gboolean   gtk_widget_has_focus           (GtkWidget           *widget);
gboolean   gtk_widget_is_focus            (GtkWidget           *widget);
gboolean   gtk_widget_has_visible_focus   (GtkWidget           *widget);
void       gtk_widget_grab_focus          (GtkWidget           *widget);
void       gtk_widget_set_can_default     (GtkWidget           *widget,                                            gboolean             can_default);
gboolean   gtk_widget_get_can_default     (GtkWidget           *widget);
gboolean   gtk_widget_has_default         (GtkWidget           *widget);
void       gtk_widget_grab_default        (GtkWidget           *widget);
void      gtk_widget_set_receives_default (GtkWidget           *widget,                                            gboolean             receives_default);
gboolean  gtk_widget_get_receives_default (GtkWidget           *widget);
gboolean   gtk_widget_has_grab            (GtkWidget           *widget);
gboolean   gtk_widget_device_is_shadowed  (GtkWidget           *widget,                                            GdkDevice           *device);
void                  gtk_widget_set_name               (GtkWidget    *widget, 							 const gchar  *name);
const gchar *         gtk_widget_get_name               (GtkWidget    *widget);
void                  gtk_widget_set_state              (GtkWidget    *widget, 							 GtkStateType  state);
GtkStateType          gtk_widget_get_state              (GtkWidget    *widget);
void                  gtk_widget_set_state_flags        (GtkWidget     *widget,                                                          GtkStateFlags  flags,                                                          gboolean       clear);
void                  gtk_widget_unset_state_flags      (GtkWidget     *widget,                                                          GtkStateFlags  flags);
GtkStateFlags         gtk_widget_get_state_flags        (GtkWidget     *widget);
void                  gtk_widget_set_sensitive          (GtkWidget    *widget, 							 gboolean      sensitive);
gboolean              gtk_widget_get_sensitive          (GtkWidget    *widget);
gboolean              gtk_widget_is_sensitive           (GtkWidget    *widget);
void                  gtk_widget_set_visible            (GtkWidget    *widget,                                                          gboolean      visible);
gboolean              gtk_widget_get_visible            (GtkWidget    *widget);
void                  gtk_widget_set_has_window         (GtkWidget    *widget,                                                          gboolean      has_window);
gboolean              gtk_widget_get_has_window         (GtkWidget    *widget);
gboolean              gtk_widget_is_toplevel            (GtkWidget    *widget);
gboolean              gtk_widget_is_drawable            (GtkWidget    *widget);
void                  gtk_widget_set_realized           (GtkWidget    *widget,                                                          gboolean      realized);
gboolean              gtk_widget_get_realized           (GtkWidget    *widget);
void                  gtk_widget_set_mapped             (GtkWidget    *widget,                                                          gboolean      mapped);
gboolean              gtk_widget_get_mapped             (GtkWidget    *widget);
void                  gtk_widget_set_app_paintable      (GtkWidget    *widget, 							 gboolean      app_paintable);
gboolean              gtk_widget_get_app_paintable      (GtkWidget    *widget);
void                  gtk_widget_set_double_buffered    (GtkWidget    *widget, 							 gboolean      double_buffered);
gboolean              gtk_widget_get_double_buffered    (GtkWidget    *widget);
void                  gtk_widget_set_redraw_on_allocate (GtkWidget    *widget, 							 gboolean      redraw_on_allocate);
void                  gtk_widget_set_parent             (GtkWidget    *widget, 							 GtkWidget    *parent);
GtkWidget           * gtk_widget_get_parent             (GtkWidget    *widget);
void                  gtk_widget_set_parent_window      (GtkWidget    *widget, 							 GdkWindow    *parent_window);
GdkWindow           * gtk_widget_get_parent_window      (GtkWidget    *widget);
void                  gtk_widget_set_child_visible      (GtkWidget    *widget, 							 gboolean      is_visible);
gboolean              gtk_widget_get_child_visible      (GtkWidget    *widget);
void                  gtk_widget_set_window             (GtkWidget    *widget,                                                          GdkWindow    *window);
GdkWindow           * gtk_widget_get_window             (GtkWidget    *widget);
int                   gtk_widget_get_allocated_width    (GtkWidget     *widget);
int                   gtk_widget_get_allocated_height   (GtkWidget     *widget);
void                  gtk_widget_get_allocation         (GtkWidget     *widget,                                                          GtkAllocation *allocation);
void                  gtk_widget_set_allocation         (GtkWidget     *widget,                                                          const GtkAllocation *allocation);
void                  gtk_widget_get_requisition        (GtkWidget     *widget,                                                          GtkRequisition *requisition);
gboolean   gtk_widget_child_focus         (GtkWidget           *widget,                                            GtkDirectionType     direction);
gboolean   gtk_widget_keynav_failed       (GtkWidget           *widget,                                            GtkDirectionType     direction);
void       gtk_widget_error_bell          (GtkWidget           *widget);
void       gtk_widget_set_size_request    (GtkWidget           *widget,                                            gint                 width,                                            gint                 height);
void       gtk_widget_get_size_request    (GtkWidget           *widget,                                            gint                *width,                                            gint                *height);
void	   gtk_widget_set_events	  (GtkWidget	       *widget, 					   gint			events);
void       gtk_widget_add_events          (GtkWidget           *widget, 					   gint	                events);
void	   gtk_widget_set_device_events	  (GtkWidget	       *widget,                                            GdkDevice           *device, 					   GdkEventMask		events);
void       gtk_widget_add_device_events   (GtkWidget           *widget,                                            GdkDevice           *device, 					   GdkEventMask         events);
void       gtk_widget_set_device_enabled  (GtkWidget    *widget,                                            GdkDevice    *device,                                            gboolean      enabled);
gboolean   gtk_widget_get_device_enabled  (GtkWidget    *widget,                                            GdkDevice    *device);
GtkWidget*   gtk_widget_get_toplevel	(GtkWidget	*widget);
GtkWidget*   gtk_widget_get_ancestor	(GtkWidget	*widget, 					 GType		 widget_type);
GdkVisual*   gtk_widget_get_visual	(GtkWidget	*widget);
void         gtk_widget_set_visual	(GtkWidget	*widget,                                          GdkVisual      *visual);
GdkScreen *   gtk_widget_get_screen      (GtkWidget *widget);
gboolean      gtk_widget_has_screen      (GtkWidget *widget);
GdkDisplay *  gtk_widget_get_display     (GtkWidget *widget);
GdkWindow *   gtk_widget_get_root_window (GtkWidget *widget);
GtkSettings*  gtk_widget_get_settings    (GtkWidget *widget);
GtkClipboard *gtk_widget_get_clipboard   (GtkWidget *widget, 					  GdkAtom    selection);
gboolean gtk_widget_get_hexpand          (GtkWidget      *widget);
void     gtk_widget_set_hexpand          (GtkWidget      *widget,                                           gboolean        expand);
gboolean gtk_widget_get_hexpand_set      (GtkWidget      *widget);
void     gtk_widget_set_hexpand_set      (GtkWidget      *widget,                                           gboolean        set);
gboolean gtk_widget_get_vexpand          (GtkWidget      *widget);
void     gtk_widget_set_vexpand          (GtkWidget      *widget,                                           gboolean        expand);
gboolean gtk_widget_get_vexpand_set      (GtkWidget      *widget);
void     gtk_widget_set_vexpand_set      (GtkWidget      *widget,                                           gboolean        set);
void     gtk_widget_queue_compute_expand (GtkWidget      *widget);
gboolean gtk_widget_compute_expand       (GtkWidget      *widget,                                           GtkOrientation  orientation);
gboolean         gtk_widget_get_support_multidevice (GtkWidget      *widget);
void             gtk_widget_set_support_multidevice (GtkWidget      *widget,                                                      gboolean        support_multidevice);
void             gtk_widget_class_set_accessible_type    (GtkWidgetClass     *widget_class,                                                           GType               type);
void             gtk_widget_class_set_accessible_role    (GtkWidgetClass     *widget_class,                                                           AtkRole             role);
AtkObject*       gtk_widget_get_accessible               (GtkWidget          *widget);
GtkAlign gtk_widget_get_halign        (GtkWidget *widget);
void     gtk_widget_set_halign        (GtkWidget *widget,                                        GtkAlign   align);
GtkAlign gtk_widget_get_valign        (GtkWidget *widget);
void     gtk_widget_set_valign        (GtkWidget *widget,                                        GtkAlign   align);
gint     gtk_widget_get_margin_left   (GtkWidget *widget);
void     gtk_widget_set_margin_left   (GtkWidget *widget,                                        gint       margin);
gint     gtk_widget_get_margin_right  (GtkWidget *widget);
void     gtk_widget_set_margin_right  (GtkWidget *widget,                                        gint       margin);
gint     gtk_widget_get_margin_top    (GtkWidget *widget);
void     gtk_widget_set_margin_top    (GtkWidget *widget,                                        gint       margin);
gint     gtk_widget_get_margin_bottom (GtkWidget *widget);
void     gtk_widget_set_margin_bottom (GtkWidget *widget,                                        gint       margin);
gint	     gtk_widget_get_events	(GtkWidget	*widget);
GdkEventMask gtk_widget_get_device_events (GtkWidget	*widget,                                            GdkDevice    *device);
void	     gtk_widget_get_pointer	(GtkWidget	*widget, 					 gint		*x, 					 gint		*y);
gboolean     gtk_widget_is_ancestor	(GtkWidget	*widget, 					 GtkWidget	*ancestor);
gboolean     gtk_widget_translate_coordinates (GtkWidget  *src_widget, 					       GtkWidget  *dest_widget, 					       gint        src_x, 					       gint        src_y, 					       gint       *dest_x, 					       gint       *dest_y);
gboolean     gtk_widget_hide_on_delete	(GtkWidget	*widget);
void         gtk_widget_override_color            (GtkWidget     *widget,                                                    GtkStateFlags  state,                                                    const GdkRGBA *color);
void         gtk_widget_override_background_color (GtkWidget     *widget,                                                    GtkStateFlags  state,                                                    const GdkRGBA *color);
void         gtk_widget_override_font             (GtkWidget                  *widget,                                                    const PangoFontDescription *font_desc);
void         gtk_widget_override_symbolic_color   (GtkWidget     *widget,                                                    const gchar   *name,                                                    const GdkRGBA *color);
void         gtk_widget_override_cursor           (GtkWidget       *widget,                                                    const GdkRGBA   *cursor,                                                    const GdkRGBA   *secondary_cursor);
void       gtk_widget_reset_style       (GtkWidget      *widget);
PangoContext *gtk_widget_create_pango_context (GtkWidget   *widget);
PangoContext *gtk_widget_get_pango_context    (GtkWidget   *widget);
PangoLayout  *gtk_widget_create_pango_layout  (GtkWidget   *widget, 					       const gchar *text);
GdkPixbuf    *gtk_widget_render_icon_pixbuf   (GtkWidget   *widget,                                                const gchar *stock_id,                                                GtkIconSize  size);
void   gtk_widget_set_composite_name	(GtkWidget	*widget, 					 const gchar   	*name);
gchar* gtk_widget_get_composite_name	(GtkWidget	*widget);     
 void	     gtk_widget_push_composite_child (void);
void	     gtk_widget_pop_composite_child  (void);
void gtk_widget_class_install_style_property        (GtkWidgetClass     *klass, 						     GParamSpec         *pspec);
void gtk_widget_class_install_style_property_parser (GtkWidgetClass     *klass, 						     GParamSpec         *pspec, 						     GtkRcPropertyParser parser);
GParamSpec*  gtk_widget_class_find_style_property   (GtkWidgetClass     *klass, 						     const gchar        *property_name);
GParamSpec** gtk_widget_class_list_style_properties (GtkWidgetClass     *klass, 						     guint              *n_properties);
void gtk_widget_style_get_property (GtkWidget	     *widget, 				    const gchar    *property_name, 				    GValue	     *value);
void gtk_widget_style_get_valist   (GtkWidget	     *widget, 				    const gchar    *first_property_name, 				    va_list         var_args);
void gtk_widget_style_get          (GtkWidget	     *widget, 				    const gchar    *first_property_name, 				    ...) G_GNUC_NULL_TERMINATED;
void             gtk_widget_set_direction         (GtkWidget        *widget, 						   GtkTextDirection  dir);
GtkTextDirection gtk_widget_get_direction         (GtkWidget        *widget);
void             gtk_widget_set_default_direction (GtkTextDirection  dir);
GtkTextDirection gtk_widget_get_default_direction (void);
gboolean gtk_widget_is_composited (GtkWidget *widget);
void	     gtk_widget_shape_combine_region (GtkWidget *widget,                                               cairo_region_t *region);
void	     gtk_widget_input_shape_combine_region (GtkWidget *widget,                                                     cairo_region_t *region);
GList* gtk_widget_list_mnemonic_labels  (GtkWidget *widget);
void   gtk_widget_add_mnemonic_label    (GtkWidget *widget, 					 GtkWidget *label);
void   gtk_widget_remove_mnemonic_label (GtkWidget *widget, 					 GtkWidget *label);
void                  gtk_widget_set_tooltip_window    (GtkWidget   *widget,                                                         GtkWindow   *custom_window);
GtkWindow *gtk_widget_get_tooltip_window    (GtkWidget   *widget);
void       gtk_widget_trigger_tooltip_query (GtkWidget   *widget);
void       gtk_widget_set_tooltip_text      (GtkWidget   *widget,                                              const gchar *text);
gchar *    gtk_widget_get_tooltip_text      (GtkWidget   *widget);
void       gtk_widget_set_tooltip_markup    (GtkWidget   *widget,                                              const gchar *markup);
gchar *    gtk_widget_get_tooltip_markup    (GtkWidget   *widget);
void       gtk_widget_set_has_tooltip       (GtkWidget   *widget, 					     gboolean     has_tooltip);
gboolean   gtk_widget_get_has_tooltip       (GtkWidget   *widget);
gboolean   gtk_cairo_should_draw_window     (cairo_t     *cr,                                              GdkWindow   *window);
void       gtk_cairo_transform_to_window    (cairo_t     *cr,                                              GtkWidget   *widget,                                              GdkWindow   *window);
GType           gtk_requisition_get_type (void) ;
GtkRequisition *gtk_requisition_new      (void) G_GNUC_MALLOC;
GtkRequisition *gtk_requisition_copy     (const GtkRequisition *requisition);
void            gtk_requisition_free     (GtkRequisition       *requisition);
gboolean     gtk_widget_in_destruction (GtkWidget *widget);
GtkStyleContext * gtk_widget_get_style_context (GtkWidget *widget);
GtkWidgetPath *   gtk_widget_get_path (GtkWidget *widget);
GdkModifierType   gtk_widget_get_modifier_mask (GtkWidget         *widget,                                                 GdkModifierIntent  intent);
GType       gtk_paned_get_type     (void) ;
GtkWidget * gtk_paned_new          (GtkOrientation orientation);
void        gtk_paned_add1         (GtkPaned       *paned,                                     GtkWidget      *child);
void        gtk_paned_add2         (GtkPaned       *paned,                                     GtkWidget      *child);
void        gtk_paned_pack1        (GtkPaned       *paned,                                     GtkWidget      *child,                                     gboolean        resize,                                     gboolean        shrink);
void        gtk_paned_pack2        (GtkPaned       *paned,                                     GtkWidget      *child,                                     gboolean        resize,                                     gboolean        shrink);
gint        gtk_paned_get_position (GtkPaned       *paned);
void        gtk_paned_set_position (GtkPaned       *paned,                                     gint            position);
GtkWidget * gtk_paned_get_child1   (GtkPaned       *paned);
GtkWidget * gtk_paned_get_child2   (GtkPaned       *paned);
GdkWindow * gtk_paned_get_handle_window (GtkPaned  *paned);
GType gtk_file_chooser_get_type (void) ;
GQuark gtk_file_chooser_error_quark (void);
void                 gtk_file_chooser_set_action          (GtkFileChooser       *chooser, 							   GtkFileChooserAction  action);
GtkFileChooserAction gtk_file_chooser_get_action          (GtkFileChooser       *chooser);
void                 gtk_file_chooser_set_local_only      (GtkFileChooser       *chooser, 							   gboolean              local_only);
gboolean             gtk_file_chooser_get_local_only      (GtkFileChooser       *chooser);
void                 gtk_file_chooser_set_select_multiple (GtkFileChooser       *chooser, 							   gboolean              select_multiple);
gboolean             gtk_file_chooser_get_select_multiple (GtkFileChooser       *chooser);
void                 gtk_file_chooser_set_show_hidden     (GtkFileChooser       *chooser, 							   gboolean              show_hidden);
gboolean             gtk_file_chooser_get_show_hidden     (GtkFileChooser       *chooser);
void                 gtk_file_chooser_set_do_overwrite_confirmation (GtkFileChooser *chooser, 								     gboolean        do_overwrite_confirmation);
gboolean             gtk_file_chooser_get_do_overwrite_confirmation (GtkFileChooser *chooser);
void                 gtk_file_chooser_set_create_folders  (GtkFileChooser       *chooser, 							  gboolean               create_folders);
gboolean             gtk_file_chooser_get_create_folders (GtkFileChooser *chooser);
void     gtk_file_chooser_set_current_name   (GtkFileChooser *chooser, 					      const gchar    *name);
gchar *  gtk_file_chooser_get_filename       (GtkFileChooser *chooser);
gboolean gtk_file_chooser_set_filename       (GtkFileChooser *chooser, 					      const char     *filename);
gboolean gtk_file_chooser_select_filename    (GtkFileChooser *chooser, 					      const char     *filename);
void     gtk_file_chooser_unselect_filename  (GtkFileChooser *chooser, 					      const char     *filename);
void     gtk_file_chooser_select_all         (GtkFileChooser *chooser);
void     gtk_file_chooser_unselect_all       (GtkFileChooser *chooser);
GSList * gtk_file_chooser_get_filenames      (GtkFileChooser *chooser);
gboolean gtk_file_chooser_set_current_folder (GtkFileChooser *chooser, 					      const gchar    *filename);
gchar *  gtk_file_chooser_get_current_folder (GtkFileChooser *chooser);
gchar *  gtk_file_chooser_get_uri                (GtkFileChooser *chooser);
gboolean gtk_file_chooser_set_uri                (GtkFileChooser *chooser, 						  const char     *uri);
gboolean gtk_file_chooser_select_uri             (GtkFileChooser *chooser, 						  const char     *uri);
void     gtk_file_chooser_unselect_uri           (GtkFileChooser *chooser, 						  const char     *uri);
GSList * gtk_file_chooser_get_uris               (GtkFileChooser *chooser);
gboolean gtk_file_chooser_set_current_folder_uri (GtkFileChooser *chooser, 						  const gchar    *uri);
gchar *  gtk_file_chooser_get_current_folder_uri (GtkFileChooser *chooser);
GFile *  gtk_file_chooser_get_file                (GtkFileChooser  *chooser);
gboolean gtk_file_chooser_set_file                (GtkFileChooser  *chooser,                                                    GFile           *file,                                                    GError         **error);
gboolean gtk_file_chooser_select_file             (GtkFileChooser  *chooser,                                                    GFile           *file,                                                    GError         **error);
void     gtk_file_chooser_unselect_file           (GtkFileChooser  *chooser,                                                    GFile           *file);
GSList * gtk_file_chooser_get_files               (GtkFileChooser  *chooser);
gboolean gtk_file_chooser_set_current_folder_file (GtkFileChooser  *chooser,                                                    GFile           *file,                                                    GError         **error);
GFile *  gtk_file_chooser_get_current_folder_file (GtkFileChooser  *chooser);
void       gtk_file_chooser_set_preview_widget        (GtkFileChooser *chooser, 						       GtkWidget      *preview_widget);
GtkWidget *gtk_file_chooser_get_preview_widget        (GtkFileChooser *chooser);
void       gtk_file_chooser_set_preview_widget_active (GtkFileChooser *chooser, 						       gboolean        active);
gboolean   gtk_file_chooser_get_preview_widget_active (GtkFileChooser *chooser);
void       gtk_file_chooser_set_use_preview_label     (GtkFileChooser *chooser, 						       gboolean        use_label);
gboolean   gtk_file_chooser_get_use_preview_label     (GtkFileChooser *chooser);
char  *gtk_file_chooser_get_preview_filename (GtkFileChooser *chooser);
char  *gtk_file_chooser_get_preview_uri      (GtkFileChooser *chooser);
GFile *gtk_file_chooser_get_preview_file     (GtkFileChooser *chooser);
void       gtk_file_chooser_set_extra_widget (GtkFileChooser *chooser, 					      GtkWidget      *extra_widget);
GtkWidget *gtk_file_chooser_get_extra_widget (GtkFileChooser *chooser);
void    gtk_file_chooser_add_filter    (GtkFileChooser *chooser, 					GtkFileFilter  *filter);
void    gtk_file_chooser_remove_filter (GtkFileChooser *chooser, 					GtkFileFilter  *filter);
GSList *gtk_file_chooser_list_filters  (GtkFileChooser *chooser);
void           gtk_file_chooser_set_filter (GtkFileChooser *chooser, 					   GtkFileFilter  *filter);
GtkFileFilter *gtk_file_chooser_get_filter (GtkFileChooser *chooser);
gboolean gtk_file_chooser_add_shortcut_folder    (GtkFileChooser *chooser, 						  const char     *folder, 						  GError        **error);
gboolean gtk_file_chooser_remove_shortcut_folder (GtkFileChooser *chooser, 						  const char     *folder, 						  GError        **error);
GSList *gtk_file_chooser_list_shortcut_folders   (GtkFileChooser *chooser);
gboolean gtk_file_chooser_add_shortcut_folder_uri    (GtkFileChooser *chooser, 						      const char     *uri, 						      GError        **error);
gboolean gtk_file_chooser_remove_shortcut_folder_uri (GtkFileChooser *chooser, 						      const char     *uri, 						      GError        **error);
GSList *gtk_file_chooser_list_shortcut_folder_uris   (GtkFileChooser *chooser);
GType      gtk_alignment_get_type   (void) ;
GtkWidget* gtk_alignment_new        (gfloat             xalign, 				     gfloat             yalign, 				     gfloat             xscale, 				     gfloat             yscale);
void       gtk_alignment_set        (GtkAlignment      *alignment, 				     gfloat             xalign, 				     gfloat             yalign, 				     gfloat             xscale, 				     gfloat             yscale);
void       gtk_alignment_set_padding (GtkAlignment      *alignment, 				      guint              padding_top, 				      guint              padding_bottom, 				      guint              padding_left, 				      guint              padding_right);
void       gtk_alignment_get_padding (GtkAlignment      *alignment, 				      guint             *padding_top, 				      guint             *padding_bottom, 				      guint             *padding_left, 				      guint             *padding_right);
GType             gtk_numerable_icon_get_type                 (void) ;
GIcon *           gtk_numerable_icon_new                      (GIcon            *base_icon);
GIcon *           gtk_numerable_icon_new_with_style_context   (GIcon            *base_icon,                                                                GtkStyleContext  *context);
GtkStyleContext * gtk_numerable_icon_get_style_context        (GtkNumerableIcon *self);
void              gtk_numerable_icon_set_style_context        (GtkNumerableIcon *self,                                                                GtkStyleContext  *style);
gint              gtk_numerable_icon_get_count                (GtkNumerableIcon *self);
void              gtk_numerable_icon_set_count                (GtkNumerableIcon *self,                                                                gint count);
const gchar *     gtk_numerable_icon_get_label                (GtkNumerableIcon *self);
void              gtk_numerable_icon_set_label                (GtkNumerableIcon *self,                                                                const gchar      *label);
void              gtk_numerable_icon_set_background_gicon     (GtkNumerableIcon *self,                                                                GIcon            *icon);
GIcon *           gtk_numerable_icon_get_background_gicon     (GtkNumerableIcon *self);
void              gtk_numerable_icon_set_background_icon_name (GtkNumerableIcon *self,                                                                const gchar      *icon_name);
const gchar *     gtk_numerable_icon_get_background_icon_name (GtkNumerableIcon *self);
GType                 gtk_expander_get_type            (void) ;
GtkWidget            *gtk_expander_new                 (const gchar *label);
GtkWidget            *gtk_expander_new_with_mnemonic   (const gchar *label);
void                  gtk_expander_set_expanded        (GtkExpander *expander,                                                         gboolean     expanded);
gboolean              gtk_expander_get_expanded        (GtkExpander *expander);
void                  gtk_expander_set_spacing         (GtkExpander *expander,                                                         gint         spacing);
gint                  gtk_expander_get_spacing         (GtkExpander *expander);
void                  gtk_expander_set_label           (GtkExpander *expander,                                                         const gchar *label);
const gchar *         gtk_expander_get_label           (GtkExpander *expander);
void                  gtk_expander_set_use_underline   (GtkExpander *expander,                                                         gboolean     use_underline);
gboolean              gtk_expander_get_use_underline   (GtkExpander *expander);
void                  gtk_expander_set_use_markup      (GtkExpander *expander,                                                         gboolean    use_markup);
gboolean              gtk_expander_get_use_markup      (GtkExpander *expander);
void                  gtk_expander_set_label_widget    (GtkExpander *expander, 						        GtkWidget   *label_widget);
GtkWidget            *gtk_expander_get_label_widget    (GtkExpander *expander);
void                  gtk_expander_set_label_fill      (GtkExpander *expander, 						        gboolean     label_fill);
gboolean              gtk_expander_get_label_fill      (GtkExpander *expander);
void                  gtk_expander_set_resize_toplevel (GtkExpander *expander,                                                         gboolean     resize_toplevel);
gboolean              gtk_expander_get_resize_toplevel (GtkExpander *expander);
GType           gtk_tree_drag_dest_get_type   (void) ;
gboolean gtk_tree_drag_dest_drag_data_received (GtkTreeDragDest   *drag_dest, 						GtkTreePath       *dest, 						GtkSelectionData  *selection_data);
gboolean gtk_tree_drag_dest_row_drop_possible  (GtkTreeDragDest   *drag_dest, 						GtkTreePath       *dest_path, 						GtkSelectionData  *selection_data);
gboolean gtk_tree_set_row_drag_data            (GtkSelectionData  *selection_data, 						GtkTreeModel      *tree_model, 						GtkTreePath       *path);
gboolean gtk_tree_get_row_drag_data            (GtkSelectionData  *selection_data, 						GtkTreeModel     **tree_model, 						GtkTreePath      **path);
void	   gtk_accel_map_add_entry	(const gchar		*accel_path, 					 guint			 accel_key, 					 GdkModifierType         accel_mods);
gboolean   gtk_accel_map_lookup_entry	(const gchar		*accel_path, 					 GtkAccelKey		*key);
gboolean   gtk_accel_map_change_entry	(const gchar		*accel_path, 					 guint			 accel_key, 					 GdkModifierType	 accel_mods, 					 gboolean		 replace);
void	   gtk_accel_map_load		(const gchar		*file_name);
void	   gtk_accel_map_save		(const gchar		*file_name);
void	   gtk_accel_map_foreach	(gpointer		 data, 					 GtkAccelMapForeach	 foreach_func);
void	   gtk_accel_map_load_fd	(gint			 fd);
void	   gtk_accel_map_load_scanner	(GScanner		*scanner);
void	   gtk_accel_map_save_fd	(gint			 fd);
void       gtk_accel_map_lock_path      (const gchar            *accel_path);
void       gtk_accel_map_unlock_path    (const gchar            *accel_path);
void	gtk_accel_map_add_filter	 (const gchar		*filter_pattern);
void	gtk_accel_map_foreach_unfiltered (gpointer		 data, 					  GtkAccelMapForeach	 foreach_func);
GType        gtk_accel_map_get_type (void) ;
GtkAccelMap *gtk_accel_map_get      (void);
GType           gtk_widget_path_get_type            (void) ;
GtkWidgetPath * gtk_widget_path_new                 (void);
GtkWidgetPath * gtk_widget_path_copy                (const GtkWidgetPath *path);
GtkWidgetPath * gtk_widget_path_ref                 (GtkWidgetPath       *path);
void            gtk_widget_path_unref               (GtkWidgetPath       *path);
void            gtk_widget_path_free                (GtkWidgetPath       *path);
char *          gtk_widget_path_to_string           (const GtkWidgetPath *path);
gint            gtk_widget_path_length              (const GtkWidgetPath *path);
gint            gtk_widget_path_append_type         (GtkWidgetPath       *path,                                                      GType                type);
void            gtk_widget_path_prepend_type        (GtkWidgetPath       *path,                                                      GType                type);
gint            gtk_widget_path_append_with_siblings(GtkWidgetPath       *path,                                                      GtkWidgetPath       *siblings,                                                      guint                sibling_index);  gint            gtk_widget_path_append_for_widget   (GtkWidgetPath       *path,                                                      GtkWidget           *widget);
GType               gtk_widget_path_iter_get_object_type  (const GtkWidgetPath *path,                                                            gint                 pos);
void                gtk_widget_path_iter_set_object_type  (GtkWidgetPath       *path,                                                            gint                 pos,                                                            GType                type);
const GtkWidgetPath *                    gtk_widget_path_iter_get_siblings     (const GtkWidgetPath *path,                                                            gint                 pos);
guint               gtk_widget_path_iter_get_sibling_index(const GtkWidgetPath *path,                                                            gint                 pos);
const gchar *          gtk_widget_path_iter_get_name  (const GtkWidgetPath *path,                                                        gint                 pos);
void                   gtk_widget_path_iter_set_name  (GtkWidgetPath       *path,                                                        gint                 pos,                                                        const gchar         *name);
gboolean               gtk_widget_path_iter_has_name  (const GtkWidgetPath *path,                                                        gint                 pos,                                                        const gchar         *name);
gboolean               gtk_widget_path_iter_has_qname (const GtkWidgetPath *path,                                                        gint                 pos,                                                        GQuark               qname);
void     gtk_widget_path_iter_add_class     (GtkWidgetPath       *path,                                              gint                 pos,                                              const gchar         *name);
void     gtk_widget_path_iter_remove_class  (GtkWidgetPath       *path,                                              gint                 pos,                                              const gchar         *name);
void     gtk_widget_path_iter_clear_classes (GtkWidgetPath       *path,                                              gint                 pos);
GSList * gtk_widget_path_iter_list_classes  (const GtkWidgetPath *path,                                              gint                 pos);
gboolean gtk_widget_path_iter_has_class     (const GtkWidgetPath *path,                                              gint                 pos,                                              const gchar         *name);
gboolean gtk_widget_path_iter_has_qclass    (const GtkWidgetPath *path,                                              gint                 pos,                                              GQuark               qname);
void     gtk_widget_path_iter_add_region    (GtkWidgetPath      *path,                                              gint                pos,                                              const gchar        *name,                                              GtkRegionFlags     flags);
void     gtk_widget_path_iter_remove_region (GtkWidgetPath      *path,                                              gint                pos,                                              const gchar        *name);
void     gtk_widget_path_iter_clear_regions (GtkWidgetPath      *path,                                              gint                pos);
GSList * gtk_widget_path_iter_list_regions  (const GtkWidgetPath *path,                                              gint                 pos);
gboolean gtk_widget_path_iter_has_region    (const GtkWidgetPath *path,                                              gint                 pos,                                              const gchar         *name,                                              GtkRegionFlags      *flags);
gboolean gtk_widget_path_iter_has_qregion   (const GtkWidgetPath *path,                                              gint                 pos,                                              GQuark               qname,                                              GtkRegionFlags      *flags);
GType           gtk_widget_path_get_object_type (const GtkWidgetPath *path);
gboolean        gtk_widget_path_is_type    (const GtkWidgetPath *path,                                             GType                type);
gboolean        gtk_widget_path_has_parent (const GtkWidgetPath *path,                                             GType                type);
GType gtk_invisible_get_type (void) ;
GtkWidget* gtk_invisible_new            (void);
GtkWidget* gtk_invisible_new_for_screen (GdkScreen    *screen);
void	   gtk_invisible_set_screen	(GtkInvisible *invisible, 					 GdkScreen    *screen);
GdkScreen* gtk_invisible_get_screen	(GtkInvisible *invisible);
GType            gtk_tree_selection_get_type            (void) ;
void             gtk_tree_selection_set_mode            (GtkTreeSelection            *selection, 							 GtkSelectionMode             type);
GtkSelectionMode gtk_tree_selection_get_mode        (GtkTreeSelection            *selection);
void             gtk_tree_selection_set_select_function (GtkTreeSelection            *selection, 							 GtkTreeSelectionFunc         func, 							 gpointer                     data, 							 GDestroyNotify               destroy);
gpointer         gtk_tree_selection_get_user_data       (GtkTreeSelection            *selection);
GtkTreeView*     gtk_tree_selection_get_tree_view       (GtkTreeSelection            *selection);
GtkTreeSelectionFunc gtk_tree_selection_get_select_function (GtkTreeSelection        *selection);
gboolean         gtk_tree_selection_get_selected        (GtkTreeSelection            *selection, 							 GtkTreeModel               **model, 							 GtkTreeIter                 *iter);
GList *          gtk_tree_selection_get_selected_rows   (GtkTreeSelection            *selection,                                                          GtkTreeModel               **model);
gint             gtk_tree_selection_count_selected_rows (GtkTreeSelection            *selection);
void             gtk_tree_selection_selected_foreach    (GtkTreeSelection            *selection, 							 GtkTreeSelectionForeachFunc  func, 							 gpointer                     data);
void             gtk_tree_selection_select_path         (GtkTreeSelection            *selection, 							 GtkTreePath                 *path);
void             gtk_tree_selection_unselect_path       (GtkTreeSelection            *selection, 							 GtkTreePath                 *path);
void             gtk_tree_selection_select_iter         (GtkTreeSelection            *selection, 							 GtkTreeIter                 *iter);
void             gtk_tree_selection_unselect_iter       (GtkTreeSelection            *selection, 							 GtkTreeIter                 *iter);
gboolean         gtk_tree_selection_path_is_selected    (GtkTreeSelection            *selection, 							 GtkTreePath                 *path);
gboolean         gtk_tree_selection_iter_is_selected    (GtkTreeSelection            *selection, 							 GtkTreeIter                 *iter);
void             gtk_tree_selection_select_all          (GtkTreeSelection            *selection);
void             gtk_tree_selection_unselect_all        (GtkTreeSelection            *selection);
void             gtk_tree_selection_select_range        (GtkTreeSelection            *selection, 							 GtkTreePath                 *start_path, 							 GtkTreePath                 *end_path);
void             gtk_tree_selection_unselect_range      (GtkTreeSelection            *selection,                                                          GtkTreePath                 *start_path, 							 GtkTreePath                 *end_path);
GType        gtk_separator_tool_item_get_type (void) ;
GtkToolItem *gtk_separator_tool_item_new      (void);
gboolean     gtk_separator_tool_item_get_draw (GtkSeparatorToolItem *item);
void         gtk_separator_tool_item_set_draw (GtkSeparatorToolItem *item, 					       gboolean              draw);
GType        gtk_text_tag_get_type     (void) ;
GtkTextTag  *gtk_text_tag_new          (const gchar       *name);
gint         gtk_text_tag_get_priority (GtkTextTag        *tag);
void         gtk_text_tag_set_priority (GtkTextTag        *tag,                                         gint               priority);
gboolean     gtk_text_tag_event        (GtkTextTag        *tag,                                         GObject           *event_object,                                         GdkEvent          *event,                                         const GtkTextIter *iter);
GType         gtk_clipboard_get_type (void) ;
GtkClipboard *gtk_clipboard_get_for_display (GdkDisplay   *display, 					     GdkAtom       selection);
GtkClipboard *gtk_clipboard_get             (GdkAtom       selection);
GdkDisplay   *gtk_clipboard_get_display     (GtkClipboard *clipboard);
gboolean gtk_clipboard_set_with_data  (GtkClipboard          *clipboard, 				       const GtkTargetEntry  *targets, 				       guint                  n_targets, 				       GtkClipboardGetFunc    get_func, 				       GtkClipboardClearFunc  clear_func, 				       gpointer               user_data);
gboolean gtk_clipboard_set_with_owner (GtkClipboard          *clipboard, 				       const GtkTargetEntry  *targets, 				       guint                  n_targets, 				       GtkClipboardGetFunc    get_func, 				       GtkClipboardClearFunc  clear_func, 				       GObject               *owner);
GObject *gtk_clipboard_get_owner      (GtkClipboard          *clipboard);
void     gtk_clipboard_clear          (GtkClipboard          *clipboard);
void     gtk_clipboard_set_text       (GtkClipboard          *clipboard, 				       const gchar           *text, 				       gint                   len);
void     gtk_clipboard_set_image      (GtkClipboard          *clipboard, 				       GdkPixbuf             *pixbuf);
void gtk_clipboard_request_contents  (GtkClipboard                     *clipboard,                                       GdkAtom                           target,                                       GtkClipboardReceivedFunc          callback,                                       gpointer                          user_data);
void gtk_clipboard_request_text      (GtkClipboard                     *clipboard,                                       GtkClipboardTextReceivedFunc      callback,                                       gpointer                          user_data);
void gtk_clipboard_request_rich_text (GtkClipboard                     *clipboard,                                       GtkTextBuffer                    *buffer,                                       GtkClipboardRichTextReceivedFunc  callback,                                       gpointer                          user_data);
void gtk_clipboard_request_image     (GtkClipboard                     *clipboard,                                       GtkClipboardImageReceivedFunc     callback,                                       gpointer                          user_data);
void gtk_clipboard_request_uris      (GtkClipboard                     *clipboard,                                       GtkClipboardURIReceivedFunc       callback,                                       gpointer                          user_data);
void gtk_clipboard_request_targets   (GtkClipboard                     *clipboard,                                       GtkClipboardTargetsReceivedFunc   callback,                                       gpointer                          user_data);
GtkSelectionData *gtk_clipboard_wait_for_contents  (GtkClipboard  *clipboard,                                                     GdkAtom        target);
gchar *           gtk_clipboard_wait_for_text      (GtkClipboard  *clipboard);
guint8 *          gtk_clipboard_wait_for_rich_text (GtkClipboard  *clipboard,                                                     GtkTextBuffer *buffer,                                                     GdkAtom       *format,                                                     gsize         *length);
GdkPixbuf *       gtk_clipboard_wait_for_image     (GtkClipboard  *clipboard);
gchar **          gtk_clipboard_wait_for_uris      (GtkClipboard  *clipboard);
gboolean          gtk_clipboard_wait_for_targets   (GtkClipboard  *clipboard,                                                     GdkAtom      **targets,                                                     gint          *n_targets);
gboolean gtk_clipboard_wait_is_text_available      (GtkClipboard  *clipboard);
gboolean gtk_clipboard_wait_is_rich_text_available (GtkClipboard  *clipboard,                                                     GtkTextBuffer *buffer);
gboolean gtk_clipboard_wait_is_image_available     (GtkClipboard  *clipboard);
gboolean gtk_clipboard_wait_is_uris_available      (GtkClipboard  *clipboard);
gboolean gtk_clipboard_wait_is_target_available    (GtkClipboard  *clipboard,                                                     GdkAtom        target);
void gtk_clipboard_set_can_store (GtkClipboard         *clipboard, 				  const GtkTargetEntry *targets, 				  gint                  n_targets);
void gtk_clipboard_store         (GtkClipboard   *clipboard);
void     _gtk_clipboard_handle_event    (GdkEventOwnerChange *event);
void     _gtk_clipboard_store_all       (void);
GType      gtk_spinner_get_type  (void) ;
GtkWidget *gtk_spinner_new (void);
void       gtk_spinner_start      (GtkSpinner *spinner);
void       gtk_spinner_stop       (GtkSpinner *spinner);
GType           gtk_icon_factory_get_type (void) ;
GtkIconFactory* gtk_icon_factory_new      (void);
void            gtk_icon_factory_add      (GtkIconFactory *factory,                                            const gchar    *stock_id,                                            GtkIconSet     *icon_set);
GtkIconSet*     gtk_icon_factory_lookup   (GtkIconFactory *factory,                                            const gchar    *stock_id);
void        gtk_icon_factory_add_default     (GtkIconFactory  *factory);
void        gtk_icon_factory_remove_default  (GtkIconFactory  *factory);
GtkIconSet* gtk_icon_factory_lookup_default  (const gchar     *stock_id);
gboolean gtk_icon_size_lookup              (GtkIconSize  size, 					    gint        *width, 					    gint        *height); 
gboolean gtk_icon_size_lookup_for_settings (GtkSettings *settings, 					    GtkIconSize  size, 					    gint        *width, 					    gint        *height);
GtkIconSize           gtk_icon_size_register       (const gchar *name,                                                     gint         width,                                                     gint         height);
void                  gtk_icon_size_register_alias (const gchar *alias,                                                     GtkIconSize  target);
GtkIconSize           gtk_icon_size_from_name      (const gchar *name);
const gchar*          gtk_icon_size_get_name       (GtkIconSize  size);
GType       gtk_icon_set_get_type        (void) ;
GtkIconSet* gtk_icon_set_new             (void);
GtkIconSet* gtk_icon_set_new_from_pixbuf (GdkPixbuf       *pixbuf);
GtkIconSet* gtk_icon_set_ref             (GtkIconSet      *icon_set);
void        gtk_icon_set_unref           (GtkIconSet      *icon_set);
GtkIconSet* gtk_icon_set_copy            (GtkIconSet      *icon_set);
_IN_3_0_FOR(gtk_icon_set_render_icon_pixbuf)
GdkPixbuf*  gtk_icon_set_render_icon     (GtkIconSet      *icon_set,                                           GtkStyle        *style,                                           GtkTextDirection direction,                                           GtkStateType     state,                                           GtkIconSize      size,                                           GtkWidget       *widget,                                           const gchar     *detail);
void           gtk_icon_set_add_source   (GtkIconSet          *icon_set,                                           const GtkIconSource *source);
void           gtk_icon_set_get_sizes    (GtkIconSet          *icon_set,                                           GtkIconSize        **sizes,                                           gint                *n_sizes);
GType          gtk_icon_source_get_type                 (void) ;
GtkIconSource* gtk_icon_source_new                      (void);
GtkIconSource* gtk_icon_source_copy                     (const GtkIconSource *source);
void           gtk_icon_source_free                     (GtkIconSource       *source);
void           gtk_icon_source_set_filename             (GtkIconSource       *source,                                                          const gchar         *filename);
void           gtk_icon_source_set_icon_name            (GtkIconSource       *source,                                                          const gchar         *icon_name);
void           gtk_icon_source_set_pixbuf               (GtkIconSource       *source,                                                          GdkPixbuf           *pixbuf);
const gchar *    gtk_icon_source_get_filename             (const GtkIconSource *source);
const gchar *    gtk_icon_source_get_icon_name            (const GtkIconSource *source);
GdkPixbuf*       gtk_icon_source_get_pixbuf               (const GtkIconSource *source);
void             gtk_icon_source_set_direction_wildcarded (GtkIconSource       *source,                                                            gboolean             setting);
void             gtk_icon_source_set_state_wildcarded     (GtkIconSource       *source,                                                            gboolean             setting);
void             gtk_icon_source_set_size_wildcarded      (GtkIconSource       *source,                                                            gboolean             setting);
gboolean         gtk_icon_source_get_size_wildcarded      (const GtkIconSource *source);
gboolean         gtk_icon_source_get_state_wildcarded     (const GtkIconSource *source);
gboolean         gtk_icon_source_get_direction_wildcarded (const GtkIconSource *source);
void             gtk_icon_source_set_direction            (GtkIconSource       *source,                                                            GtkTextDirection     direction);
void             gtk_icon_source_set_state                (GtkIconSource       *source,                                                            GtkStateType         state);
void             gtk_icon_source_set_size                 (GtkIconSource       *source,                                                            GtkIconSize          size);
GtkTextDirection gtk_icon_source_get_direction            (const GtkIconSource *source);
GtkStateType     gtk_icon_source_get_state                (const GtkIconSource *source);
GtkIconSize      gtk_icon_source_get_size                 (const GtkIconSource *source);
void _gtk_icon_set_invalidate_caches (void);
GList* _gtk_icon_factory_list_ids (void);
void _gtk_icon_factory_ensure_default_icons (void);
GType                 gtk_file_chooser_button_get_type         (void) ;
GtkWidget *           gtk_file_chooser_button_new              (const gchar          *title, 								GtkFileChooserAction  action);
GtkWidget *           gtk_file_chooser_button_new_with_dialog  (GtkWidget            *dialog);
const gchar *         gtk_file_chooser_button_get_title        (GtkFileChooserButton *button);
void                  gtk_file_chooser_button_set_title        (GtkFileChooserButton *button, 								const gchar          *title);
gint                  gtk_file_chooser_button_get_width_chars  (GtkFileChooserButton *button);
void                  gtk_file_chooser_button_set_width_chars  (GtkFileChooserButton *button, 								gint                  n_chars);
gboolean              gtk_file_chooser_button_get_focus_on_click (GtkFileChooserButton *button);
void                  gtk_file_chooser_button_set_focus_on_click (GtkFileChooserButton *button,                                                                   gboolean              focus_on_click);
GType         gtk_combo_box_get_type                 (void) ;
GtkWidget    *gtk_combo_box_new                      (void);
GtkWidget    *gtk_combo_box_new_with_area            (GtkCellArea  *area);
GtkWidget    *gtk_combo_box_new_with_area_and_entry  (GtkCellArea  *area);
GtkWidget    *gtk_combo_box_new_with_entry           (void);
GtkWidget    *gtk_combo_box_new_with_model           (GtkTreeModel *model);
GtkWidget    *gtk_combo_box_new_with_model_and_entry (GtkTreeModel *model);
gint          gtk_combo_box_get_wrap_width         (GtkComboBox *combo_box);
void          gtk_combo_box_set_wrap_width         (GtkComboBox *combo_box,                                                     gint         width);
gint          gtk_combo_box_get_row_span_column    (GtkComboBox *combo_box);
void          gtk_combo_box_set_row_span_column    (GtkComboBox *combo_box,                                                     gint         row_span);
gint          gtk_combo_box_get_column_span_column (GtkComboBox *combo_box);
void          gtk_combo_box_set_column_span_column (GtkComboBox *combo_box,                                                     gint         column_span);
gboolean      gtk_combo_box_get_add_tearoffs       (GtkComboBox *combo_box);
void          gtk_combo_box_set_add_tearoffs       (GtkComboBox *combo_box,                                                     gboolean     add_tearoffs);
const gchar * gtk_combo_box_get_title              (GtkComboBox *combo_box);
void          gtk_combo_box_set_title              (GtkComboBox *combo_box,                                                     const gchar *title);
gboolean      gtk_combo_box_get_focus_on_click     (GtkComboBox *combo);
void          gtk_combo_box_set_focus_on_click     (GtkComboBox *combo,                                                     gboolean     focus_on_click);
gint          gtk_combo_box_get_active       (GtkComboBox     *combo_box);
void          gtk_combo_box_set_active       (GtkComboBox     *combo_box,                                               gint             index_);
gboolean      gtk_combo_box_get_active_iter  (GtkComboBox     *combo_box,                                               GtkTreeIter     *iter);
void          gtk_combo_box_set_active_iter  (GtkComboBox     *combo_box,                                               GtkTreeIter     *iter);
void          gtk_combo_box_set_model        (GtkComboBox     *combo_box,                                               GtkTreeModel    *model);
GtkTreeModel *gtk_combo_box_get_model        (GtkComboBox     *combo_box);
GtkTreeViewRowSeparatorFunc gtk_combo_box_get_row_separator_func (GtkComboBox                *combo_box);
void                        gtk_combo_box_set_row_separator_func (GtkComboBox                *combo_box,                                                                   GtkTreeViewRowSeparatorFunc func,                                                                   gpointer                    data,                                                                   GDestroyNotify              destroy);
void               gtk_combo_box_set_button_sensitivity (GtkComboBox        *combo_box,                                                          GtkSensitivityType  sensitivity);
GtkSensitivityType gtk_combo_box_get_button_sensitivity (GtkComboBox        *combo_box);
gboolean           gtk_combo_box_get_has_entry          (GtkComboBox        *combo_box);
void               gtk_combo_box_set_entry_text_column  (GtkComboBox        *combo_box,                                                          gint                text_column);
gint               gtk_combo_box_get_entry_text_column  (GtkComboBox        *combo_box);
void               gtk_combo_box_set_popup_fixed_width  (GtkComboBox      *combo_box,                                                          gboolean          fixed);
gboolean           gtk_combo_box_get_popup_fixed_width  (GtkComboBox      *combo_box);
void          gtk_combo_box_popup            (GtkComboBox     *combo_box);
void          gtk_combo_box_popup_for_device (GtkComboBox     *combo_box,                                               GdkDevice       *device);
void          gtk_combo_box_popdown          (GtkComboBox     *combo_box);
AtkObject*    gtk_combo_box_get_popup_accessible (GtkComboBox *combo_box);
gint          gtk_combo_box_get_id_column        (GtkComboBox *combo_box);
void          gtk_combo_box_set_id_column        (GtkComboBox *combo_box,                                                   gint         id_column);
const gchar * gtk_combo_box_get_active_id        (GtkComboBox *combo_box);
gboolean      gtk_combo_box_set_active_id        (GtkComboBox *combo_box,                                                   const gchar *active_id);
GType            gtk_cell_renderer_combo_get_type (void) ;
GtkCellRenderer *gtk_cell_renderer_combo_new      (void);
GType              gtk_page_setup_get_type          (void) ;
GtkPageSetup *     gtk_page_setup_new               (void);
GtkPageSetup *     gtk_page_setup_copy              (GtkPageSetup       *other);
GtkPageOrientation gtk_page_setup_get_orientation   (GtkPageSetup       *setup);
void               gtk_page_setup_set_orientation   (GtkPageSetup       *setup, 						     GtkPageOrientation  orientation);
GtkPaperSize *     gtk_page_setup_get_paper_size    (GtkPageSetup       *setup);
void               gtk_page_setup_set_paper_size    (GtkPageSetup       *setup, 						     GtkPaperSize       *size);
gdouble            gtk_page_setup_get_top_margin    (GtkPageSetup       *setup, 						     GtkUnit             unit);
void               gtk_page_setup_set_top_margin    (GtkPageSetup       *setup, 						     gdouble             margin, 						     GtkUnit             unit);
gdouble            gtk_page_setup_get_bottom_margin (GtkPageSetup       *setup, 						     GtkUnit             unit);
void               gtk_page_setup_set_bottom_margin (GtkPageSetup       *setup, 						     gdouble             margin, 						     GtkUnit             unit);
gdouble            gtk_page_setup_get_left_margin   (GtkPageSetup       *setup, 						     GtkUnit             unit);
void               gtk_page_setup_set_left_margin   (GtkPageSetup       *setup, 						     gdouble             margin, 						     GtkUnit             unit);
gdouble            gtk_page_setup_get_right_margin  (GtkPageSetup       *setup, 						     GtkUnit             unit);
void               gtk_page_setup_set_right_margin  (GtkPageSetup       *setup, 						     gdouble             margin, 						     GtkUnit             unit);
void gtk_page_setup_set_paper_size_and_default_margins (GtkPageSetup    *setup, 							GtkPaperSize    *size);
gdouble            gtk_page_setup_get_paper_width   (GtkPageSetup       *setup, 						     GtkUnit             unit);
gdouble            gtk_page_setup_get_paper_height  (GtkPageSetup       *setup, 						     GtkUnit             unit);
gdouble            gtk_page_setup_get_page_width    (GtkPageSetup       *setup, 						     GtkUnit             unit);
gdouble            gtk_page_setup_get_page_height   (GtkPageSetup       *setup, 						     GtkUnit             unit);
GtkPageSetup	  *gtk_page_setup_new_from_file	    (const gchar         *file_name, 						     GError              **error);
gboolean	   gtk_page_setup_load_file	    (GtkPageSetup        *setup, 						     const char          *file_name, 						     GError             **error);
gboolean	   gtk_page_setup_to_file	    (GtkPageSetup        *setup, 						     const char          *file_name, 						     GError             **error);
GtkPageSetup	  *gtk_page_setup_new_from_key_file (GKeyFile            *key_file, 						     const gchar         *group_name, 						     GError             **error);
gboolean           gtk_page_setup_load_key_file     (GtkPageSetup        *setup, 				                     GKeyFile            *key_file, 				                     const gchar         *group_name, 				                     GError             **error);
void		   gtk_page_setup_to_key_file	    (GtkPageSetup        *setup, 						     GKeyFile            *key_file, 						     const gchar         *group_name);
GType          gtk_text_view_get_type              (void) ;
GtkWidget *    gtk_text_view_new                   (void);
GtkWidget *    gtk_text_view_new_with_buffer       (GtkTextBuffer *buffer);
void           gtk_text_view_set_buffer            (GtkTextView   *text_view,                                                     GtkTextBuffer *buffer);
GtkTextBuffer *gtk_text_view_get_buffer            (GtkTextView   *text_view);
gboolean       gtk_text_view_scroll_to_iter        (GtkTextView   *text_view,                                                     GtkTextIter   *iter,                                                     gdouble        within_margin,                                                     gboolean       use_align,                                                     gdouble        xalign,                                                     gdouble        yalign);
void           gtk_text_view_scroll_to_mark        (GtkTextView   *text_view,                                                     GtkTextMark   *mark,                                                     gdouble        within_margin,                                                     gboolean       use_align,                                                     gdouble        xalign,                                                     gdouble        yalign);
void           gtk_text_view_scroll_mark_onscreen  (GtkTextView   *text_view,                                                     GtkTextMark   *mark);
gboolean       gtk_text_view_move_mark_onscreen    (GtkTextView   *text_view,                                                     GtkTextMark   *mark);
gboolean       gtk_text_view_place_cursor_onscreen (GtkTextView   *text_view);
void           gtk_text_view_get_visible_rect      (GtkTextView   *text_view,                                                     GdkRectangle  *visible_rect);
void           gtk_text_view_set_cursor_visible    (GtkTextView   *text_view,                                                     gboolean       setting);
gboolean       gtk_text_view_get_cursor_visible    (GtkTextView   *text_view);
void           gtk_text_view_get_cursor_locations  (GtkTextView       *text_view,                                                     const GtkTextIter *iter,                                                     GdkRectangle      *strong,                                                     GdkRectangle      *weak);
void           gtk_text_view_get_iter_location     (GtkTextView   *text_view,                                                     const GtkTextIter *iter,                                                     GdkRectangle  *location);
void           gtk_text_view_get_iter_at_location  (GtkTextView   *text_view,                                                     GtkTextIter   *iter,                                                     gint           x,                                                     gint           y);
void           gtk_text_view_get_iter_at_position  (GtkTextView   *text_view,                                                     GtkTextIter   *iter, 						    gint          *trailing,                                                     gint           x,                                                     gint           y);
void           gtk_text_view_get_line_yrange       (GtkTextView       *text_view,                                                     const GtkTextIter *iter,                                                     gint              *y,                                                     gint              *height);
void           gtk_text_view_get_line_at_y         (GtkTextView       *text_view,                                                     GtkTextIter       *target_iter,                                                     gint               y,                                                     gint              *line_top);
void gtk_text_view_buffer_to_window_coords (GtkTextView       *text_view,                                             GtkTextWindowType  win,                                             gint               buffer_x,                                             gint               buffer_y,                                             gint              *window_x,                                             gint              *window_y);
void gtk_text_view_window_to_buffer_coords (GtkTextView       *text_view,                                             GtkTextWindowType  win,                                             gint               window_x,                                             gint               window_y,                                             gint              *buffer_x,                                             gint              *buffer_y);
GtkAdjustment*   gtk_text_view_get_hadjustment (GtkTextView   *text_view);
GtkAdjustment*   gtk_text_view_get_vadjustment (GtkTextView   *text_view);
GdkWindow*        gtk_text_view_get_window      (GtkTextView       *text_view,                                                  GtkTextWindowType  win);
GtkTextWindowType gtk_text_view_get_window_type (GtkTextView       *text_view,                                                  GdkWindow         *window);
void gtk_text_view_set_border_window_size (GtkTextView       *text_view,                                            GtkTextWindowType  type,                                            gint               size);
gint gtk_text_view_get_border_window_size (GtkTextView       *text_view, 					   GtkTextWindowType  type);
gboolean gtk_text_view_forward_display_line           (GtkTextView       *text_view,                                                        GtkTextIter       *iter);
gboolean gtk_text_view_backward_display_line          (GtkTextView       *text_view,                                                        GtkTextIter       *iter);
gboolean gtk_text_view_forward_display_line_end       (GtkTextView       *text_view,                                                        GtkTextIter       *iter);
gboolean gtk_text_view_backward_display_line_start    (GtkTextView       *text_view,                                                        GtkTextIter       *iter);
gboolean gtk_text_view_starts_display_line            (GtkTextView       *text_view,                                                        const GtkTextIter *iter);
gboolean gtk_text_view_move_visually                  (GtkTextView       *text_view,                                                        GtkTextIter       *iter,                                                        gint               count);
gboolean        gtk_text_view_im_context_filter_keypress        (GtkTextView       *text_view,                                                                  GdkEventKey       *event);
void            gtk_text_view_reset_im_context                  (GtkTextView       *text_view);
void gtk_text_view_add_child_at_anchor (GtkTextView          *text_view,                                         GtkWidget            *child,                                         GtkTextChildAnchor   *anchor);
void gtk_text_view_add_child_in_window (GtkTextView          *text_view,                                         GtkWidget            *child,                                         GtkTextWindowType     which_window,                                                                                  gint                  xpos,                                         gint                  ypos);
void gtk_text_view_move_child          (GtkTextView          *text_view,                                         GtkWidget            *child,                                                                                  gint                  xpos,                                         gint                  ypos);
void             gtk_text_view_set_wrap_mode          (GtkTextView      *text_view,                                                        GtkWrapMode       wrap_mode);
GtkWrapMode      gtk_text_view_get_wrap_mode          (GtkTextView      *text_view);
void             gtk_text_view_set_editable           (GtkTextView      *text_view,                                                        gboolean          setting);
gboolean         gtk_text_view_get_editable           (GtkTextView      *text_view);
void             gtk_text_view_set_overwrite          (GtkTextView      *text_view, 						       gboolean          overwrite);
gboolean         gtk_text_view_get_overwrite          (GtkTextView      *text_view);
void		 gtk_text_view_set_accepts_tab        (GtkTextView	*text_view, 						       gboolean		 accepts_tab);
gboolean	 gtk_text_view_get_accepts_tab        (GtkTextView	*text_view);
void             gtk_text_view_set_pixels_above_lines (GtkTextView      *text_view,                                                        gint              pixels_above_lines);
gint             gtk_text_view_get_pixels_above_lines (GtkTextView      *text_view);
void             gtk_text_view_set_pixels_below_lines (GtkTextView      *text_view,                                                        gint              pixels_below_lines);
gint             gtk_text_view_get_pixels_below_lines (GtkTextView      *text_view);
void             gtk_text_view_set_pixels_inside_wrap (GtkTextView      *text_view,                                                        gint              pixels_inside_wrap);
gint             gtk_text_view_get_pixels_inside_wrap (GtkTextView      *text_view);
void             gtk_text_view_set_justification      (GtkTextView      *text_view,                                                        GtkJustification  justification);
GtkJustification gtk_text_view_get_justification      (GtkTextView      *text_view);
void             gtk_text_view_set_left_margin        (GtkTextView      *text_view,                                                        gint              left_margin);
gint             gtk_text_view_get_left_margin        (GtkTextView      *text_view);
void             gtk_text_view_set_right_margin       (GtkTextView      *text_view,                                                        gint              right_margin);
gint             gtk_text_view_get_right_margin       (GtkTextView      *text_view);
void             gtk_text_view_set_indent             (GtkTextView      *text_view,                                                        gint              indent);
gint             gtk_text_view_get_indent             (GtkTextView      *text_view);
void             gtk_text_view_set_tabs               (GtkTextView      *text_view,                                                        PangoTabArray    *tabs);
PangoTabArray*   gtk_text_view_get_tabs               (GtkTextView      *text_view);
GtkTextAttributes* gtk_text_view_get_default_attributes (GtkTextView    *text_view);
GType	   gtk_accel_label_get_type	     (void) ;
GtkWidget* gtk_accel_label_new		     (const gchar   *string);
GtkWidget* gtk_accel_label_get_accel_widget  (GtkAccelLabel *accel_label);
guint	   gtk_accel_label_get_accel_width   (GtkAccelLabel *accel_label);
void	   gtk_accel_label_set_accel_widget  (GtkAccelLabel *accel_label, 					      GtkWidget	    *accel_widget);
void	   gtk_accel_label_set_accel_closure (GtkAccelLabel *accel_label, 					      GClosure	    *accel_closure);
gboolean   gtk_accel_label_refetch           (GtkAccelLabel *accel_label);
gchar *    _gtk_accel_label_class_get_accelerator_label (GtkAccelLabelClass *klass, 							 guint               accelerator_key, 							 GdkModifierType     accelerator_mods);
GType         gtk_app_chooser_widget_get_type             (void) ;
GtkWidget *   gtk_app_chooser_widget_new                  (const gchar         *content_type);
void          gtk_app_chooser_widget_set_show_default     (GtkAppChooserWidget *self,                                                            gboolean             setting);
gboolean      gtk_app_chooser_widget_get_show_default     (GtkAppChooserWidget *self);
void          gtk_app_chooser_widget_set_show_recommended (GtkAppChooserWidget *self,                                                            gboolean             setting);
gboolean      gtk_app_chooser_widget_get_show_recommended (GtkAppChooserWidget *self);
void          gtk_app_chooser_widget_set_show_fallback    (GtkAppChooserWidget *self,                                                            gboolean             setting);
gboolean      gtk_app_chooser_widget_get_show_fallback    (GtkAppChooserWidget *self);
void          gtk_app_chooser_widget_set_show_other       (GtkAppChooserWidget *self,                                                            gboolean             setting);
gboolean      gtk_app_chooser_widget_get_show_other       (GtkAppChooserWidget *self);
void          gtk_app_chooser_widget_set_show_all         (GtkAppChooserWidget *self,                                                            gboolean             setting);
gboolean      gtk_app_chooser_widget_get_show_all         (GtkAppChooserWidget *self);
void          gtk_app_chooser_widget_set_default_text     (GtkAppChooserWidget *self,                                                            const gchar         *text);
const gchar * gtk_app_chooser_widget_get_default_text     (GtkAppChooserWidget *self);
GType             gtk_print_settings_get_type                (void) ;
GtkPrintSettings *gtk_print_settings_new                     (void);
GtkPrintSettings *gtk_print_settings_copy                    (GtkPrintSettings     *other);
GtkPrintSettings *gtk_print_settings_new_from_file           (const gchar          *file_name, 							      GError              **error);
gboolean          gtk_print_settings_load_file               (GtkPrintSettings     *settings, 							      const gchar          *file_name, 							      GError              **error);
gboolean          gtk_print_settings_to_file                 (GtkPrintSettings     *settings, 							      const gchar          *file_name, 							      GError              **error);
GtkPrintSettings *gtk_print_settings_new_from_key_file       (GKeyFile             *key_file, 							      const gchar          *group_name, 							      GError              **error);
gboolean          gtk_print_settings_load_key_file           (GtkPrintSettings     *settings, 							      GKeyFile             *key_file, 							      const gchar          *group_name, 							      GError              **error);
void              gtk_print_settings_to_key_file             (GtkPrintSettings     *settings, 							      GKeyFile             *key_file, 							      const gchar          *group_name);
gboolean          gtk_print_settings_has_key                 (GtkPrintSettings     *settings, 							      const gchar          *key);
const gchar *     gtk_print_settings_get                     (GtkPrintSettings     *settings, 							      const gchar          *key);
void              gtk_print_settings_set                     (GtkPrintSettings     *settings, 							      const gchar          *key, 							      const gchar          *value);
void              gtk_print_settings_unset                   (GtkPrintSettings     *settings, 							      const gchar          *key);
void              gtk_print_settings_foreach                 (GtkPrintSettings     *settings, 							      GtkPrintSettingsFunc  func, 							      gpointer              user_data);
gboolean          gtk_print_settings_get_bool                (GtkPrintSettings     *settings, 							      const gchar          *key);
void              gtk_print_settings_set_bool                (GtkPrintSettings     *settings, 							      const gchar          *key, 							      gboolean              value);
gdouble           gtk_print_settings_get_double              (GtkPrintSettings     *settings, 							      const gchar          *key);
gdouble           gtk_print_settings_get_double_with_default (GtkPrintSettings     *settings, 							      const gchar          *key, 							      gdouble               def);
void              gtk_print_settings_set_double              (GtkPrintSettings     *settings, 							      const gchar          *key, 							      gdouble               value);
gdouble           gtk_print_settings_get_length              (GtkPrintSettings     *settings, 							      const gchar          *key, 							      GtkUnit               unit);
void              gtk_print_settings_set_length              (GtkPrintSettings     *settings, 							      const gchar          *key, 							      gdouble               value, 							      GtkUnit               unit);
gint              gtk_print_settings_get_int                 (GtkPrintSettings     *settings, 							      const gchar          *key);
gint              gtk_print_settings_get_int_with_default    (GtkPrintSettings     *settings, 							      const gchar          *key, 							      gint                  def);
void              gtk_print_settings_set_int                 (GtkPrintSettings     *settings, 							      const gchar          *key, 							      gint                  value);



const gchar *         gtk_print_settings_get_printer           (GtkPrintSettings   *settings);
void                  gtk_print_settings_set_printer           (GtkPrintSettings   *settings, 								const gchar        *printer);
GtkPageOrientation    gtk_print_settings_get_orientation       (GtkPrintSettings   *settings);
void                  gtk_print_settings_set_orientation       (GtkPrintSettings   *settings, 								GtkPageOrientation  orientation);
GtkPaperSize *        gtk_print_settings_get_paper_size        (GtkPrintSettings   *settings);
void                  gtk_print_settings_set_paper_size        (GtkPrintSettings   *settings, 								GtkPaperSize       *paper_size);
gdouble               gtk_print_settings_get_paper_width       (GtkPrintSettings   *settings, 								GtkUnit             unit);
void                  gtk_print_settings_set_paper_width       (GtkPrintSettings   *settings, 								gdouble             width, 								GtkUnit             unit);
gdouble               gtk_print_settings_get_paper_height      (GtkPrintSettings   *settings, 								GtkUnit             unit);
void                  gtk_print_settings_set_paper_height      (GtkPrintSettings   *settings, 								gdouble             height, 								GtkUnit             unit);
gboolean              gtk_print_settings_get_use_color         (GtkPrintSettings   *settings);
void                  gtk_print_settings_set_use_color         (GtkPrintSettings   *settings, 								gboolean            use_color);
gboolean              gtk_print_settings_get_collate           (GtkPrintSettings   *settings);
void                  gtk_print_settings_set_collate           (GtkPrintSettings   *settings, 								gboolean            collate);
gboolean              gtk_print_settings_get_reverse           (GtkPrintSettings   *settings);
void                  gtk_print_settings_set_reverse           (GtkPrintSettings   *settings, 								gboolean            reverse);
GtkPrintDuplex        gtk_print_settings_get_duplex            (GtkPrintSettings   *settings);
void                  gtk_print_settings_set_duplex            (GtkPrintSettings   *settings, 								GtkPrintDuplex      duplex);
GtkPrintQuality       gtk_print_settings_get_quality           (GtkPrintSettings   *settings);
void                  gtk_print_settings_set_quality           (GtkPrintSettings   *settings, 								GtkPrintQuality     quality);
gint                  gtk_print_settings_get_n_copies          (GtkPrintSettings   *settings);
void                  gtk_print_settings_set_n_copies          (GtkPrintSettings   *settings, 								gint                num_copies);
gint                  gtk_print_settings_get_number_up         (GtkPrintSettings   *settings);
void                  gtk_print_settings_set_number_up         (GtkPrintSettings   *settings, 								gint                number_up);
GtkNumberUpLayout     gtk_print_settings_get_number_up_layout  (GtkPrintSettings   *settings);
void                  gtk_print_settings_set_number_up_layout  (GtkPrintSettings   *settings, 								GtkNumberUpLayout   number_up_layout);
gint                  gtk_print_settings_get_resolution        (GtkPrintSettings   *settings);
void                  gtk_print_settings_set_resolution        (GtkPrintSettings   *settings, 								gint                resolution);
gint                  gtk_print_settings_get_resolution_x      (GtkPrintSettings   *settings);
gint                  gtk_print_settings_get_resolution_y      (GtkPrintSettings   *settings);
void                  gtk_print_settings_set_resolution_xy     (GtkPrintSettings   *settings, 								gint                resolution_x, 								gint                resolution_y);
gdouble               gtk_print_settings_get_printer_lpi       (GtkPrintSettings   *settings);
void                  gtk_print_settings_set_printer_lpi       (GtkPrintSettings   *settings, 								gdouble             lpi);
gdouble               gtk_print_settings_get_scale             (GtkPrintSettings   *settings);
void                  gtk_print_settings_set_scale             (GtkPrintSettings   *settings, 								gdouble             scale);
GtkPrintPages         gtk_print_settings_get_print_pages       (GtkPrintSettings   *settings);
void                  gtk_print_settings_set_print_pages       (GtkPrintSettings   *settings, 								GtkPrintPages       pages);
GtkPageRange *        gtk_print_settings_get_page_ranges       (GtkPrintSettings   *settings, 								gint               *num_ranges);
void                  gtk_print_settings_set_page_ranges       (GtkPrintSettings   *settings, 								GtkPageRange       *page_ranges, 								gint                num_ranges);
GtkPageSet            gtk_print_settings_get_page_set          (GtkPrintSettings   *settings);
void                  gtk_print_settings_set_page_set          (GtkPrintSettings   *settings, 								GtkPageSet          page_set);
const gchar *         gtk_print_settings_get_default_source    (GtkPrintSettings   *settings);
void                  gtk_print_settings_set_default_source    (GtkPrintSettings   *settings, 								const gchar        *default_source);
const gchar *         gtk_print_settings_get_media_type        (GtkPrintSettings   *settings);
void                  gtk_print_settings_set_media_type        (GtkPrintSettings   *settings, 								const gchar        *media_type);
const gchar *         gtk_print_settings_get_dither            (GtkPrintSettings   *settings);
void                  gtk_print_settings_set_dither            (GtkPrintSettings   *settings, 								const gchar        *dither);
const gchar *         gtk_print_settings_get_finishings        (GtkPrintSettings   *settings);
void                  gtk_print_settings_set_finishings        (GtkPrintSettings   *settings, 								const gchar        *finishings);
const gchar *         gtk_print_settings_get_output_bin        (GtkPrintSettings   *settings);
void                  gtk_print_settings_set_output_bin        (GtkPrintSettings   *settings, 								const gchar        *output_bin);
    
GType        gtk_builder_get_type                (void) ;
GtkBuilder*  gtk_builder_new                     (void);
guint        gtk_builder_add_from_file           (GtkBuilder    *builder,                                                   const gchar   *filename,                                                   GError       **error);
guint        gtk_builder_add_from_resource       (GtkBuilder    *builder,                                                   const gchar   *resource_path,                                                   GError       **error);
guint        gtk_builder_add_from_string         (GtkBuilder    *builder,                                                   const gchar   *buffer,                                                   gsize          length,                                                   GError       **error);
guint        gtk_builder_add_objects_from_file   (GtkBuilder    *builder,                                                   const gchar   *filename,                                                   gchar        **object_ids,                                                   GError       **error);
guint        gtk_builder_add_objects_from_resource(GtkBuilder    *builder,                                                   const gchar   *resource_path,                                                   gchar        **object_ids,                                                   GError       **error);
guint        gtk_builder_add_objects_from_string (GtkBuilder    *builder,                                                   const gchar   *buffer,                                                   gsize          length,                                                   gchar        **object_ids,                                                   GError       **error);
GObject*     gtk_builder_get_object              (GtkBuilder    *builder,                                                   const gchar   *name);
GSList*      gtk_builder_get_objects             (GtkBuilder    *builder);
void         gtk_builder_connect_signals         (GtkBuilder    *builder, 						  gpointer       user_data);
void         gtk_builder_connect_signals_full    (GtkBuilder    *builder,                                                   GtkBuilderConnectFunc func, 						  gpointer       user_data);
void         gtk_builder_set_translation_domain  (GtkBuilder   	*builder,                                                   const gchar  	*domain);
const gchar* gtk_builder_get_translation_domain  (GtkBuilder   	*builder);
GType        gtk_builder_get_type_from_name      (GtkBuilder   	*builder,                                                   const char   	*type_name);
gboolean     gtk_builder_value_from_string       (GtkBuilder    *builder, 						  GParamSpec   	*pspec,                                                   const gchar  	*string,                                                   GValue       	*value, 						  GError       **error);
gboolean     gtk_builder_value_from_string_type  (GtkBuilder    *builder, 						  GType        	 type,                                                   const gchar  	*string,                                                   GValue       	*value, 						  GError       **error);
 
GType       gtk_color_chooser_dialog_get_type (void) ;
GtkWidget * gtk_color_chooser_dialog_new      (const gchar *title,                                                GtkWindow   *parent);
GType      gtk_frame_get_type         (void) ;
GtkWidget* gtk_frame_new              (const gchar   *label);
void          gtk_frame_set_label (GtkFrame    *frame,                                    const gchar *label);
const gchar * gtk_frame_get_label (GtkFrame    *frame);
void       gtk_frame_set_label_widget (GtkFrame      *frame, 				       GtkWidget     *label_widget);
GtkWidget *gtk_frame_get_label_widget (GtkFrame      *frame);
void       gtk_frame_set_label_align  (GtkFrame      *frame, 				       gfloat         xalign, 				       gfloat         yalign);
void       gtk_frame_get_label_align  (GtkFrame      *frame, 				       gfloat        *xalign, 				       gfloat        *yalign);
void       gtk_frame_set_shadow_type  (GtkFrame      *frame, 				       GtkShadowType  type);
GtkShadowType gtk_frame_get_shadow_type (GtkFrame    *frame);
GType              gtk_tool_shell_get_type             (void) ;
GtkIconSize        gtk_tool_shell_get_icon_size        (GtkToolShell *shell);
GtkOrientation     gtk_tool_shell_get_orientation      (GtkToolShell *shell);
GtkToolbarStyle    gtk_tool_shell_get_style            (GtkToolShell *shell);
GtkReliefStyle     gtk_tool_shell_get_relief_style     (GtkToolShell *shell);
void               gtk_tool_shell_rebuild_menu         (GtkToolShell *shell);
GtkOrientation     gtk_tool_shell_get_text_orientation (GtkToolShell *shell);
gfloat             gtk_tool_shell_get_text_alignment   (GtkToolShell *shell);
PangoEllipsizeMode gtk_tool_shell_get_ellipsize_mode   (GtkToolShell *shell);
GtkSizeGroup *     gtk_tool_shell_get_text_size_group  (GtkToolShell *shell);
GType      gtk_progress_bar_get_type             (void) ;
GtkWidget* gtk_progress_bar_new                  (void);
void       gtk_progress_bar_pulse                (GtkProgressBar *pbar);
void       gtk_progress_bar_set_text             (GtkProgressBar *pbar,                                                   const gchar    *text);
void       gtk_progress_bar_set_fraction         (GtkProgressBar *pbar,                                                   gdouble         fraction);
void       gtk_progress_bar_set_pulse_step       (GtkProgressBar *pbar,                                                   gdouble         fraction);
void       gtk_progress_bar_set_inverted         (GtkProgressBar *pbar,                                                   gboolean        inverted);
const gchar *      gtk_progress_bar_get_text       (GtkProgressBar *pbar);
gdouble            gtk_progress_bar_get_fraction   (GtkProgressBar *pbar);
gdouble            gtk_progress_bar_get_pulse_step (GtkProgressBar *pbar);
gboolean           gtk_progress_bar_get_inverted    (GtkProgressBar *pbar);
void               gtk_progress_bar_set_ellipsize (GtkProgressBar     *pbar,                                                    PangoEllipsizeMode  mode);
PangoEllipsizeMode gtk_progress_bar_get_ellipsize (GtkProgressBar     *pbar);
void               gtk_progress_bar_set_show_text (GtkProgressBar     *pbar,                                                    gboolean            show_text);
gboolean           gtk_progress_bar_get_show_text (GtkProgressBar     *pbar);
GType        gtk_toggle_tool_button_get_type       (void) ;
GtkToolItem *gtk_toggle_tool_button_new            (void);
GtkToolItem *gtk_toggle_tool_button_new_from_stock (const gchar *stock_id);
void         gtk_toggle_tool_button_set_active     (GtkToggleToolButton *button, 						    gboolean             is_active);
gboolean     gtk_toggle_tool_button_get_active     (GtkToggleToolButton *button);
GType      gtk_arrow_get_type   (void) ;
GtkWidget* gtk_arrow_new        (GtkArrowType   arrow_type, 				 GtkShadowType  shadow_type);
void       gtk_arrow_set        (GtkArrow      *arrow, 				 GtkArrowType   arrow_type, 				 GtkShadowType  shadow_type);
GType                 gtk_cell_area_get_type                       (void) ;
void                  gtk_cell_area_add                            (GtkCellArea          *area,                                                                     GtkCellRenderer      *renderer);
void                  gtk_cell_area_remove                         (GtkCellArea          *area,                                                                     GtkCellRenderer      *renderer);
gboolean              gtk_cell_area_has_renderer                   (GtkCellArea          *area,                                                                     GtkCellRenderer      *renderer);
void                  gtk_cell_area_foreach                        (GtkCellArea          *area,                                                                     GtkCellCallback       callback,                                                                     gpointer              callback_data);
void                  gtk_cell_area_foreach_alloc                  (GtkCellArea          *area,                                                                     GtkCellAreaContext   *context,                                                                     GtkWidget            *widget,                                                                     const GdkRectangle   *cell_area,                                                                     const GdkRectangle   *background_area,                                                                     GtkCellAllocCallback  callback,                                                                     gpointer              callback_data);
gint                  gtk_cell_area_event                          (GtkCellArea          *area,                                                                     GtkCellAreaContext   *context,                                                                     GtkWidget            *widget,                                                                     GdkEvent             *event,                                                                     const GdkRectangle   *cell_area,                                                                     GtkCellRendererState  flags);
void                  gtk_cell_area_render                         (GtkCellArea          *area,                                                                     GtkCellAreaContext   *context,                                                                     GtkWidget            *widget,                                                                     cairo_t              *cr,                                                                     const GdkRectangle   *background_area,                                                                     const GdkRectangle   *cell_area,                                                                     GtkCellRendererState  flags,                                                                     gboolean              paint_focus);
void                  gtk_cell_area_get_cell_allocation            (GtkCellArea          *area,                                                                     GtkCellAreaContext   *context,                                                                     GtkWidget            *widget,                                                                     GtkCellRenderer      *renderer,                                                                     const GdkRectangle   *cell_area,                                                                     GdkRectangle         *allocation);
GtkCellRenderer      *gtk_cell_area_get_cell_at_position           (GtkCellArea          *area,                                                                     GtkCellAreaContext   *context,                                                                     GtkWidget            *widget,                                                                     const GdkRectangle   *cell_area,                                                                     gint                  x,                                                                     gint                  y,                                                                     GdkRectangle         *alloc_area);
GtkCellAreaContext   *gtk_cell_area_create_context                 (GtkCellArea        *area);
GtkCellAreaContext   *gtk_cell_area_copy_context                   (GtkCellArea        *area,                                                                     GtkCellAreaContext *context);
GtkSizeRequestMode    gtk_cell_area_get_request_mode               (GtkCellArea        *area);
void                  gtk_cell_area_get_preferred_width            (GtkCellArea        *area,                                                                     GtkCellAreaContext *context,                                                                     GtkWidget          *widget,                                                                     gint               *minimum_width,                                                                     gint               *natural_width);
void                  gtk_cell_area_get_preferred_height_for_width (GtkCellArea        *area,                                                                     GtkCellAreaContext *context,                                                                     GtkWidget          *widget,                                                                     gint                width,                                                                     gint               *minimum_height,                                                                     gint               *natural_height);
void                  gtk_cell_area_get_preferred_height           (GtkCellArea        *area,                                                                     GtkCellAreaContext *context,                                                                     GtkWidget          *widget,                                                                     gint               *minimum_height,                                                                     gint               *natural_height);
void                  gtk_cell_area_get_preferred_width_for_height (GtkCellArea        *area,                                                                     GtkCellAreaContext *context,                                                                     GtkWidget          *widget,                                                                     gint                height,                                                                     gint               *minimum_width,                                                                     gint               *natural_width);
const gchar *         gtk_cell_area_get_current_path_string        (GtkCellArea        *area);
void                  gtk_cell_area_apply_attributes               (GtkCellArea        *area,                                                                     GtkTreeModel       *tree_model,                                                                     GtkTreeIter        *iter,                                                                     gboolean            is_expander,                                                                     gboolean            is_expanded);
void                  gtk_cell_area_attribute_connect              (GtkCellArea        *area,                                                                     GtkCellRenderer    *renderer,                                                                     const gchar        *attribute,                                                                     gint                column);
void                  gtk_cell_area_attribute_disconnect           (GtkCellArea        *area,                                                                     GtkCellRenderer    *renderer,                                                                     const gchar        *attribute);
void                  gtk_cell_area_class_install_cell_property    (GtkCellAreaClass   *aclass,                                                                     guint               property_id,                                                                     GParamSpec         *pspec);
GParamSpec*           gtk_cell_area_class_find_cell_property       (GtkCellAreaClass   *aclass,                                                                     const gchar        *property_name);
GParamSpec**          gtk_cell_area_class_list_cell_properties     (GtkCellAreaClass   *aclass,                                                                     guint                   *n_properties);
void                  gtk_cell_area_add_with_properties            (GtkCellArea        *area,                                                                     GtkCellRenderer    *renderer,                                                                     const gchar     *first_prop_name,                                                                     ...) G_GNUC_NULL_TERMINATED;
void                  gtk_cell_area_cell_set                       (GtkCellArea        *area,                                                                     GtkCellRenderer    *renderer,                                                                     const gchar        *first_prop_name,                                                                     ...) G_GNUC_NULL_TERMINATED;
void                  gtk_cell_area_cell_get                       (GtkCellArea        *area,                                                                     GtkCellRenderer    *renderer,                                                                     const gchar        *first_prop_name,                                                                     ...) G_GNUC_NULL_TERMINATED;
void                  gtk_cell_area_cell_set_valist                (GtkCellArea        *area,                                                                     GtkCellRenderer    *renderer,                                                                     const gchar        *first_property_name,                                                                     va_list             var_args);
void                  gtk_cell_area_cell_get_valist                (GtkCellArea        *area,                                                                     GtkCellRenderer    *renderer,                                                                     const gchar        *first_property_name,                                                                     va_list             var_args);
void                  gtk_cell_area_cell_set_property              (GtkCellArea        *area,                                                                     GtkCellRenderer    *renderer,                                                                     const gchar        *property_name,                                                                     const GValue       *value);
void                  gtk_cell_area_cell_get_property              (GtkCellArea        *area,                                                                     GtkCellRenderer    *renderer,                                                                     const gchar        *property_name,                                                                     GValue             *value);
gboolean              gtk_cell_area_is_activatable                 (GtkCellArea         *area);
gboolean              gtk_cell_area_activate                       (GtkCellArea         *area,                                                                     GtkCellAreaContext  *context,                                                                     GtkWidget           *widget,                                                                     const GdkRectangle  *cell_area,                                                                     GtkCellRendererState flags,                                                                     gboolean             edit_only);
gboolean              gtk_cell_area_focus                          (GtkCellArea         *area,                                                                     GtkDirectionType     direction);
void                  gtk_cell_area_set_focus_cell                 (GtkCellArea          *area,                                                                     GtkCellRenderer      *renderer);
GtkCellRenderer      *gtk_cell_area_get_focus_cell                 (GtkCellArea          *area);
void                  gtk_cell_area_add_focus_sibling              (GtkCellArea          *area,                                                                     GtkCellRenderer      *renderer,                                                                     GtkCellRenderer      *sibling);
void                  gtk_cell_area_remove_focus_sibling           (GtkCellArea          *area,                                                                     GtkCellRenderer      *renderer,                                                                     GtkCellRenderer      *sibling);
gboolean              gtk_cell_area_is_focus_sibling               (GtkCellArea          *area,                                                                     GtkCellRenderer      *renderer,                                                                     GtkCellRenderer      *sibling);
const GList *         gtk_cell_area_get_focus_siblings             (GtkCellArea          *area,                                                                     GtkCellRenderer      *renderer);
GtkCellRenderer      *gtk_cell_area_get_focus_from_sibling         (GtkCellArea          *area,                                                                     GtkCellRenderer      *renderer);
GtkCellRenderer      *gtk_cell_area_get_edited_cell                (GtkCellArea          *area);
GtkCellEditable      *gtk_cell_area_get_edit_widget                (GtkCellArea          *area);
gboolean              gtk_cell_area_activate_cell                  (GtkCellArea          *area,                                                                     GtkWidget            *widget,                                                                     GtkCellRenderer      *renderer,                                                                     GdkEvent             *event,                                                                     const GdkRectangle   *cell_area,                                                                     GtkCellRendererState  flags);
void                  gtk_cell_area_stop_editing                   (GtkCellArea          *area,                                                                     gboolean              canceled);
void                  gtk_cell_area_inner_cell_area                (GtkCellArea        *area,                                                                     GtkWidget          *widget,                                                                     const GdkRectangle *cell_area,                                                                     GdkRectangle       *inner_area);
void                  gtk_cell_area_request_renderer               (GtkCellArea        *area,                                                                     GtkCellRenderer    *renderer,                                                                     GtkOrientation      orientation,                                                                     GtkWidget          *widget,                                                                     gint                for_size,                                                                     gint               *minimum_size,                                                                     gint               *natural_size);
void                 _gtk_cell_area_set_cell_data_func_with_proxy  (GtkCellArea           *area, 								    GtkCellRenderer       *cell, 								    GFunc                  func, 								    gpointer               func_data, 								    GDestroyNotify         destroy, 								    gpointer               proxy);
GType       gtk_color_chooser_widget_get_type (void) ;
GtkWidget * gtk_color_chooser_widget_new      (void);
GType      gtk_recent_chooser_dialog_get_type        (void) ;
GtkWidget *gtk_recent_chooser_dialog_new             (const gchar      *title, 					              GtkWindow        *parent, 					              const gchar      *first_button_text, 					              ...) G_GNUC_NULL_TERMINATED;
GtkWidget *gtk_recent_chooser_dialog_new_for_manager (const gchar      *title, 						      GtkWindow        *parent, 						      GtkRecentManager *manager, 						      const gchar      *first_button_text, 						      ...) G_GNUC_NULL_TERMINATED;
GType          gtk_text_tag_table_get_type (void) ;
GtkTextTagTable *gtk_text_tag_table_new      (void);
void             gtk_text_tag_table_add      (GtkTextTagTable        *table,                                               GtkTextTag             *tag);
void             gtk_text_tag_table_remove   (GtkTextTagTable        *table,                                               GtkTextTag             *tag);
GtkTextTag      *gtk_text_tag_table_lookup   (GtkTextTagTable        *table,                                               const gchar            *name);
void             gtk_text_tag_table_foreach  (GtkTextTagTable        *table,                                               GtkTextTagTableForeach  func,                                               gpointer                data);
gint             gtk_text_tag_table_get_size (GtkTextTagTable        *table);
void _gtk_text_tag_table_add_buffer    (GtkTextTagTable *table,                                         gpointer         buffer);
void _gtk_text_tag_table_remove_buffer (GtkTextTagTable *table,                                         gpointer         buffer);
GType         gtk_app_chooser_dialog_get_type             (void) ;
GtkWidget *   gtk_app_chooser_dialog_new                  (GtkWindow           *parent,                                                            GtkDialogFlags       flags,                                                            GFile               *file);
GtkWidget *   gtk_app_chooser_dialog_new_for_content_type (GtkWindow           *parent,                                                            GtkDialogFlags       flags,                                                            const gchar         *content_type);
GtkWidget *   gtk_app_chooser_dialog_get_widget           (GtkAppChooserDialog *self);
void          gtk_app_chooser_dialog_set_heading          (GtkAppChooserDialog *self,                                                            const gchar         *heading);
const gchar * gtk_app_chooser_dialog_get_heading          (GtkAppChooserDialog *self);
GType      gtk_file_chooser_widget_get_type         (void) ;
GtkWidget *gtk_file_chooser_widget_new              (GtkFileChooserAction  action);
GType        gtk_cell_area_box_get_type    (void) ;
GtkCellArea *gtk_cell_area_box_new         (void);
void         gtk_cell_area_box_pack_start  (GtkCellAreaBox  *box,                                             GtkCellRenderer *renderer,                                             gboolean         expand,                                             gboolean         align,                                             gboolean         fixed);
void         gtk_cell_area_box_pack_end    (GtkCellAreaBox  *box,                                             GtkCellRenderer *renderer,                                             gboolean         expand,                                             gboolean         align,                                             gboolean         fixed);
gint         gtk_cell_area_box_get_spacing (GtkCellAreaBox  *box);
void         gtk_cell_area_box_set_spacing (GtkCellAreaBox  *box,                                             gint             spacing);
gboolean    _gtk_cell_area_box_group_visible (GtkCellAreaBox  *box,                                               gint             group_idx);
GType      gtk_file_chooser_dialog_get_type         (void) ;
GtkWidget *gtk_file_chooser_dialog_new              (const gchar          *title, 						     GtkWindow            *parent, 						     GtkFileChooserAction  action, 						     const gchar          *first_button_text, 						     ...) G_GNUC_NULL_TERMINATED;
GType          gtk_viewport_get_type        (void) ;
GtkWidget*     gtk_viewport_new             (GtkAdjustment *hadjustment, 					     GtkAdjustment *vadjustment);
GtkAdjustment* gtk_viewport_get_hadjustment (GtkViewport   *viewport);
GtkAdjustment* gtk_viewport_get_vadjustment (GtkViewport   *viewport);
void           gtk_viewport_set_hadjustment (GtkViewport   *viewport,                                              GtkAdjustment *adjustment);
void           gtk_viewport_set_vadjustment (GtkViewport   *viewport,                                              GtkAdjustment *adjustment);
void           gtk_viewport_set_shadow_type (GtkViewport   *viewport, 					     GtkShadowType  type);
GtkShadowType  gtk_viewport_get_shadow_type (GtkViewport   *viewport);
GdkWindow*     gtk_viewport_get_bin_window  (GtkViewport   *viewport);
GdkWindow*     gtk_viewport_get_view_window (GtkViewport   *viewport);
GType	   gtk_image_menu_item_get_type          (void) ;
GtkWidget* gtk_image_menu_item_new               (void);
GtkWidget* gtk_image_menu_item_new_with_label    (const gchar      *label);
GtkWidget* gtk_image_menu_item_new_with_mnemonic (const gchar      *label);
GtkWidget* gtk_image_menu_item_new_from_stock    (const gchar      *stock_id,                                                   GtkAccelGroup    *accel_group);
void       gtk_image_menu_item_set_always_show_image (GtkImageMenuItem *image_menu_item,                                                       gboolean          always_show);
gboolean   gtk_image_menu_item_get_always_show_image (GtkImageMenuItem *image_menu_item);
void       gtk_image_menu_item_set_image         (GtkImageMenuItem *image_menu_item,                                                   GtkWidget        *image);
GtkWidget* gtk_image_menu_item_get_image         (GtkImageMenuItem *image_menu_item);
void       gtk_image_menu_item_set_use_stock     (GtkImageMenuItem *image_menu_item, 						  gboolean          use_stock);
gboolean   gtk_image_menu_item_get_use_stock     (GtkImageMenuItem *image_menu_item);
void       gtk_image_menu_item_set_accel_group   (GtkImageMenuItem *image_menu_item,  						  GtkAccelGroup    *accel_group);
GType    gtk_editable_get_type             (void) ;
void     gtk_editable_select_region        (GtkEditable *editable, 					    gint         start_pos, 					    gint         end_pos);
gboolean gtk_editable_get_selection_bounds (GtkEditable *editable, 					    gint        *start_pos, 					    gint        *end_pos);
void     gtk_editable_insert_text          (GtkEditable *editable, 					    const gchar *new_text, 					    gint         new_text_length, 					    gint        *position);
void     gtk_editable_delete_text          (GtkEditable *editable, 					    gint         start_pos, 					    gint         end_pos);
gchar*   gtk_editable_get_chars            (GtkEditable *editable, 					    gint         start_pos, 					    gint         end_pos);
void     gtk_editable_cut_clipboard        (GtkEditable *editable);
void     gtk_editable_copy_clipboard       (GtkEditable *editable);
void     gtk_editable_paste_clipboard      (GtkEditable *editable);
void     gtk_editable_delete_selection     (GtkEditable *editable);
void     gtk_editable_set_position         (GtkEditable *editable, 					    gint         position);
gint     gtk_editable_get_position         (GtkEditable *editable);
void     gtk_editable_set_editable         (GtkEditable *editable, 					    gboolean     is_editable);
gboolean gtk_editable_get_editable         (GtkEditable *editable);
GType gtk_cell_layout_get_type           (void) ;
void  gtk_cell_layout_pack_start         (GtkCellLayout         *cell_layout,                                           GtkCellRenderer       *cell,                                           gboolean               expand);
void  gtk_cell_layout_pack_end           (GtkCellLayout         *cell_layout,                                           GtkCellRenderer       *cell,                                           gboolean               expand);
GList *gtk_cell_layout_get_cells         (GtkCellLayout         *cell_layout);
void  gtk_cell_layout_clear              (GtkCellLayout         *cell_layout);
void  gtk_cell_layout_set_attributes     (GtkCellLayout         *cell_layout,                                           GtkCellRenderer       *cell,                                           ...) G_GNUC_NULL_TERMINATED;
void  gtk_cell_layout_add_attribute      (GtkCellLayout         *cell_layout,                                           GtkCellRenderer       *cell,                                           const gchar           *attribute,                                           gint                   column);
void  gtk_cell_layout_set_cell_data_func (GtkCellLayout         *cell_layout,                                           GtkCellRenderer       *cell,                                           GtkCellLayoutDataFunc  func,                                           gpointer               func_data,                                           GDestroyNotify         destroy);
void  gtk_cell_layout_clear_attributes   (GtkCellLayout         *cell_layout,                                           GtkCellRenderer       *cell);
void  gtk_cell_layout_reorder            (GtkCellLayout         *cell_layout,                                           GtkCellRenderer       *cell,                                           gint                   position);
GtkCellArea *gtk_cell_layout_get_area    (GtkCellLayout         *cell_layout);
gboolean _gtk_cell_layout_buildable_custom_tag_start (GtkBuildable  *buildable, 						      GtkBuilder    *builder, 						      GObject       *child, 						      const gchar   *tagname, 						      GMarkupParser *parser, 						      gpointer      *data);
gboolean _gtk_cell_layout_buildable_custom_tag_end   (GtkBuildable  *buildable, 						      GtkBuilder    *builder, 						      GObject       *child, 						      const gchar   *tagname, 						      gpointer      *data);
void _gtk_cell_layout_buildable_add_child            (GtkBuildable  *buildable, 						      GtkBuilder    *builder, 						      GObject       *child, 						      const gchar   *type);



























 
GtkBindingSet *gtk_binding_set_new           (const gchar         *set_name);
GtkBindingSet *gtk_binding_set_by_class      (gpointer             object_class);
GtkBindingSet *gtk_binding_set_find          (const gchar         *set_name);
gboolean       gtk_bindings_activate         (GObject             *object,                                               guint                keyval,                                               GdkModifierType      modifiers);
gboolean       gtk_bindings_activate_event   (GObject             *object,                                               GdkEventKey         *event);
gboolean       gtk_binding_set_activate      (GtkBindingSet       *binding_set,                                               guint                keyval,                                               GdkModifierType      modifiers,                                               GObject             *object);
void           gtk_binding_entry_skip        (GtkBindingSet       *binding_set,                                               guint                keyval,                                               GdkModifierType      modifiers);
void           gtk_binding_entry_add_signal  (GtkBindingSet       *binding_set,                                               guint                keyval,                                               GdkModifierType      modifiers,                                               const gchar         *signal_name,                                               guint                n_args,                                               ...);
void           gtk_binding_entry_add_signall (GtkBindingSet       *binding_set,                                               guint                keyval,                                               GdkModifierType      modifiers,                                               const gchar         *signal_name,                                               GSList              *binding_args);
GTokenType     gtk_binding_entry_add_signal_from_string                                             (GtkBindingSet       *binding_set,                                               const gchar         *signal_desc);
void           gtk_binding_entry_remove      (GtkBindingSet       *binding_set,                                               guint                keyval,                                               GdkModifierType      modifiers);
void           gtk_binding_set_add_path      (GtkBindingSet       *binding_set,                                               GtkPathType          path_type,                                               const gchar         *path_pattern,                                               GtkPathPriorityType  priority);

GdkAtom   gtk_text_buffer_register_serialize_format   (GtkTextBuffer                *buffer,                                                        const gchar                  *mime_type,                                                        GtkTextBufferSerializeFunc    function,                                                        gpointer                      user_data,                                                        GDestroyNotify                user_data_destroy);
GdkAtom   gtk_text_buffer_register_serialize_tagset   (GtkTextBuffer                *buffer,                                                        const gchar                  *tagset_name);
GdkAtom   gtk_text_buffer_register_deserialize_format (GtkTextBuffer                *buffer,                                                        const gchar                  *mime_type,                                                        GtkTextBufferDeserializeFunc  function,                                                        gpointer                      user_data,                                                        GDestroyNotify                user_data_destroy);
GdkAtom   gtk_text_buffer_register_deserialize_tagset (GtkTextBuffer                *buffer,                                                        const gchar                  *tagset_name);
void    gtk_text_buffer_unregister_serialize_format   (GtkTextBuffer                *buffer,                                                        GdkAtom                       format);
void    gtk_text_buffer_unregister_deserialize_format (GtkTextBuffer                *buffer,                                                        GdkAtom                       format);
void     gtk_text_buffer_deserialize_set_can_create_tags (GtkTextBuffer             *buffer,                                                           GdkAtom                    format,                                                           gboolean                   can_create_tags);
gboolean gtk_text_buffer_deserialize_get_can_create_tags (GtkTextBuffer             *buffer,                                                           GdkAtom                    format);
GdkAtom * gtk_text_buffer_get_serialize_formats       (GtkTextBuffer                *buffer,                                                        gint                         *n_formats);
GdkAtom * gtk_text_buffer_get_deserialize_formats     (GtkTextBuffer                *buffer,                                                        gint                         *n_formats);
guint8  * gtk_text_buffer_serialize                   (GtkTextBuffer                *register_buffer,                                                        GtkTextBuffer                *content_buffer,                                                        GdkAtom                       format,                                                        const GtkTextIter            *start,                                                        const GtkTextIter            *end,                                                        gsize                        *length);
gboolean  gtk_text_buffer_deserialize                 (GtkTextBuffer                *register_buffer,                                                        GtkTextBuffer                *content_buffer,                                                        GdkAtom                       format,                                                        GtkTextIter                  *iter,                                                        const guint8                 *data,                                                        gsize                         length,                                                        GError                      **error);
GtkUIManager  *gtk_ui_manager_new                 (void);
void           gtk_ui_manager_set_add_tearoffs    (GtkUIManager          *manager,                                                    gboolean               add_tearoffs);
gboolean       gtk_ui_manager_get_add_tearoffs    (GtkUIManager          *manager);
void           gtk_ui_manager_insert_action_group (GtkUIManager          *manager, 						   GtkActionGroup        *action_group, 						   gint                   pos);
void           gtk_ui_manager_remove_action_group (GtkUIManager          *manager, 						   GtkActionGroup        *action_group);
GList         *gtk_ui_manager_get_action_groups   (GtkUIManager          *manager);
GtkAccelGroup *gtk_ui_manager_get_accel_group     (GtkUIManager          *manager);
GtkWidget     *gtk_ui_manager_get_widget          (GtkUIManager          *manager, 						   const gchar           *path);
GSList        *gtk_ui_manager_get_toplevels       (GtkUIManager          *manager, 						   GtkUIManagerItemType   types);
GtkAction     *gtk_ui_manager_get_action          (GtkUIManager          *manager, 						   const gchar           *path);
guint          gtk_ui_manager_add_ui_from_string  (GtkUIManager          *manager, 						   const gchar           *buffer, 						   gssize                 length, 						   GError               **error);
guint          gtk_ui_manager_add_ui_from_file    (GtkUIManager          *manager, 						   const gchar           *filename, 						   GError               **error);
guint          gtk_ui_manager_add_ui_from_resource(GtkUIManager          *manager, 						   const gchar           *resource_path, 						   GError               **error);
void           gtk_ui_manager_add_ui              (GtkUIManager          *manager, 						   guint                  merge_id, 						   const gchar           *path, 						   const gchar           *name, 						   const gchar           *action, 						   GtkUIManagerItemType   type, 						   gboolean               top);
void           gtk_ui_manager_remove_ui           (GtkUIManager          *manager, 						   guint                  merge_id);
gchar         *gtk_ui_manager_get_ui              (GtkUIManager          *manager);
void           gtk_ui_manager_ensure_update       (GtkUIManager          *manager);
guint          gtk_ui_manager_new_merge_id        (GtkUIManager          *manager);
GType		gtk_volume_button_get_type	(void) ;
GtkWidget*	gtk_volume_button_new		(void);
GType	   gtk_check_menu_item_get_type	         (void) ;
GtkWidget* gtk_check_menu_item_new               (void);
GtkWidget* gtk_check_menu_item_new_with_label    (const gchar      *label);
GtkWidget* gtk_check_menu_item_new_with_mnemonic (const gchar      *label);
void       gtk_check_menu_item_set_active        (GtkCheckMenuItem *check_menu_item, 						  gboolean          is_active);
gboolean   gtk_check_menu_item_get_active        (GtkCheckMenuItem *check_menu_item);
void       gtk_check_menu_item_toggled           (GtkCheckMenuItem *check_menu_item);
void       gtk_check_menu_item_set_inconsistent  (GtkCheckMenuItem *check_menu_item, 						  gboolean          setting);
gboolean   gtk_check_menu_item_get_inconsistent  (GtkCheckMenuItem *check_menu_item);
void       gtk_check_menu_item_set_draw_as_radio (GtkCheckMenuItem *check_menu_item, 						  gboolean          draw_as_radio);
gboolean   gtk_check_menu_item_get_draw_as_radio (GtkCheckMenuItem *check_menu_item);
void       _gtk_check_menu_item_set_active       (GtkCheckMenuItem *check_menu_item,                                                   gboolean          is_active);
GType      gtk_font_chooser_dialog_get_type         (void) ;
GtkWidget* gtk_font_chooser_dialog_new              (const gchar          *title,                                                      GtkWindow            *parent);


 
GtkStyleContext * gtk_style_context_new (void);
void gtk_style_context_add_provider_for_screen    (GdkScreen        *screen,                                                    GtkStyleProvider *provider,                                                    guint             priority);
void gtk_style_context_remove_provider_for_screen (GdkScreen        *screen,                                                    GtkStyleProvider *provider);
void gtk_style_context_add_provider    (GtkStyleContext  *context,                                         GtkStyleProvider *provider,                                         guint             priority);
void gtk_style_context_remove_provider (GtkStyleContext  *context,                                         GtkStyleProvider *provider);
void gtk_style_context_save    (GtkStyleContext *context);
void gtk_style_context_restore (GtkStyleContext *context);
GtkCssSection * gtk_style_context_get_section (GtkStyleContext *context,                                                const gchar     *property);
void gtk_style_context_get_property (GtkStyleContext *context,                                      const gchar     *property,                                      GtkStateFlags    state,                                      GValue          *value);
void gtk_style_context_get_valist   (GtkStyleContext *context,                                      GtkStateFlags    state,                                      va_list          args);
void gtk_style_context_get          (GtkStyleContext *context,                                      GtkStateFlags    state,                                      ...) G_GNUC_NULL_TERMINATED;
void          gtk_style_context_set_state    (GtkStyleContext *context,                                               GtkStateFlags    flags);
GtkStateFlags gtk_style_context_get_state    (GtkStyleContext *context);
gboolean      gtk_style_context_state_is_running (GtkStyleContext *context,                                                   GtkStateType     state,                                                   gdouble         *progress);
void          gtk_style_context_set_path     (GtkStyleContext *context,                                               GtkWidgetPath   *path);
const GtkWidgetPath * gtk_style_context_get_path (GtkStyleContext *context);
void          gtk_style_context_set_parent   (GtkStyleContext *context,                                               GtkStyleContext *parent);
GtkStyleContext *gtk_style_context_get_parent (GtkStyleContext *context);
GList *  gtk_style_context_list_classes (GtkStyleContext *context);
void     gtk_style_context_add_class    (GtkStyleContext *context,                                          const gchar     *class_name);
void     gtk_style_context_remove_class (GtkStyleContext *context,                                          const gchar     *class_name);
gboolean gtk_style_context_has_class    (GtkStyleContext *context,                                          const gchar     *class_name);
GList *  gtk_style_context_list_regions (GtkStyleContext *context);
void     gtk_style_context_add_region    (GtkStyleContext    *context,                                           const gchar        *region_name,                                           GtkRegionFlags      flags);
void     gtk_style_context_remove_region (GtkStyleContext    *context,                                           const gchar        *region_name);
gboolean gtk_style_context_has_region    (GtkStyleContext    *context,                                           const gchar        *region_name,                                           GtkRegionFlags     *flags_return);
void gtk_style_context_get_style_property (GtkStyleContext *context,                                            const gchar     *property_name,                                            GValue          *value);
void gtk_style_context_get_style_valist   (GtkStyleContext *context,                                            va_list          args);
void gtk_style_context_get_style          (GtkStyleContext *context,                                            ...);
GtkIconSet * gtk_style_context_lookup_icon_set (GtkStyleContext *context,                                                 const gchar     *stock_id);
GdkPixbuf  * gtk_icon_set_render_icon_pixbuf   (GtkIconSet      *icon_set,                                                 GtkStyleContext *context,                                                 GtkIconSize      size);
void        gtk_style_context_set_screen (GtkStyleContext *context,                                           GdkScreen       *screen);
GdkScreen * gtk_style_context_get_screen (GtkStyleContext *context);
void             gtk_style_context_set_direction (GtkStyleContext  *context,                                                   GtkTextDirection  direction);
GtkTextDirection gtk_style_context_get_direction (GtkStyleContext  *context);
void             gtk_style_context_set_junction_sides (GtkStyleContext  *context,                                                        GtkJunctionSides  sides);
GtkJunctionSides gtk_style_context_get_junction_sides (GtkStyleContext  *context);
gboolean gtk_style_context_lookup_color (GtkStyleContext *context,                                          const gchar     *color_name,                                          GdkRGBA         *color);
void  gtk_style_context_notify_state_change (GtkStyleContext *context,                                              GdkWindow       *window,                                              gpointer         region_id,                                              GtkStateType     state,                                              gboolean         state_value);
void  gtk_style_context_cancel_animations   (GtkStyleContext *context,                                              gpointer         region_id);
void  gtk_style_context_scroll_animations   (GtkStyleContext *context,                                              GdkWindow       *window,                                              gint             dx,                                              gint             dy);
void gtk_style_context_push_animatable_region (GtkStyleContext *context,                                                gpointer         region_id);
void gtk_style_context_pop_animatable_region  (GtkStyleContext *context);
void gtk_style_context_get_color            (GtkStyleContext *context,                                              GtkStateFlags    state,                                              GdkRGBA         *color);
void gtk_style_context_get_background_color (GtkStyleContext *context,                                              GtkStateFlags    state,                                              GdkRGBA         *color);
void gtk_style_context_get_border_color     (GtkStyleContext *context,                                              GtkStateFlags    state,                                              GdkRGBA         *color);
const PangoFontDescription *     gtk_style_context_get_font             (GtkStyleContext *context,                                              GtkStateFlags    state);
void gtk_style_context_get_border           (GtkStyleContext *context,                                              GtkStateFlags    state,                                              GtkBorder       *border);
void gtk_style_context_get_padding          (GtkStyleContext *context,                                              GtkStateFlags    state,                                              GtkBorder       *padding);
void gtk_style_context_get_margin           (GtkStyleContext *context,                                              GtkStateFlags    state,                                              GtkBorder       *margin);
void gtk_style_context_invalidate           (GtkStyleContext *context);
void gtk_style_context_reset_widgets        (GdkScreen       *screen);
void gtk_style_context_set_background       (GtkStyleContext *context,                                              GdkWindow       *window);
void        gtk_render_check       (GtkStyleContext     *context,                                     cairo_t             *cr,                                     gdouble              x,                                     gdouble              y,                                     gdouble              width,                                     gdouble              height);
void        gtk_render_option      (GtkStyleContext     *context,                                     cairo_t             *cr,                                     gdouble              x,                                     gdouble              y,                                     gdouble              width,                                     gdouble              height);
void        gtk_render_arrow       (GtkStyleContext     *context,                                     cairo_t             *cr,                                     gdouble              angle,                                     gdouble              x,                                     gdouble              y,                                     gdouble              size);
void        gtk_render_background  (GtkStyleContext     *context,                                     cairo_t             *cr,                                     gdouble              x,                                     gdouble              y,                                     gdouble              width,                                     gdouble              height);
void        gtk_render_frame       (GtkStyleContext     *context,                                     cairo_t             *cr,                                     gdouble              x,                                     gdouble              y,                                     gdouble              width,                                     gdouble              height);
void        gtk_render_expander    (GtkStyleContext     *context,                                     cairo_t             *cr,                                     gdouble              x,                                     gdouble              y,                                     gdouble              width,                                     gdouble              height);
void        gtk_render_focus       (GtkStyleContext     *context,                                     cairo_t             *cr,                                     gdouble              x,                                     gdouble              y,                                     gdouble              width,                                     gdouble              height);
void        gtk_render_layout      (GtkStyleContext     *context,                                     cairo_t             *cr,                                     gdouble              x,                                     gdouble              y,                                     PangoLayout         *layout);
void        gtk_render_line        (GtkStyleContext     *context,                                     cairo_t             *cr,                                     gdouble              x0,                                     gdouble              y0,                                     gdouble              x1,                                     gdouble              y1);
void        gtk_render_slider      (GtkStyleContext     *context,                                     cairo_t             *cr,                                     gdouble              x,                                     gdouble              y,                                     gdouble              width,                                     gdouble              height,                                     GtkOrientation       orientation);
void        gtk_render_frame_gap   (GtkStyleContext     *context,                                     cairo_t             *cr,                                     gdouble              x,                                     gdouble              y,                                     gdouble              width,                                     gdouble              height,                                     GtkPositionType      gap_side,                                     gdouble              xy0_gap,                                     gdouble              xy1_gap);
void        gtk_render_extension   (GtkStyleContext     *context,                                     cairo_t             *cr,                                     gdouble              x,                                     gdouble              y,                                     gdouble              width,                                     gdouble              height,                                     GtkPositionType      gap_side);
void        gtk_render_handle      (GtkStyleContext     *context,                                     cairo_t             *cr,                                     gdouble              x,                                     gdouble              y,                                     gdouble              width,                                     gdouble              height);
void        gtk_render_activity    (GtkStyleContext     *context,                                     cairo_t             *cr,                                     gdouble              x,                                     gdouble              y,                                     gdouble              width,                                     gdouble              height);
GdkPixbuf * gtk_render_icon_pixbuf (GtkStyleContext     *context,                                     const GtkIconSource *source,                                     GtkIconSize          size);
void        gtk_render_icon        (GtkStyleContext     *context,                                     cairo_t             *cr,                                     GdkPixbuf           *pixbuf,                                     gdouble              x,                                     gdouble              y);
void        gtk_render_insertion_cursor                                   (GtkStyleContext     *context,                                     cairo_t             *cr,                                     gdouble              x,                                     gdouble              y,                                     PangoLayout         *layout,                                     int                  index,                                     PangoDirection       direction);
void   gtk_draw_insertion_cursor    (GtkWidget          *widget,                                      cairo_t            *cr,                                      const GdkRectangle *location,                                      gboolean            is_primary,                                      GtkTextDirection    direction,                                      gboolean            draw_arrow);
AtkAttributeSet *_gtk_style_context_get_attributes (AtkAttributeSet *attributes,                                                     GtkStyleContext *context,                                                     GtkStateFlags    flags);
GType              gtk_range_get_type                      (void) ;
void               gtk_range_set_adjustment                (GtkRange      *range,                                                             GtkAdjustment *adjustment);
GtkAdjustment*     gtk_range_get_adjustment                (GtkRange      *range);
void               gtk_range_set_inverted                  (GtkRange      *range,                                                             gboolean       setting);
gboolean           gtk_range_get_inverted                  (GtkRange      *range);
void               gtk_range_set_flippable                 (GtkRange      *range,                                                             gboolean       flippable);
gboolean           gtk_range_get_flippable                 (GtkRange      *range);
void               gtk_range_set_slider_size_fixed         (GtkRange      *range,                                                             gboolean       size_fixed);
gboolean           gtk_range_get_slider_size_fixed         (GtkRange      *range);
void               gtk_range_set_min_slider_size           (GtkRange      *range,                                                             gint           min_size);
gint               gtk_range_get_min_slider_size           (GtkRange      *range);
void               gtk_range_get_range_rect                (GtkRange      *range,                                                             GdkRectangle  *range_rect);
void               gtk_range_get_slider_range              (GtkRange      *range,                                                             gint          *slider_start,                                                             gint          *slider_end);
void               gtk_range_set_lower_stepper_sensitivity (GtkRange      *range,                                                             GtkSensitivityType sensitivity);
GtkSensitivityType gtk_range_get_lower_stepper_sensitivity (GtkRange      *range);
void               gtk_range_set_upper_stepper_sensitivity (GtkRange      *range,                                                             GtkSensitivityType sensitivity);
GtkSensitivityType gtk_range_get_upper_stepper_sensitivity (GtkRange      *range);
void               gtk_range_set_increments                (GtkRange      *range,                                                             gdouble        step,                                                             gdouble        page);
void               gtk_range_set_range                     (GtkRange      *range,                                                             gdouble        min,                                                             gdouble        max);
void               gtk_range_set_value                     (GtkRange      *range,                                                             gdouble        value);
gdouble            gtk_range_get_value                     (GtkRange      *range);
void               gtk_range_set_show_fill_level           (GtkRange      *range,                                                             gboolean       show_fill_level);
gboolean           gtk_range_get_show_fill_level           (GtkRange      *range);
void               gtk_range_set_restrict_to_fill_level    (GtkRange      *range,                                                             gboolean       restrict_to_fill_level);
gboolean           gtk_range_get_restrict_to_fill_level    (GtkRange      *range);
void               gtk_range_set_fill_level                (GtkRange      *range,                                                             gdouble        fill_level);
gdouble            gtk_range_get_fill_level                (GtkRange      *range);
void               gtk_range_set_round_digits              (GtkRange      *range,                                                             gint           round_digits);
gint                gtk_range_get_round_digits              (GtkRange      *range);
gdouble            _gtk_range_get_wheel_delta              (GtkRange       *range,                                                             GdkEventScroll *event);
void               _gtk_range_set_has_origin               (GtkRange      *range,                                                             gboolean       has_origin);
gboolean           _gtk_range_get_has_origin               (GtkRange      *range);
void               _gtk_range_set_stop_values              (GtkRange      *range,                                                             gdouble       *values,                                                             gint           n_values);
gint               _gtk_range_get_stop_positions           (GtkRange      *range,                                                             gint         **values);
void               _gtk_range_set_steppers                 (GtkRange      *range,                                                             gboolean       has_a,                                                             gboolean       has_b,                                                             gboolean       has_c,                                                             gboolean       has_d);
GType      gtk_entry_get_type       		(void) ;
GtkWidget* gtk_entry_new            		(void);
GtkWidget* gtk_entry_new_with_buffer            (GtkEntryBuffer *buffer);
GtkEntryBuffer* gtk_entry_get_buffer            (GtkEntry       *entry);
void       gtk_entry_set_buffer                 (GtkEntry       *entry,                                                  GtkEntryBuffer *buffer);
void       gtk_entry_get_text_area              (GtkEntry       *entry,                                                  GdkRectangle   *text_area);
void       gtk_entry_set_visibility 		(GtkEntry      *entry, 						 gboolean       visible);
gboolean   gtk_entry_get_visibility             (GtkEntry      *entry);
void       gtk_entry_set_invisible_char         (GtkEntry      *entry,                                                  gunichar       ch);
gunichar   gtk_entry_get_invisible_char         (GtkEntry      *entry);
void       gtk_entry_unset_invisible_char       (GtkEntry      *entry);
void       gtk_entry_set_has_frame              (GtkEntry      *entry,                                                  gboolean       setting);
gboolean   gtk_entry_get_has_frame              (GtkEntry      *entry);
void             gtk_entry_set_inner_border     (GtkEntry        *entry,                                                  const GtkBorder *border);
const GtkBorder* gtk_entry_get_inner_border     (GtkEntry        *entry);
void       gtk_entry_set_overwrite_mode         (GtkEntry      *entry,                                                  gboolean       overwrite);
gboolean   gtk_entry_get_overwrite_mode         (GtkEntry      *entry);
void       gtk_entry_set_max_length 		(GtkEntry      *entry, 						 gint           max);
gint       gtk_entry_get_max_length             (GtkEntry      *entry);
guint16    gtk_entry_get_text_length            (GtkEntry      *entry);
void       gtk_entry_set_activates_default      (GtkEntry      *entry,                                                  gboolean       setting);
gboolean   gtk_entry_get_activates_default      (GtkEntry      *entry);
void       gtk_entry_set_width_chars            (GtkEntry      *entry,                                                  gint           n_chars);
gint       gtk_entry_get_width_chars            (GtkEntry      *entry);
void       gtk_entry_set_text                   (GtkEntry      *entry,                                                  const gchar   *text);
const gchar* gtk_entry_get_text        (GtkEntry      *entry);
PangoLayout* gtk_entry_get_layout               (GtkEntry      *entry);
void         gtk_entry_get_layout_offsets       (GtkEntry      *entry,                                                  gint          *x,                                                  gint          *y);
void       gtk_entry_set_alignment              (GtkEntry      *entry,                                                  gfloat         xalign);
gfloat     gtk_entry_get_alignment              (GtkEntry      *entry);
void                gtk_entry_set_completion (GtkEntry           *entry,                                               GtkEntryCompletion *completion);
GtkEntryCompletion *gtk_entry_get_completion (GtkEntry           *entry);
gint       gtk_entry_layout_index_to_text_index (GtkEntry      *entry,                                                  gint           layout_index);
gint       gtk_entry_text_index_to_layout_index (GtkEntry      *entry,                                                  gint           text_index);
void           gtk_entry_set_cursor_hadjustment (GtkEntry      *entry,                                                  GtkAdjustment *adjustment);
GtkAdjustment* gtk_entry_get_cursor_hadjustment (GtkEntry      *entry);
void           gtk_entry_set_progress_fraction   (GtkEntry     *entry,                                                   gdouble       fraction);
gdouble        gtk_entry_get_progress_fraction   (GtkEntry     *entry);
void           gtk_entry_set_progress_pulse_step (GtkEntry     *entry,                                                   gdouble       fraction);
gdouble        gtk_entry_get_progress_pulse_step (GtkEntry     *entry);
void           gtk_entry_progress_pulse          (GtkEntry     *entry);
const gchar*   gtk_entry_get_placeholder_text    (GtkEntry             *entry);
void           gtk_entry_set_placeholder_text    (GtkEntry             *entry,                                                   const gchar          *text);
void           gtk_entry_set_icon_from_pixbuf            (GtkEntry             *entry, 							  GtkEntryIconPosition  icon_pos, 							  GdkPixbuf            *pixbuf);
void           gtk_entry_set_icon_from_stock             (GtkEntry             *entry, 							  GtkEntryIconPosition  icon_pos, 							  const gchar          *stock_id);
void           gtk_entry_set_icon_from_icon_name         (GtkEntry             *entry, 							  GtkEntryIconPosition  icon_pos, 							  const gchar          *icon_name);
void           gtk_entry_set_icon_from_gicon             (GtkEntry             *entry, 							  GtkEntryIconPosition  icon_pos, 							  GIcon                *icon);
GtkImageType gtk_entry_get_icon_storage_type             (GtkEntry             *entry, 							  GtkEntryIconPosition  icon_pos);
GdkPixbuf*   gtk_entry_get_icon_pixbuf                   (GtkEntry             *entry, 							  GtkEntryIconPosition  icon_pos);
const gchar* gtk_entry_get_icon_stock                    (GtkEntry             *entry, 							  GtkEntryIconPosition  icon_pos);
const gchar* gtk_entry_get_icon_name                     (GtkEntry             *entry, 							  GtkEntryIconPosition  icon_pos);
GIcon*       gtk_entry_get_icon_gicon                    (GtkEntry             *entry, 							  GtkEntryIconPosition  icon_pos);
void         gtk_entry_set_icon_activatable              (GtkEntry             *entry, 							  GtkEntryIconPosition  icon_pos, 							  gboolean              activatable);
gboolean     gtk_entry_get_icon_activatable              (GtkEntry             *entry, 							  GtkEntryIconPosition  icon_pos);
void         gtk_entry_set_icon_sensitive                (GtkEntry             *entry, 							  GtkEntryIconPosition  icon_pos, 							  gboolean              sensitive);
gboolean     gtk_entry_get_icon_sensitive                (GtkEntry             *entry, 							  GtkEntryIconPosition  icon_pos);
gint         gtk_entry_get_icon_at_pos                   (GtkEntry             *entry, 							  gint                  x, 							  gint                  y);
void         gtk_entry_set_icon_tooltip_text             (GtkEntry             *entry, 							  GtkEntryIconPosition  icon_pos, 							  const gchar          *tooltip);
gchar *      gtk_entry_get_icon_tooltip_text             (GtkEntry             *entry,                                                           GtkEntryIconPosition  icon_pos);
void         gtk_entry_set_icon_tooltip_markup           (GtkEntry             *entry, 							  GtkEntryIconPosition  icon_pos, 							  const gchar          *tooltip);
gchar *      gtk_entry_get_icon_tooltip_markup           (GtkEntry             *entry,                                                           GtkEntryIconPosition  icon_pos);
void         gtk_entry_set_icon_drag_source              (GtkEntry             *entry, 							  GtkEntryIconPosition  icon_pos, 							  GtkTargetList        *target_list, 							  GdkDragAction         actions);
gint         gtk_entry_get_current_icon_drag_source      (GtkEntry             *entry);
void         gtk_entry_get_icon_area                     (GtkEntry             *entry,                                                           GtkEntryIconPosition  icon_pos,                                                           GdkRectangle         *icon_area);
gboolean    gtk_entry_im_context_filter_keypress         (GtkEntry             *entry,                                                           GdkEventKey          *event);
void        gtk_entry_reset_im_context                   (GtkEntry             *entry);
