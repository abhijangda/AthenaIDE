GType gtk_about_dialog_get_type (void);
GtkWidget *gtk_about_dialog_new (void);
void gtk_show_about_dialog (GtkWindow *parent, const gchar *first_property_name, ...);
const gchar * gtk_about_dialog_get_program_name (GtkAboutDialog *about);
void gtk_about_dialog_set_program_name (GtkAboutDialog *about, const gchar *name);
const gchar * gtk_about_dialog_get_version (GtkAboutDialog *about);
void gtk_about_dialog_set_version (GtkAboutDialog *about, const gchar *version);
const gchar * gtk_about_dialog_get_copyright (GtkAboutDialog *about);
void gtk_about_dialog_set_copyright (GtkAboutDialog *about, const gchar *copyright);
const gchar * gtk_about_dialog_get_comments (GtkAboutDialog *about);
void gtk_about_dialog_set_comments (GtkAboutDialog *about, const gchar *comments);
const gchar * gtk_about_dialog_get_license (GtkAboutDialog *about);
void gtk_about_dialog_set_license (GtkAboutDialog *about, const gchar *license);
void gtk_about_dialog_set_license_type (GtkAboutDialog *about, GtkLicense license_type);
GtkLicense gtk_about_dialog_get_license_type (GtkAboutDialog *about);
gboolean gtk_about_dialog_get_wrap_license (GtkAboutDialog *about);
void gtk_about_dialog_set_wrap_license (GtkAboutDialog *about, gboolean wrap_license);
const gchar * gtk_about_dialog_get_website (GtkAboutDialog *about);
void gtk_about_dialog_set_website (GtkAboutDialog *about, const gchar *website);
const gchar * gtk_about_dialog_get_website_label (GtkAboutDialog *about);
void gtk_about_dialog_set_website_label (GtkAboutDialog *about, const gchar *website_label);
const gchar* const * gtk_about_dialog_get_authors (GtkAboutDialog *about);
void gtk_about_dialog_set_authors (GtkAboutDialog *about, const gchar **authors);
const gchar* const * gtk_about_dialog_get_documenters (GtkAboutDialog *about);
void gtk_about_dialog_set_documenters (GtkAboutDialog *about, const gchar **documenters);
const gchar* const * gtk_about_dialog_get_artists (GtkAboutDialog *about);
void gtk_about_dialog_set_artists (GtkAboutDialog *about, const gchar **artists);
const gchar * gtk_about_dialog_get_translator_credits (GtkAboutDialog *about);
void gtk_about_dialog_set_translator_credits (GtkAboutDialog *about, const gchar *translator_credits);
GdkPixbuf *gtk_about_dialog_get_logo (GtkAboutDialog *about);
void gtk_about_dialog_set_logo (GtkAboutDialog *about, GdkPixbuf *logo);
const gchar * gtk_about_dialog_get_logo_icon_name (GtkAboutDialog *about);
void gtk_about_dialog_set_logo_icon_name (GtkAboutDialog *about, const gchar *icon_name);
void gtk_about_dialog_add_credit_section (GtkAboutDialog *about, const gchar *section_name, const gchar **people); 
GType gtk_accel_group_get_type (void);
GtkAccelGroup* gtk_accel_group_new (void);
gboolean gtk_accel_group_get_is_locked (GtkAccelGroup *accel_group);
GdkModifierType gtk_accel_group_get_modifier_mask (GtkAccelGroup *accel_group);
void gtk_accel_group_lock(GtkAccelGroup *accel_group);
void gtk_accel_group_unlock (GtkAccelGroup *accel_group);
void gtk_accel_group_connect (GtkAccelGroup *accel_group, guint accel_key, GdkModifierType accel_mods,GtkAccelFlags accel_flags, GClosure *closure);
void gtk_accel_group_connect_by_path (GtkAccelGroup *accel_group, const gchar *accel_path, GClosure *closure);
gboolean gtk_accel_group_disconnect (GtkAccelGroup *accel_group, GClosure *closure);
gboolean gtk_accel_group_disconnect_key (GtkAccelGroup *accel_group, guint accel_key, GdkModifierType accel_mods);
gboolean gtk_accel_group_activate (GtkAccelGroup *accel_group,GQuark accel_quark, GObject *acceleratable, guint accel_key, GdkModifierType accel_mods); 
void _gtk_accel_group_attach (GtkAccelGroup *accel_group, GObject *object);
void _gtk_accel_group_detach (GtkAccelGroup *accel_group, GObject *object);
gboolean gtk_accel_groups_activate (GObject *object, guint accel_key, GdkModifierType accel_mods);
GSList* gtk_accel_groups_from_object (GObject *object);
GtkAccelKey* gtk_accel_group_find (GtkAccelGroup *accel_group, GtkAccelGroupFindFunc find_func, gpointer data);
GtkAccelGroup* gtk_accel_group_from_accel_closure (GClosure *closure);
gboolean gtk_accelerator_valid (guint keyval, GdkModifierType modifiers);
void gtk_accelerator_parse (const gchar *accelerator, guint *accelerator_key, GdkModifierType *accelerator_mods);
void gtk_accelerator_parse_with_keycode (const gchar *accelerator, guint *accelerator_key, guint **accelerator_codes, GdkModifierType *accelerator_mods);
gchar* gtk_accelerator_name (guint accelerator_key, GdkModifierType accelerator_mods);
gchar* gtk_accelerator_name_with_keycode (GdkDisplay *display, guint accelerator_key, guint keycode, GdkModifierType accelerator_mods);
gchar* gtk_accelerator_get_label (guint accelerator_key, GdkModifierType accelerator_mods);
gchar* gtk_accelerator_get_label_with_keycode (GdkDisplay *display, guint accelerator_key, guint keycode, GdkModifierType accelerator_mods);
void gtk_accelerator_set_default_mod_mask (GdkModifierType default_mod_mask);
GdkModifierType gtk_accelerator_get_default_mod_mask (void);
GtkAccelGroupEntry* gtk_accel_group_query (GtkAccelGroup *accel_group, guint accel_key, GdkModifierType accel_mods, guint *n_entries);
void _gtk_accel_group_reconnect (GtkAccelGroup *accel_group, GQuark accel_path_quark);
GSList* _gtk_accel_group_get_accelerables (GtkAccelGroup *accel_group);

void gtk_accel_map_add_entry (const gchar *accel_path, guint accel_key, GdkModifierType accel_mods);
gboolean gtk_accel_map_lookup_entry (const gchar *accel_path, GtkAccelKey *key);
gboolean gtk_accel_map_change_entry (const gchar *accel_path, guint accel_key, GdkModifierType accel_mods, gboolean replace);
void gtk_accel_map_load (const gchar *file_name);
void gtk_accel_map_save (const gchar *file_name);
void gtk_accel_map_foreach (gpointer data, GtkAccelMapForeach foreach_func);
void gtk_accel_map_load_fd (gint fd);
void gtk_accel_map_load_scanner (GScanner *scanner);
void gtk_accel_map_save_fd (gint fd);
void gtk_accel_map_lock_path (const gchar *accel_path);
void gtk_accel_map_unlock_path (const gchar *accel_path);
void gtk_accel_map_add_filter (const gchar *filter_pattern);
void gtk_accel_map_foreach_unfiltered (gpointer data, GtkAccelMapForeach foreach_func);
GType gtk_accessible_get_type (void);
void gtk_accessible_set_widget (GtkAccessible *accessible, GtkWidget *widget);
GtkWidget *gtk_accessible_get_widget (GtkAccessible *accessible);
void gtk_accessible_connect_widget_destroyed (GtkAccessible *accessible);
GType gtk_action_get_type (void);
GtkAction *gtk_action_new (const gchar *name, const gchar *label, const gchar *tooltip, const gchar *stock_id);
const gchar* gtk_action_get_name (GtkAction *action);
gboolean gtk_action_is_sensitive (GtkAction *action);
gboolean gtk_action_get_sensitive (GtkAction *action);
void gtk_action_set_sensitive (GtkAction *action, gboolean sensitive);
gboolean gtk_action_is_visible (GtkAction *action);
gboolean gtk_action_get_visible (GtkAction *action);
void gtk_action_set_visible (GtkAction *action, gboolean visible);
void gtk_action_activate (GtkAction *action);
GtkWidget * gtk_action_create_icon (GtkAction *action, GtkIconSize icon_size);
GtkWidget * gtk_action_create_menu_item (GtkAction *action);
GtkWidget * gtk_action_create_tool_item (GtkAction *action);
GtkWidget * gtk_action_create_menu (GtkAction *action);
GSList * gtk_action_get_proxies (GtkAction *action);
void gtk_action_connect_accelerator (GtkAction *action);
void gtk_action_disconnect_accelerator (GtkAction *action);
const gchar *gtk_action_get_accel_path (GtkAction *action);
GClosure *gtk_action_get_accel_closure (GtkAction *action);
void gtk_action_block_activate (GtkAction *action);
void gtk_action_unblock_activate (GtkAction *action);
void _gtk_action_add_to_proxy_list (GtkAction *action,  GtkWidget *proxy);
void _gtk_action_remove_from_proxy_list(GtkAction *action, GtkWidget *proxy);
void _gtk_action_emit_activate (GtkAction *action);
void gtk_action_set_accel_path (GtkAction *action, const gchar *accel_path);
void gtk_action_set_accel_group (GtkAction *action, GtkAccelGroup *accel_group);
void _gtk_action_sync_menu_visible (GtkAction *action, GtkWidget *proxy, gboolean empty);
void gtk_action_set_label (GtkAction *action, const gchar *label);
const gchar * gtk_action_get_label (GtkAction *action);
void gtk_action_set_short_label (GtkAction *action, const gchar *short_label);
const gchar * gtk_action_get_short_label (GtkAction *action);
void gtk_action_set_tooltip (GtkAction *action, const gchar *tooltip);
const gchar * gtk_action_get_tooltip (GtkAction *action);
void gtk_action_set_stock_id (GtkAction *action, const gchar *stock_id);
const gchar * gtk_action_get_stock_id (GtkAction *action);
void gtk_action_set_gicon (GtkAction *action, GIcon *icon);
GIcon *gtk_action_get_gicon (GtkAction *action);
void gtk_action_set_icon_name (GtkAction *action, const gchar *icon_name);
const gchar * gtk_action_get_icon_name (GtkAction *action);
void gtk_action_set_visible_horizontal (GtkAction *action, gboolean visible_horizontal);
gboolean gtk_action_get_visible_horizontal (GtkAction *action);
void gtk_action_set_visible_vertical (GtkAction *action, gboolean visible_vertical);
gboolean gtk_action_get_visible_vertical (GtkAction *action);
void gtk_action_set_is_important (GtkAction *action, gboolean is_important);
gboolean gtk_action_get_is_important (GtkAction *action);
void gtk_action_set_always_show_image (GtkAction *action, gboolean always_show);
gboolean gtk_action_get_always_show_image (GtkAction *action);
GType gtk_actionable_get_type (void);
const gchar * gtk_actionable_get_action_name (GtkActionable *actionable);
void gtk_actionable_set_action_name (GtkActionable *actionable, const gchar *action_name);
GVariant * gtk_actionable_get_action_target_value (GtkActionable *actionable);
void gtk_actionable_set_action_target_value (GtkActionable *actionable, GVariant *target_value);
void gtk_actionable_set_action_target (GtkActionable *actionable, const gchar *format_string, ...);
void gtk_actionable_set_detailed_action_name (GtkActionable *actionable, const gchar *detailed_action_name);
GType gtk_action_group_get_type (void);
GtkActionGroup *gtk_action_group_new (const gchar *name);
const gchar *gtk_action_group_get_name (GtkActionGroup *action_group);
gboolean gtk_action_group_get_sensitive (GtkActionGroup *action_group);
void gtk_action_group_set_sensitive (GtkActionGroup *action_group, gboolean sensitive);
gboolean gtk_action_group_get_visible (GtkActionGroup *action_group);
void gtk_action_group_set_visible (GtkActionGroup *action_group, gboolean visible);
GtkAction *gtk_action_group_get_action (GtkActionGroup *action_group, const gchar *action_name);
GList *gtk_action_group_list_actions (GtkActionGroup *action_group);
void gtk_action_group_add_action (GtkActionGroup *action_group, GtkAction *action);
void gtk_action_group_add_action_with_accel (GtkActionGroup *action_group, GtkAction *action, const gchar *accelerator);
void gtk_action_group_remove_action (GtkActionGroup *action_group, GtkAction *action);
void gtk_action_group_add_actions (GtkActionGroup *action_group, const GtkActionEntry *entries, guint n_entries, gpointer user_data);
void gtk_action_group_add_toggle_actions (GtkActionGroup *action_group, const GtkToggleActionEntry *entries, guint n_entries, gpointer user_data);
void gtk_action_group_add_radio_actions (GtkActionGroup *action_group, const GtkRadioActionEntry *entries, guint n_entries, gint value, GCallback on_change, gpointer user_data);
void gtk_action_group_add_actions_full (GtkActionGroup *action_group, const GtkActionEntry *entries, guint n_entries, gpointer user_data, GDestroyNotify destroy);
void gtk_action_group_add_toggle_actions_full (GtkActionGroup *action_group, const GtkToggleActionEntry *entries, guint n_entries, gpointer user_data, GDestroyNotify destroy);
void gtk_action_group_add_radio_actions_full (GtkActionGroup *action_group, const GtkRadioActionEntry *entries, guint n_entries, gint value, GCallback on_change, gpointer user_data, GDestroyNotify destroy);
void gtk_action_group_set_translate_func (GtkActionGroup *action_group, GtkTranslateFunc func, gpointer data, GDestroyNotify notify);
void gtk_action_group_set_translation_domain (GtkActionGroup *action_group, const gchar *domain);
const gchar * gtk_action_group_translate_string (GtkActionGroup *action_group, const gchar *string);
void _gtk_action_group_emit_connect_proxy (GtkActionGroup *action_group, GtkAction *action, GtkWidget *proxy);
void _gtk_action_group_emit_disconnect_proxy (GtkActionGroup *action_group, GtkAction *action, GtkWidget *proxy);
void _gtk_action_group_emit_pre_activate (GtkActionGroup *action_group, GtkAction *action);
void _gtk_action_group_emit_post_activate (GtkActionGroup *action_group, GtkAction *action);
GType gtk_activatable_get_type (void);
void gtk_activatable_sync_action_properties (GtkActivatable *activatable, GtkAction *action);
void gtk_activatable_set_related_action (GtkActivatable *activatable, GtkAction *action);
GtkAction *gtk_activatable_get_related_action (GtkActivatable *activatable);
void gtk_activatable_set_use_action_appearance (GtkActivatable *activatable, gboolean use_appearance);
gboolean gtk_activatable_get_use_action_appearance (GtkActivatable *activatable);
void gtk_activatable_do_set_related_action (GtkActivatable *activatable, GtkAction *action);
GType gtk_adjustment_get_type (void);
GtkAdjustment* gtk_adjustment_new (gdouble value, gdouble lower, gdouble upper, gdouble step_increment, gdouble page_increment, gdouble page_size);
void gtk_adjustment_changed (GtkAdjustment *adjustment);
void gtk_adjustment_value_changed (GtkAdjustment *adjustment);
void gtk_adjustment_clamp_page (GtkAdjustment *adjustment, gdouble lower, gdouble upper);
gdouble gtk_adjustment_get_value (GtkAdjustment *adjustment);
void gtk_adjustment_set_value (GtkAdjustment *adjustment, gdouble value);
gdouble gtk_adjustment_get_lower (GtkAdjustment *adjustment);
void gtk_adjustment_set_lower (GtkAdjustment *adjustment, gdouble lower);
gdouble gtk_adjustment_get_upper (GtkAdjustment *adjustment);
void gtk_adjustment_set_upper (GtkAdjustment *adjustment, gdouble upper);
GType gtk_app_chooser_button_get_type (void);
GtkWidget * gtk_app_chooser_button_new (const gchar *content_type);
void gtk_app_chooser_button_append_separator (GtkAppChooserButton *self);
void gtk_app_chooser_button_append_custom_item (GtkAppChooserButton *self, const gchar *name, const gchar *label, GIcon *icon);
void gtk_app_chooser_button_set_active_custom_item (GtkAppChooserButton *self, const gchar *name);
void gtk_app_chooser_button_set_show_dialog_item (GtkAppChooserButton *self, gboolean setting);
gboolean gtk_app_chooser_button_get_show_dialog_item (GtkAppChooserButton *self);
void gtk_app_chooser_button_set_heading (GtkAppChooserButton *self, const gchar *heading);
const gchar * gtk_app_chooser_button_get_heading (GtkAppChooserButton *self);
void gtk_app_chooser_button_set_show_default_item (GtkAppChooserButton *self, gboolean setting);
gboolean gtk_app_chooser_button_get_show_default_item (GtkAppChooserButton *self);
GType gtk_app_chooser_dialog_get_type (void);
GtkWidget * gtk_app_chooser_dialog_new (GtkWindow *parent, GtkDialogFlags flags, GFile *file);
GtkWidget * gtk_app_chooser_dialog_new_for_content_type (GtkWindow *parent, GtkDialogFlags flags, const gchar *content_type);
GtkWidget * gtk_app_chooser_dialog_get_widget (GtkAppChooserDialog *self);
void gtk_app_chooser_dialog_set_heading (GtkAppChooserDialog *self, const gchar *heading);
const gchar * gtk_app_chooser_dialog_get_heading (GtkAppChooserDialog *self);
GType gtk_app_chooser_widget_get_type (void);
GtkWidget * gtk_app_chooser_widget_new (const gchar *content_type);
void gtk_app_chooser_widget_set_show_default (GtkAppChooserWidget *self, gboolean setting);
gboolean gtk_app_chooser_widget_get_show_default (GtkAppChooserWidget *self);
void gtk_app_chooser_widget_set_show_recommended (GtkAppChooserWidget *self, gboolean setting);
gboolean gtk_app_chooser_widget_get_show_recommended (GtkAppChooserWidget *self);
void gtk_app_chooser_widget_set_show_fallback (GtkAppChooserWidget *self, gboolean setting);
gboolean gtk_app_chooser_widget_get_show_fallback (GtkAppChooserWidget *self);
void gtk_app_chooser_widget_set_show_other (GtkAppChooserWidget *self, gboolean setting);
gboolean gtk_app_chooser_widget_get_show_other (GtkAppChooserWidget *self);
void gtk_app_chooser_widget_set_show_all (GtkAppChooserWidget *self, gboolean setting);
gboolean gtk_app_chooser_widget_get_show_all (GtkAppChooserWidget *self);
void gtk_app_chooser_widget_set_default_text (GtkAppChooserWidget *self, const gchar *text);
const gchar * gtk_app_chooser_widget_get_default_text (GtkAppChooserWidget *self);
GType gtk_application_get_type (void);
GtkApplication * gtk_application_new (const gchar *application_id, GApplicationFlags flags);
void gtk_application_add_window (GtkApplication *application, GtkWindow *window);
void gtk_application_remove_window (GtkApplication *application, GtkWindow *window);
GList * gtk_application_get_windows (GtkApplication *application);
GMenuModel * gtk_application_get_app_menu (GtkApplication *application);
void gtk_application_set_app_menu (GtkApplication *application, GMenuModel *app_menu);
GMenuModel * gtk_application_get_menubar (GtkApplication *application);
void gtk_application_set_menubar (GtkApplication *application, GMenuModel *menubar);
void gtk_application_add_accelerator (GtkApplication *application, const gchar *accelerator, const gchar *action_name, GVariant *parameter);
guint gtk_application_inhibit (GtkApplication *application, GtkWindow *window, GtkApplicationInhibitFlags flags, const gchar *reason);
void gtk_application_uninhibit (GtkApplication *application, guint cookie);
gboolean gtk_application_is_inhibited (GtkApplication *application, GtkApplicationInhibitFlags flags);
gdouble gtk_adjustment_get_step_increment (GtkAdjustment *adjustment);
void gtk_adjustment_set_step_increment (GtkAdjustment *adjustment, gdouble step_increment);
gdouble gtk_adjustment_get_page_increment (GtkAdjustment *adjustment);
void gtk_adjustment_set_page_increment (GtkAdjustment *adjustment, gdouble page_increment);
gdouble gtk_adjustment_get_page_size (GtkAdjustment *adjustment);
void gtk_adjustment_set_page_size (GtkAdjustment *adjustment, gdouble page_size);
void gtk_adjustment_configure (GtkAdjustment *adjustment, gdouble value, gdouble lower, gdouble upper, gdouble step_increment, gdouble page_increment, gdouble page_size);
gdouble gtk_adjustment_get_minimum_increment (GtkAdjustment *adjustment);
GType gtk_alignment_get_type (void);
GtkWidget* gtk_alignment_new (gfloat xalign, gfloat yalign, gfloat xscale, gfloat yscale);
void gtk_alignment_set (GtkAlignment *alignment, gfloat xalign, gfloat yalign, gfloat xscale, gfloat yscale);
void gtk_alignment_set_padding (GtkAlignment *alignment,  guint padding_top,  guint padding_bottom,  guint padding_left,  guint padding_right);
void gtk_alignment_get_padding (GtkAlignment *alignment,  guint *padding_top,  guint *padding_bottom,  guint *padding_left,  guint *padding_right);
GType gtk_app_chooser_get_type (void) ;
GAppInfo * gtk_app_chooser_get_app_info (GtkAppChooser *self);
gchar * gtk_app_chooser_get_content_type (GtkAppChooser *self);
void gtk_app_chooser_refresh (GtkAppChooser *self);
GType gtk_application_window_get_type (void) ;
GtkWidget * gtk_application_window_new (GtkApplication *application);
void gtk_application_window_set_show_menubar (GtkApplicationWindow *window,  gboolean show_menubar);
gboolean gtk_application_window_get_show_menubar (GtkApplicationWindow *window);
GType gtk_arrow_get_type (void) ;
GtkWidget* gtk_arrow_new (GtkArrowType arrow_type,  GtkShadowType shadow_type);
void gtk_arrow_set (GtkArrow *arrow,  GtkArrowType arrow_type,  GtkShadowType shadow_type);
GType gtk_aspect_frame_get_type (void) ;
GtkWidget* gtk_aspect_frame_new (const gchar *label,  gfloat xalign,  gfloat yalign,  gfloat ratio,  gboolean obey_child);
void gtk_aspect_frame_set (GtkAspectFrame *aspect_frame,  gfloat xalign,  gfloat yalign,  gfloat ratio,  gboolean obey_child);
GType gtk_assistant_get_type (void) ;
GtkWidget *gtk_assistant_new (void);
void gtk_assistant_next_page (GtkAssistant *assistant);
void gtk_assistant_previous_page (GtkAssistant *assistant);
gint gtk_assistant_get_current_page (GtkAssistant *assistant);
void gtk_assistant_set_current_page (GtkAssistant *assistant,  gint page_num);
gint gtk_assistant_get_n_pages (GtkAssistant *assistant);
GtkWidget *gtk_assistant_get_nth_page (GtkAssistant *assistant,  gint page_num);
gint gtk_assistant_prepend_page (GtkAssistant *assistant,  GtkWidget *page);
gint gtk_assistant_append_page (GtkAssistant *assistant,  GtkWidget *page);
gint gtk_assistant_insert_page (GtkAssistant *assistant,  GtkWidget *page,  gint position);
void gtk_assistant_remove_page (GtkAssistant *assistant,  gint page_num);
void gtk_assistant_set_forward_page_func (GtkAssistant *assistant,  GtkAssistantPageFunc page_func,  gpointer data,  GDestroyNotify destroy);
void gtk_assistant_set_page_type (GtkAssistant *assistant,  GtkWidget *page,  GtkAssistantPageType type);
GtkAssistantPageType gtk_assistant_get_page_type (GtkAssistant *assistant,  GtkWidget *page);
void gtk_assistant_set_page_title (GtkAssistant *assistant,  GtkWidget *page,  const gchar *title);
const gchar * gtk_assistant_get_page_title (GtkAssistant *assistant,  GtkWidget *page);
void gtk_assistant_set_page_header_image (GtkAssistant *assistant,  GtkWidget *page,  GdkPixbuf *pixbuf);
GdkPixbuf *gtk_assistant_get_page_header_image (GtkAssistant *assistant,  GtkWidget *page);
void gtk_assistant_set_page_side_image (GtkAssistant *assistant,  GtkWidget *page,  GdkPixbuf *pixbuf);
GdkPixbuf *gtk_assistant_get_page_side_image (GtkAssistant *assistant,  GtkWidget *page);
void gtk_assistant_set_page_complete (GtkAssistant *assistant,  GtkWidget *page,  gboolean complete);
gboolean gtk_assistant_get_page_complete (GtkAssistant *assistant,  GtkWidget *page);
void gtk_assistant_add_action_widget (GtkAssistant *assistant,  GtkWidget *child);
void gtk_assistant_remove_action_widget (GtkAssistant *assistant,  GtkWidget *child);
void gtk_assistant_update_buttons_state (GtkAssistant *assistant);
void gtk_assistant_commit (GtkAssistant *assistant);
GType gtk_button_box_get_type (void) ;
GtkWidget * gtk_button_box_new (GtkOrientation orientation);
GtkButtonBoxStyle gtk_button_box_get_layout (GtkButtonBox *widget);
void gtk_button_box_set_layout (GtkButtonBox *widget,  GtkButtonBoxStyle layout_style);
gboolean gtk_button_box_get_child_secondary (GtkButtonBox *widget,  GtkWidget *child);
void gtk_button_box_set_child_secondary (GtkButtonBox *widget,  GtkWidget *child,  gboolean is_secondary);
gboolean gtk_button_box_get_child_non_homogeneous (GtkButtonBox *widget,  GtkWidget *child);
void gtk_button_box_set_child_non_homogeneous (GtkButtonBox *widget,  GtkWidget *child,  gboolean non_homogeneous);
GType gtk_bin_get_type (void) ;
GtkWidget *gtk_bin_get_child (GtkBin *bin);
void _gtk_bin_set_child (GtkBin *bin,  GtkWidget *widget);
GtkBindingSet *gtk_binding_set_new (const gchar *set_name);
GtkBindingSet *gtk_binding_set_by_class (gpointer object_class);
GtkBindingSet *gtk_binding_set_find (const gchar *set_name);
gboolean gtk_bindings_activate (GObject *object,  guint keyval,  GdkModifierType modifiers);
gboolean gtk_bindings_activate_event (GObject *object,  GdkEventKey *event);
gboolean gtk_binding_set_activate (GtkBindingSet *binding_set,  guint keyval,  GdkModifierType modifiers,  GObject *object);
void gtk_binding_entry_skip (GtkBindingSet *binding_set,  guint keyval,  GdkModifierType modifiers);
void gtk_binding_entry_add_signal (GtkBindingSet *binding_set,  guint keyval,  GdkModifierType modifiers,  const gchar *signal_name,  guint n_args,  ...);
void gtk_binding_entry_add_signall (GtkBindingSet *binding_set,  guint keyval,  GdkModifierType modifiers,  const gchar *signal_name,  GSList *binding_args);
GTokenType gtk_binding_entry_add_signal_from_string (GtkBindingSet *binding_set,  const gchar *signal_desc);
void gtk_binding_entry_remove (GtkBindingSet *binding_set,  guint keyval,  GdkModifierType modifiers);
void gtk_binding_set_add_path (GtkBindingSet *binding_set,  GtkPathType path_type,  const gchar *path_pattern,  GtkPathPriorityType priority);
GType gtk_border_get_type (void) ;
GtkBorder *gtk_border_new (void);
GtkBorder *gtk_border_copy (const GtkBorder *border_);
void gtk_border_free (GtkBorder *border_);
GType gtk_box_get_type (void) ;
GtkWidget* gtk_box_new (GtkOrientation orientation,  gint spacing);
void gtk_box_pack_start (GtkBox *box,  GtkWidget *child,  gboolean expand,  gboolean fill,  guint padding);
void gtk_box_pack_end (GtkBox *box,  GtkWidget *child,  gboolean expand,  gboolean fill,  guint padding);
void gtk_box_set_homogeneous (GtkBox *box,  gboolean homogeneous);
gboolean gtk_box_get_homogeneous (GtkBox *box);
void gtk_box_set_spacing (GtkBox *box,  gint spacing);
gint gtk_box_get_spacing (GtkBox *box);
void gtk_box_reorder_child (GtkBox *box,  GtkWidget *child,  gint position);
void gtk_box_query_child_packing (GtkBox *box,  GtkWidget *child,  gboolean *expand,  gboolean *fill,  guint *padding,  GtkPackType *pack_type);
void gtk_box_set_child_packing (GtkBox *box,  GtkWidget *child,  gboolean expand,  gboolean fill,  guint padding,  GtkPackType pack_type);
GType gtk_buildable_get_type (void) ;
void gtk_buildable_set_name (GtkBuildable *buildable,  const gchar *name);
const gchar * gtk_buildable_get_name (GtkBuildable *buildable);
void gtk_buildable_add_child (GtkBuildable *buildable,  GtkBuilder *builder,  GObject *child,  const gchar *type);
void gtk_buildable_set_buildable_property (GtkBuildable *buildable,  GtkBuilder *builder,  const gchar *name,  const GValue *value);
GObject * gtk_buildable_construct_child (GtkBuildable *buildable,  GtkBuilder *builder,  const gchar *name);
gboolean gtk_buildable_custom_tag_start (GtkBuildable *buildable,  GtkBuilder *builder,  GObject *child,  const gchar *tagname,  GMarkupParser *parser,  gpointer *data);
void gtk_buildable_custom_tag_end (GtkBuildable *buildable,  GtkBuilder *builder,  GObject *child,  const gchar *tagname,  gpointer *data);
void gtk_buildable_custom_finished (GtkBuildable *buildable,  GtkBuilder *builder,  GObject *child,  const gchar *tagname,  gpointer data);
void gtk_buildable_parser_finished (GtkBuildable *buildable,  GtkBuilder *builder);
GObject * gtk_buildable_get_internal_child (GtkBuildable *buildable,  GtkBuilder *builder,  const gchar *childname);
GType gtk_builder_get_type (void) ;
GtkBuilder* gtk_builder_new (void);
guint gtk_builder_add_from_file (GtkBuilder *builder,  const gchar *filename,  GError **error);
guint gtk_builder_add_from_resource (GtkBuilder *builder,  const gchar *resource_path,  GError **error);
guint gtk_builder_add_from_string (GtkBuilder *builder,  const gchar *buffer,  gsize length,  GError **error);
guint gtk_builder_add_objects_from_file (GtkBuilder *builder,  const gchar *filename,  gchar **object_ids,  GError **error);
guint gtk_builder_add_objects_from_resource(GtkBuilder *builder,  const gchar *resource_path,  gchar **object_ids,  GError **error);
guint gtk_builder_add_objects_from_string (GtkBuilder *builder,  const gchar *buffer,  gsize length,  gchar **object_ids,  GError **error);
GObject* gtk_builder_get_object (GtkBuilder *builder,  const gchar *name);
GSList* gtk_builder_get_objects (GtkBuilder *builder);
void gtk_builder_connect_signals (GtkBuilder *builder,  gpointer user_data);
void gtk_builder_connect_signals_full (GtkBuilder *builder,  GtkBuilderConnectFunc func,  gpointer user_data);
void gtk_builder_set_translation_domain (GtkBuilder *builder,  const gchar *domain);
const gchar* gtk_builder_get_translation_domain (GtkBuilder *builder);
GType gtk_builder_get_type_from_name (GtkBuilder *builder,  const char *type_name);
gboolean gtk_builder_value_from_string (GtkBuilder *builder,  GParamSpec *pspec,  const gchar *string,  GValue *value,  GError **error);
gboolean gtk_builder_value_from_string_type (GtkBuilder *builder,  GType type,  const gchar *string,  GValue *value,  GError **error);
GType gtk_button_get_type (void);
GtkWidget* gtk_button_new (void);
GtkWidget* gtk_button_new_with_label (const gchar *label);
GtkWidget* gtk_button_new_from_stock (const gchar *stock_id);
GtkWidget* gtk_button_new_with_mnemonic (const gchar *label);
void gtk_button_clicked (GtkButton *button);
void gtk_button_pressed (GtkButton *button);
void gtk_button_released (GtkButton *button);
void gtk_button_enter (GtkButton *button);
void gtk_button_leave (GtkButton *button);
void gtk_button_set_relief (GtkButton *button,  GtkReliefStyle newstyle);
GtkReliefStyle gtk_button_get_relief (GtkButton *button);
void gtk_button_set_label (GtkButton *button,  const gchar *label);
const gchar * gtk_button_get_label (GtkButton *button);
void gtk_button_set_use_underline (GtkButton *button,  gboolean use_underline);
gboolean gtk_button_get_use_underline (GtkButton *button);
void gtk_button_set_use_stock (GtkButton *button,  gboolean use_stock);
gboolean gtk_button_get_use_stock (GtkButton *button);
void gtk_button_set_focus_on_click (GtkButton *button,  gboolean focus_on_click);
gboolean gtk_button_get_focus_on_click (GtkButton *button);
void gtk_button_set_alignment (GtkButton *button,  gfloat xalign,  gfloat yalign);
void gtk_button_get_alignment (GtkButton *button,  gfloat *xalign,  gfloat *yalign);
void gtk_button_set_image (GtkButton *button,  GtkWidget *image);
GtkWidget* gtk_button_get_image (GtkButton *button);
void gtk_button_set_image_position (GtkButton *button,  GtkPositionType position);
GtkPositionType gtk_button_get_image_position (GtkButton *button);
GdkWindow* gtk_button_get_event_window (GtkButton *button);


GType	   gtk_calendar_get_type	(void) ;
GtkWidget* gtk_calendar_new		(void);

void       gtk_calendar_select_month	(GtkCalendar *calendar, 					 guint	      month, 					 guint	      year);
void	   gtk_calendar_select_day	(GtkCalendar *calendar, 					 guint	      day);

void       gtk_calendar_mark_day	(GtkCalendar *calendar, 					 guint	      day);
void       gtk_calendar_unmark_day	(GtkCalendar *calendar, 					 guint	      day);
void	   gtk_calendar_clear_marks	(GtkCalendar *calendar);


void	   gtk_calendar_set_display_options (GtkCalendar    	      *calendar, 					     GtkCalendarDisplayOptions flags);
GtkCalendarDisplayOptions
           gtk_calendar_get_display_options (GtkCalendar   	      *calendar);
void	   gtk_calendar_get_date	(GtkCalendar *calendar,  					 guint	     *year, 					 guint	     *month, 					 guint	     *day);

void       gtk_calendar_set_detail_func (GtkCalendar           *calendar,                                          GtkCalendarDetailFunc  func,                                          gpointer               data,                                          GDestroyNotify         destroy);

void       gtk_calendar_set_detail_width_chars (GtkCalendar    *calendar,                                                 gint            chars);
void       gtk_calendar_set_detail_height_rows (GtkCalendar    *calendar,                                                 gint            rows);

gint       gtk_calendar_get_detail_width_chars (GtkCalendar    *calendar);
gint       gtk_calendar_get_detail_height_rows (GtkCalendar    *calendar);

gboolean   gtk_calendar_get_day_is_marked      (GtkCalendar    *calendar,                                                 guint           day);
GType                 gtk_cell_area_get_type                       (void) ;



gboolean gtk_file_chooser_add_shortcut_folder    (GtkFileChooser *chooser, 						  const char     *folder, 						  GError        **error);
gboolean gtk_file_chooser_remove_shortcut_folder (GtkFileChooser *chooser, 						  const char     *folder, 						  GError        **error);
GSList *gtk_file_chooser_list_shortcut_folders   (GtkFileChooser *chooser);

gboolean gtk_file_chooser_add_shortcut_folder_uri    (GtkFileChooser *chooser, 						      const char     *uri, 						      GError        **error);
gboolean gtk_file_chooser_remove_shortcut_folder_uri (GtkFileChooser *chooser, 						      const char     *uri, 						      GError        **error);
GSList *gtk_file_chooser_list_shortcut_folder_uris   (GtkFileChooser *chooser);
GType                 gtk_file_chooser_button_get_type         (void) ;
GtkWidget *           gtk_file_chooser_button_new              (const gchar          *title, 								GtkFileChooserAction  action);
GtkWidget *           gtk_file_chooser_button_new_with_dialog  (GtkWidget            *dialog);
const gchar *         gtk_file_chooser_button_get_title        (GtkFileChooserButton *button);
void                  gtk_file_chooser_button_set_title        (GtkFileChooserButton *button, 								const gchar          *title);
gint                  gtk_file_chooser_button_get_width_chars  (GtkFileChooserButton *button);
void                  gtk_file_chooser_button_set_width_chars  (GtkFileChooserButton *button, 								gint                  n_chars);
gboolean              gtk_file_chooser_button_get_focus_on_click (GtkFileChooserButton *button);
void                  gtk_file_chooser_button_set_focus_on_click (GtkFileChooserButton *button,                                                                   gboolean              focus_on_click);
GType      gtk_file_chooser_dialog_get_type         (void) ;
GtkWidget *gtk_file_chooser_dialog_new              (const gchar          *title, 						     GtkWindow            *parent, 						     GtkFileChooserAction  action, 						     const gchar          *first_button_text, 						     ...) G_GNUC_NULL_TERMINATED;
GType      gtk_file_chooser_widget_get_type         (void) ;
GtkWidget *gtk_file_chooser_widget_new              (GtkFileChooserAction  action);
GType gtk_file_filter_get_type (void) ;

GtkFileFilter *       gtk_file_filter_new      (void);
void                  gtk_file_filter_set_name (GtkFileFilter *filter, 						const gchar   *name);
const gchar *         gtk_file_filter_get_name (GtkFileFilter *filter);

void gtk_file_filter_add_mime_type      (GtkFileFilter      *filter, 					 const gchar        *mime_type);
void gtk_file_filter_add_pattern        (GtkFileFilter      *filter, 					 const gchar        *pattern);
void gtk_file_filter_add_pixbuf_formats (GtkFileFilter      *filter);
void gtk_file_filter_add_custom         (GtkFileFilter      *filter, 					 GtkFileFilterFlags  needed, 					 GtkFileFilterFunc   func, 					 gpointer            data, 					 GDestroyNotify      notify);

GtkFileFilterFlags gtk_file_filter_get_needed (GtkFileFilter           *filter);
gboolean           gtk_file_filter_filter     (GtkFileFilter           *filter, 					       const GtkFileFilterInfo *filter_info);
GType      gtk_fixed_get_type          (void) ;
GtkWidget* gtk_fixed_new               (void);
void       gtk_fixed_put               (GtkFixed       *fixed,                                         GtkWidget      *widget,                                         gint            x,                                         gint            y);
void       gtk_fixed_move              (GtkFixed       *fixed,                                         GtkWidget      *widget,                                         gint            x,                                         gint            y);
GType                 gtk_font_button_get_type       (void) ;
GtkWidget            *gtk_font_button_new            (void);
GtkWidget            *gtk_font_button_new_with_font  (const gchar   *fontname);

const gchar *         gtk_font_button_get_title      (GtkFontButton *font_button);
void                  gtk_font_button_set_title      (GtkFontButton *font_button,                                                       const gchar   *title);
gboolean              gtk_font_button_get_use_font   (GtkFontButton *font_button);
void                  gtk_font_button_set_use_font   (GtkFontButton *font_button,                                                       gboolean       use_font);
gboolean              gtk_font_button_get_use_size   (GtkFontButton *font_button);
void                  gtk_font_button_set_use_size   (GtkFontButton *font_button,                                                       gboolean       use_size);
const gchar *         gtk_font_button_get_font_name  (GtkFontButton *font_button);
gboolean              gtk_font_button_set_font_name  (GtkFontButton *font_button,                                                       const gchar   *fontname);
gboolean              gtk_font_button_get_show_style (GtkFontButton *font_button);
void                  gtk_font_button_set_show_style (GtkFontButton *font_button,                                                       gboolean       show_style);
gboolean              gtk_font_button_get_show_size  (GtkFontButton *font_button);
void                  gtk_font_button_set_show_size  (GtkFontButton *font_button,                                                       gboolean       show_size);

GType            gtk_font_chooser_get_type                 (void) ;


PangoFontFamily *gtk_font_chooser_get_font_family          (GtkFontChooser   *fontchooser);

PangoFontFace   *gtk_font_chooser_get_font_face            (GtkFontChooser   *fontchooser);

gint             gtk_font_chooser_get_font_size            (GtkFontChooser   *fontchooser);


PangoFontDescription *
                 gtk_font_chooser_get_font_desc            (GtkFontChooser             *fontchooser);

void             gtk_font_chooser_set_font_desc            (GtkFontChooser             *fontchooser,                                                             const PangoFontDescription *font_desc);


gchar*           gtk_font_chooser_get_font                 (GtkFontChooser   *fontchooser);


void             gtk_font_chooser_set_font                 (GtkFontChooser   *fontchooser,                                                             const gchar      *fontname);

gchar*           gtk_font_chooser_get_preview_text         (GtkFontChooser   *fontchooser);

void             gtk_font_chooser_set_preview_text         (GtkFontChooser   *fontchooser,                                                             const gchar      *text);

gboolean         gtk_font_chooser_get_show_preview_entry   (GtkFontChooser   *fontchooser);

void             gtk_font_chooser_set_show_preview_entry   (GtkFontChooser   *fontchooser,                                                             gboolean          show_preview_entry);

void             gtk_font_chooser_set_filter_func          (GtkFontChooser   *fontchooser,                                                             GtkFontFilterFunc filter,                                                             gpointer          user_data,                                                             GDestroyNotify    destroy);

GType      gtk_font_chooser_dialog_get_type         (void) ;

GtkWidget* gtk_font_chooser_dialog_new              (const gchar          *title,                                                      GtkWindow            *parent);

GType        gtk_font_chooser_widget_get_type                 (void) ;


GtkWidget*   gtk_font_chooser_widget_new                      (void);

GType        gtk_font_chooser_widget_get_type                 (void) ;


GtkWidget*   gtk_font_chooser_widget_new                      (void);
GType         gtk_gradient_get_type       (void) ;

GtkGradient * gtk_gradient_new_linear     (gdouble              x0,                                            gdouble              y0,                                            gdouble              x1,                                            gdouble              y1);
GtkGradient * gtk_gradient_new_radial     (gdouble              x0,                                            gdouble              y0,                                            gdouble              radius0,                                            gdouble              x1,                                            gdouble              y1,                                            gdouble              radius1);

void          gtk_gradient_add_color_stop (GtkGradient         *gradient,                                            gdouble              offset,                                            GtkSymbolicColor    *color);

GtkGradient * gtk_gradient_ref            (GtkGradient         *gradient);
void          gtk_gradient_unref          (GtkGradient         *gradient);

gboolean      gtk_gradient_resolve        (GtkGradient         *gradient,                                            GtkStyleProperties  *props,                                            cairo_pattern_t    **resolved_gradient);
cairo_pattern_t *
              gtk_gradient_resolve_for_context
                                          (GtkGradient         *gradient,                                            GtkStyleContext     *context);

char *        gtk_gradient_to_string      (GtkGradient         *gradient);
GType      gtk_grid_get_type               (void) ;
GtkWidget* gtk_grid_new                    (void);
void       gtk_grid_attach                 (GtkGrid         *grid,                                             GtkWidget       *child,                                             gint             left,                                             gint             top,                                             gint             width,                                             gint             height);
void       gtk_grid_attach_next_to         (GtkGrid         *grid,                                             GtkWidget       *child,                                             GtkWidget       *sibling,                                             GtkPositionType  side,                                             gint             width,                                             gint             height);

GtkWidget *gtk_grid_get_child_at           (GtkGrid         *grid,                                             gint             left,                                             gint             top);

void       gtk_grid_insert_row             (GtkGrid         *grid,                                             gint             position);

void       gtk_grid_insert_column          (GtkGrid         *grid,                                             gint             position);

void       gtk_grid_insert_next_to         (GtkGrid         *grid,                                             GtkWidget       *sibling,                                             GtkPositionType  side);
void       gtk_grid_set_row_homogeneous    (GtkGrid         *grid,                                             gboolean         homogeneous);
gboolean   gtk_grid_get_row_homogeneous    (GtkGrid         *grid);
void       gtk_grid_set_row_spacing        (GtkGrid         *grid,                                             guint            spacing);
guint      gtk_grid_get_row_spacing        (GtkGrid         *grid);
void       gtk_grid_set_column_homogeneous (GtkGrid         *grid,                                             gboolean         homogeneous);
gboolean   gtk_grid_get_column_homogeneous (GtkGrid         *grid);
void       gtk_grid_set_column_spacing     (GtkGrid         *grid,                                             guint            spacing);
guint      gtk_grid_get_column_spacing     (GtkGrid         *grid);

GType gtk_invisible_get_type (void) G_GNUC_CONST;

GtkWidget* gtk_invisible_new            (void);
GtkWidget* gtk_invisible_new_for_screen (GdkScreen    *screen);
void	   gtk_invisible_set_screen	(GtkInvisible *invisible,
					 GdkScreen    *screen);
GdkScreen* gtk_invisible_get_screen	(GtkInvisible *invisible);
GType          gtk_info_bar_get_type               (void) G_GNUC_CONST;
GtkWidget     *gtk_info_bar_new                    (void);

GtkWidget     *gtk_info_bar_new_with_buttons       (const gchar    *first_button_text,
                                                    ...);

GtkWidget     *gtk_info_bar_get_action_area        (GtkInfoBar     *info_bar);
GtkWidget     *gtk_info_bar_get_content_area       (GtkInfoBar     *info_bar);
void           gtk_info_bar_add_action_widget      (GtkInfoBar     *info_bar,
                                                    GtkWidget      *child,
                                                    gint            response_id);
GtkWidget     *gtk_info_bar_add_button             (GtkInfoBar     *info_bar,
                                                    const gchar    *button_text,
                                                    gint            response_id);
void           gtk_info_bar_add_buttons            (GtkInfoBar     *info_bar,
                                                    const gchar    *first_button_text,
                                                    ...);
void           gtk_info_bar_set_response_sensitive (GtkInfoBar     *info_bar,
                                                    gint            response_id,
                                                    gboolean        setting);
void           gtk_info_bar_set_default_response   (GtkInfoBar     *info_bar,
                                                    gint            response_id);

/* Emit response signal */
void           gtk_info_bar_response               (GtkInfoBar     *info_bar,
                                                    gint            response_id);

void           gtk_info_bar_set_message_type       (GtkInfoBar     *info_bar,
                                                    GtkMessageType  message_type);
GtkMessageType gtk_info_bar_get_message_type       (GtkInfoBar     *info_bar);

GType         gtk_im_multicontext_get_type (void) G_GNUC_CONST;
GtkIMContext *gtk_im_multicontext_new      (void);

void          gtk_im_multicontext_append_menuitems (GtkIMMulticontext *context,
						    GtkMenuShell      *menushell);
const char  * gtk_im_multicontext_get_context_id   (GtkIMMulticontext *context);

void          gtk_im_multicontext_set_context_id   (GtkIMMulticontext *context,
                                                    const char        *context_id);
GType         gtk_im_context_simple_get_type  (void) G_GNUC_CONST;
GtkIMContext *gtk_im_context_simple_new       (void);

void          gtk_im_context_simple_add_table (GtkIMContextSimple *context_simple,
					       guint16            *data,
					       gint                max_seq_len,
					       gint                n_seqs);
GType    gtk_im_context_get_type            (void) G_GNUC_CONST;

void     gtk_im_context_set_client_window   (GtkIMContext       *context,
					     GdkWindow          *window);
void     gtk_im_context_get_preedit_string  (GtkIMContext       *context,
					     gchar             **str,
					     PangoAttrList     **attrs,
					     gint               *cursor_pos);
gboolean gtk_im_context_filter_keypress     (GtkIMContext       *context,
					     GdkEventKey        *event);
void     gtk_im_context_focus_in            (GtkIMContext       *context);
void     gtk_im_context_focus_out           (GtkIMContext       *context);
void     gtk_im_context_reset               (GtkIMContext       *context);
void     gtk_im_context_set_cursor_location (GtkIMContext       *context,
					     const GdkRectangle *area);
void     gtk_im_context_set_use_preedit     (GtkIMContext       *context,
					     gboolean            use_preedit);
void     gtk_im_context_set_surrounding     (GtkIMContext       *context,
					     const gchar        *text,
					     gint                len,
					     gint                cursor_index);
gboolean gtk_im_context_get_surrounding     (GtkIMContext       *context,
					     gchar             **text,
					     gint               *cursor_index);
gboolean gtk_im_context_delete_surrounding  (GtkIMContext       *context,
					     gint                offset,
					     gint                n_chars);

GType	   gtk_image_menu_item_get_type          (void) G_GNUC_CONST;
GtkWidget* gtk_image_menu_item_new               (void);
GtkWidget* gtk_image_menu_item_new_with_label    (const gchar      *label);
GtkWidget* gtk_image_menu_item_new_with_mnemonic (const gchar      *label);
GtkWidget* gtk_image_menu_item_new_from_stock    (const gchar      *stock_id,
                                                  GtkAccelGroup    *accel_group);
void       gtk_image_menu_item_set_always_show_image (GtkImageMenuItem *image_menu_item,
                                                      gboolean          always_show);
gboolean   gtk_image_menu_item_get_always_show_image (GtkImageMenuItem *image_menu_item);
void       gtk_image_menu_item_set_image         (GtkImageMenuItem *image_menu_item,
                                                  GtkWidget        *image);
GtkWidget* gtk_image_menu_item_get_image         (GtkImageMenuItem *image_menu_item);
void       gtk_image_menu_item_set_use_stock     (GtkImageMenuItem *image_menu_item,
						  gboolean          use_stock);
gboolean   gtk_image_menu_item_get_use_stock     (GtkImageMenuItem *image_menu_item);
void       gtk_image_menu_item_set_accel_group   (GtkImageMenuItem *image_menu_item, 
						  GtkAccelGroup    *accel_group);

GType      gtk_image_get_type (void) G_GNUC_CONST;

GtkWidget* gtk_image_new                (void);
GtkWidget* gtk_image_new_from_file      (const gchar     *filename);
GtkWidget* gtk_image_new_from_resource  (const gchar     *resource_path);
GtkWidget* gtk_image_new_from_pixbuf    (GdkPixbuf       *pixbuf);
GtkWidget* gtk_image_new_from_stock     (const gchar     *stock_id,
                                         GtkIconSize      size);
GtkWidget* gtk_image_new_from_icon_set  (GtkIconSet      *icon_set,
                                         GtkIconSize      size);
GtkWidget* gtk_image_new_from_animation (GdkPixbufAnimation *animation);
GtkWidget* gtk_image_new_from_icon_name (const gchar     *icon_name,
					 GtkIconSize      size);
GtkWidget* gtk_image_new_from_gicon     (GIcon           *icon,
					 GtkIconSize      size);

void gtk_image_clear              (GtkImage        *image);
void gtk_image_set_from_file      (GtkImage        *image,
                                   const gchar     *filename);
void gtk_image_set_from_resource  (GtkImage        *image,
                                   const gchar     *resource_path);
void gtk_image_set_from_pixbuf    (GtkImage        *image,
                                   GdkPixbuf       *pixbuf);
void gtk_image_set_from_stock     (GtkImage        *image,
                                   const gchar     *stock_id,
                                   GtkIconSize      size);
void gtk_image_set_from_icon_set  (GtkImage        *image,
                                   GtkIconSet      *icon_set,
                                   GtkIconSize      size);
void gtk_image_set_from_animation (GtkImage           *image,
                                   GdkPixbufAnimation *animation);
void gtk_image_set_from_icon_name (GtkImage        *image,
				   const gchar     *icon_name,
				   GtkIconSize      size);
void gtk_image_set_from_gicon     (GtkImage        *image,
				   GIcon           *icon,
				   GtkIconSize      size);
void gtk_image_set_pixel_size     (GtkImage        *image,
				   gint             pixel_size);

GtkImageType gtk_image_get_storage_type (GtkImage   *image);

GdkPixbuf* gtk_image_get_pixbuf   (GtkImage         *image);
void       gtk_image_get_stock    (GtkImage         *image,
                                   gchar           **stock_id,
                                   GtkIconSize      *size);
void       gtk_image_get_icon_set (GtkImage         *image,
                                   GtkIconSet      **icon_set,
                                   GtkIconSize      *size);
GdkPixbufAnimation* gtk_image_get_animation (GtkImage *image);
void       gtk_image_get_icon_name (GtkImage     *image,
				    const gchar **icon_name,
				    GtkIconSize  *size);
void       gtk_image_get_gicon     (GtkImage              *image,
				    GIcon                **gicon,
				    GtkIconSize           *size);
gint       gtk_image_get_pixel_size (GtkImage             *image);






















